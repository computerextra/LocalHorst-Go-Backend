// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"golang-backend/ent/mitarbeiter"
	"golang-backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MitarbeiterUpdate is the builder for updating Mitarbeiter entities.
type MitarbeiterUpdate struct {
	config
	hooks    []Hook
	mutation *MitarbeiterMutation
}

// Where appends a list predicates to the MitarbeiterUpdate builder.
func (mu *MitarbeiterUpdate) Where(ps ...predicate.Mitarbeiter) *MitarbeiterUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetName sets the "Name" field.
func (mu *MitarbeiterUpdate) SetName(s string) *MitarbeiterUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillableName(s *string) *MitarbeiterUpdate {
	if s != nil {
		mu.SetName(*s)
	}
	return mu
}

// SetShort sets the "Short" field.
func (mu *MitarbeiterUpdate) SetShort(s string) *MitarbeiterUpdate {
	mu.mutation.SetShort(s)
	return mu
}

// SetNillableShort sets the "Short" field if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillableShort(s *string) *MitarbeiterUpdate {
	if s != nil {
		mu.SetShort(*s)
	}
	return mu
}

// ClearShort clears the value of the "Short" field.
func (mu *MitarbeiterUpdate) ClearShort() *MitarbeiterUpdate {
	mu.mutation.ClearShort()
	return mu
}

// SetGruppenwahl sets the "Gruppenwahl" field.
func (mu *MitarbeiterUpdate) SetGruppenwahl(s string) *MitarbeiterUpdate {
	mu.mutation.SetGruppenwahl(s)
	return mu
}

// SetNillableGruppenwahl sets the "Gruppenwahl" field if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillableGruppenwahl(s *string) *MitarbeiterUpdate {
	if s != nil {
		mu.SetGruppenwahl(*s)
	}
	return mu
}

// ClearGruppenwahl clears the value of the "Gruppenwahl" field.
func (mu *MitarbeiterUpdate) ClearGruppenwahl() *MitarbeiterUpdate {
	mu.mutation.ClearGruppenwahl()
	return mu
}

// SetInternTelefon1 sets the "InternTelefon1" field.
func (mu *MitarbeiterUpdate) SetInternTelefon1(s string) *MitarbeiterUpdate {
	mu.mutation.SetInternTelefon1(s)
	return mu
}

// SetNillableInternTelefon1 sets the "InternTelefon1" field if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillableInternTelefon1(s *string) *MitarbeiterUpdate {
	if s != nil {
		mu.SetInternTelefon1(*s)
	}
	return mu
}

// ClearInternTelefon1 clears the value of the "InternTelefon1" field.
func (mu *MitarbeiterUpdate) ClearInternTelefon1() *MitarbeiterUpdate {
	mu.mutation.ClearInternTelefon1()
	return mu
}

// SetInternTelefon2 sets the "InternTelefon2" field.
func (mu *MitarbeiterUpdate) SetInternTelefon2(s string) *MitarbeiterUpdate {
	mu.mutation.SetInternTelefon2(s)
	return mu
}

// SetNillableInternTelefon2 sets the "InternTelefon2" field if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillableInternTelefon2(s *string) *MitarbeiterUpdate {
	if s != nil {
		mu.SetInternTelefon2(*s)
	}
	return mu
}

// ClearInternTelefon2 clears the value of the "InternTelefon2" field.
func (mu *MitarbeiterUpdate) ClearInternTelefon2() *MitarbeiterUpdate {
	mu.mutation.ClearInternTelefon2()
	return mu
}

// SetFestnetzPrivat sets the "FestnetzPrivat" field.
func (mu *MitarbeiterUpdate) SetFestnetzPrivat(s string) *MitarbeiterUpdate {
	mu.mutation.SetFestnetzPrivat(s)
	return mu
}

// SetNillableFestnetzPrivat sets the "FestnetzPrivat" field if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillableFestnetzPrivat(s *string) *MitarbeiterUpdate {
	if s != nil {
		mu.SetFestnetzPrivat(*s)
	}
	return mu
}

// ClearFestnetzPrivat clears the value of the "FestnetzPrivat" field.
func (mu *MitarbeiterUpdate) ClearFestnetzPrivat() *MitarbeiterUpdate {
	mu.mutation.ClearFestnetzPrivat()
	return mu
}

// SetFestnetzAlternativ sets the "FestnetzAlternativ" field.
func (mu *MitarbeiterUpdate) SetFestnetzAlternativ(s string) *MitarbeiterUpdate {
	mu.mutation.SetFestnetzAlternativ(s)
	return mu
}

// SetNillableFestnetzAlternativ sets the "FestnetzAlternativ" field if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillableFestnetzAlternativ(s *string) *MitarbeiterUpdate {
	if s != nil {
		mu.SetFestnetzAlternativ(*s)
	}
	return mu
}

// ClearFestnetzAlternativ clears the value of the "FestnetzAlternativ" field.
func (mu *MitarbeiterUpdate) ClearFestnetzAlternativ() *MitarbeiterUpdate {
	mu.mutation.ClearFestnetzAlternativ()
	return mu
}

// SetHomeOffice sets the "HomeOffice" field.
func (mu *MitarbeiterUpdate) SetHomeOffice(s string) *MitarbeiterUpdate {
	mu.mutation.SetHomeOffice(s)
	return mu
}

// SetNillableHomeOffice sets the "HomeOffice" field if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillableHomeOffice(s *string) *MitarbeiterUpdate {
	if s != nil {
		mu.SetHomeOffice(*s)
	}
	return mu
}

// ClearHomeOffice clears the value of the "HomeOffice" field.
func (mu *MitarbeiterUpdate) ClearHomeOffice() *MitarbeiterUpdate {
	mu.mutation.ClearHomeOffice()
	return mu
}

// SetMobilBusiness sets the "MobilBusiness" field.
func (mu *MitarbeiterUpdate) SetMobilBusiness(s string) *MitarbeiterUpdate {
	mu.mutation.SetMobilBusiness(s)
	return mu
}

// SetNillableMobilBusiness sets the "MobilBusiness" field if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillableMobilBusiness(s *string) *MitarbeiterUpdate {
	if s != nil {
		mu.SetMobilBusiness(*s)
	}
	return mu
}

// ClearMobilBusiness clears the value of the "MobilBusiness" field.
func (mu *MitarbeiterUpdate) ClearMobilBusiness() *MitarbeiterUpdate {
	mu.mutation.ClearMobilBusiness()
	return mu
}

// SetMobilPrivat sets the "MobilPrivat" field.
func (mu *MitarbeiterUpdate) SetMobilPrivat(s string) *MitarbeiterUpdate {
	mu.mutation.SetMobilPrivat(s)
	return mu
}

// SetNillableMobilPrivat sets the "MobilPrivat" field if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillableMobilPrivat(s *string) *MitarbeiterUpdate {
	if s != nil {
		mu.SetMobilPrivat(*s)
	}
	return mu
}

// ClearMobilPrivat clears the value of the "MobilPrivat" field.
func (mu *MitarbeiterUpdate) ClearMobilPrivat() *MitarbeiterUpdate {
	mu.mutation.ClearMobilPrivat()
	return mu
}

// SetEmail sets the "Email" field.
func (mu *MitarbeiterUpdate) SetEmail(s string) *MitarbeiterUpdate {
	mu.mutation.SetEmail(s)
	return mu
}

// SetNillableEmail sets the "Email" field if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillableEmail(s *string) *MitarbeiterUpdate {
	if s != nil {
		mu.SetEmail(*s)
	}
	return mu
}

// ClearEmail clears the value of the "Email" field.
func (mu *MitarbeiterUpdate) ClearEmail() *MitarbeiterUpdate {
	mu.mutation.ClearEmail()
	return mu
}

// SetAzubi sets the "Azubi" field.
func (mu *MitarbeiterUpdate) SetAzubi(b bool) *MitarbeiterUpdate {
	mu.mutation.SetAzubi(b)
	return mu
}

// SetNillableAzubi sets the "Azubi" field if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillableAzubi(b *bool) *MitarbeiterUpdate {
	if b != nil {
		mu.SetAzubi(*b)
	}
	return mu
}

// SetGeburtstag sets the "Geburtstag" field.
func (mu *MitarbeiterUpdate) SetGeburtstag(t time.Time) *MitarbeiterUpdate {
	mu.mutation.SetGeburtstag(t)
	return mu
}

// SetNillableGeburtstag sets the "Geburtstag" field if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillableGeburtstag(t *time.Time) *MitarbeiterUpdate {
	if t != nil {
		mu.SetGeburtstag(*t)
	}
	return mu
}

// ClearGeburtstag clears the value of the "Geburtstag" field.
func (mu *MitarbeiterUpdate) ClearGeburtstag() *MitarbeiterUpdate {
	mu.mutation.ClearGeburtstag()
	return mu
}

// SetPaypal sets the "Paypal" field.
func (mu *MitarbeiterUpdate) SetPaypal(b bool) *MitarbeiterUpdate {
	mu.mutation.SetPaypal(b)
	return mu
}

// SetNillablePaypal sets the "Paypal" field if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillablePaypal(b *bool) *MitarbeiterUpdate {
	if b != nil {
		mu.SetPaypal(*b)
	}
	return mu
}

// SetAbonniert sets the "Abonniert" field.
func (mu *MitarbeiterUpdate) SetAbonniert(b bool) *MitarbeiterUpdate {
	mu.mutation.SetAbonniert(b)
	return mu
}

// SetNillableAbonniert sets the "Abonniert" field if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillableAbonniert(b *bool) *MitarbeiterUpdate {
	if b != nil {
		mu.SetAbonniert(*b)
	}
	return mu
}

// SetGeld sets the "Geld" field.
func (mu *MitarbeiterUpdate) SetGeld(s string) *MitarbeiterUpdate {
	mu.mutation.SetGeld(s)
	return mu
}

// SetNillableGeld sets the "Geld" field if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillableGeld(s *string) *MitarbeiterUpdate {
	if s != nil {
		mu.SetGeld(*s)
	}
	return mu
}

// ClearGeld clears the value of the "Geld" field.
func (mu *MitarbeiterUpdate) ClearGeld() *MitarbeiterUpdate {
	mu.mutation.ClearGeld()
	return mu
}

// SetPfand sets the "Pfand" field.
func (mu *MitarbeiterUpdate) SetPfand(s string) *MitarbeiterUpdate {
	mu.mutation.SetPfand(s)
	return mu
}

// SetNillablePfand sets the "Pfand" field if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillablePfand(s *string) *MitarbeiterUpdate {
	if s != nil {
		mu.SetPfand(*s)
	}
	return mu
}

// ClearPfand clears the value of the "Pfand" field.
func (mu *MitarbeiterUpdate) ClearPfand() *MitarbeiterUpdate {
	mu.mutation.ClearPfand()
	return mu
}

// SetDinge sets the "Dinge" field.
func (mu *MitarbeiterUpdate) SetDinge(s string) *MitarbeiterUpdate {
	mu.mutation.SetDinge(s)
	return mu
}

// SetNillableDinge sets the "Dinge" field if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillableDinge(s *string) *MitarbeiterUpdate {
	if s != nil {
		mu.SetDinge(*s)
	}
	return mu
}

// ClearDinge clears the value of the "Dinge" field.
func (mu *MitarbeiterUpdate) ClearDinge() *MitarbeiterUpdate {
	mu.mutation.ClearDinge()
	return mu
}

// SetAbgeschickt sets the "Abgeschickt" field.
func (mu *MitarbeiterUpdate) SetAbgeschickt(t time.Time) *MitarbeiterUpdate {
	mu.mutation.SetAbgeschickt(t)
	return mu
}

// SetNillableAbgeschickt sets the "Abgeschickt" field if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillableAbgeschickt(t *time.Time) *MitarbeiterUpdate {
	if t != nil {
		mu.SetAbgeschickt(*t)
	}
	return mu
}

// ClearAbgeschickt clears the value of the "Abgeschickt" field.
func (mu *MitarbeiterUpdate) ClearAbgeschickt() *MitarbeiterUpdate {
	mu.mutation.ClearAbgeschickt()
	return mu
}

// SetBild1 sets the "Bild1" field.
func (mu *MitarbeiterUpdate) SetBild1(s string) *MitarbeiterUpdate {
	mu.mutation.SetBild1(s)
	return mu
}

// SetNillableBild1 sets the "Bild1" field if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillableBild1(s *string) *MitarbeiterUpdate {
	if s != nil {
		mu.SetBild1(*s)
	}
	return mu
}

// ClearBild1 clears the value of the "Bild1" field.
func (mu *MitarbeiterUpdate) ClearBild1() *MitarbeiterUpdate {
	mu.mutation.ClearBild1()
	return mu
}

// SetBild2 sets the "Bild2" field.
func (mu *MitarbeiterUpdate) SetBild2(s string) *MitarbeiterUpdate {
	mu.mutation.SetBild2(s)
	return mu
}

// SetNillableBild2 sets the "Bild2" field if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillableBild2(s *string) *MitarbeiterUpdate {
	if s != nil {
		mu.SetBild2(*s)
	}
	return mu
}

// ClearBild2 clears the value of the "Bild2" field.
func (mu *MitarbeiterUpdate) ClearBild2() *MitarbeiterUpdate {
	mu.mutation.ClearBild2()
	return mu
}

// SetBild3 sets the "Bild3" field.
func (mu *MitarbeiterUpdate) SetBild3(s string) *MitarbeiterUpdate {
	mu.mutation.SetBild3(s)
	return mu
}

// SetNillableBild3 sets the "Bild3" field if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillableBild3(s *string) *MitarbeiterUpdate {
	if s != nil {
		mu.SetBild3(*s)
	}
	return mu
}

// ClearBild3 clears the value of the "Bild3" field.
func (mu *MitarbeiterUpdate) ClearBild3() *MitarbeiterUpdate {
	mu.mutation.ClearBild3()
	return mu
}

// SetBild1Date sets the "Bild1Date" field.
func (mu *MitarbeiterUpdate) SetBild1Date(t time.Time) *MitarbeiterUpdate {
	mu.mutation.SetBild1Date(t)
	return mu
}

// SetNillableBild1Date sets the "Bild1Date" field if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillableBild1Date(t *time.Time) *MitarbeiterUpdate {
	if t != nil {
		mu.SetBild1Date(*t)
	}
	return mu
}

// ClearBild1Date clears the value of the "Bild1Date" field.
func (mu *MitarbeiterUpdate) ClearBild1Date() *MitarbeiterUpdate {
	mu.mutation.ClearBild1Date()
	return mu
}

// SetBild2Date sets the "Bild2Date" field.
func (mu *MitarbeiterUpdate) SetBild2Date(t time.Time) *MitarbeiterUpdate {
	mu.mutation.SetBild2Date(t)
	return mu
}

// SetNillableBild2Date sets the "Bild2Date" field if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillableBild2Date(t *time.Time) *MitarbeiterUpdate {
	if t != nil {
		mu.SetBild2Date(*t)
	}
	return mu
}

// ClearBild2Date clears the value of the "Bild2Date" field.
func (mu *MitarbeiterUpdate) ClearBild2Date() *MitarbeiterUpdate {
	mu.mutation.ClearBild2Date()
	return mu
}

// SetBild3Date sets the "Bild3Date" field.
func (mu *MitarbeiterUpdate) SetBild3Date(t time.Time) *MitarbeiterUpdate {
	mu.mutation.SetBild3Date(t)
	return mu
}

// SetNillableBild3Date sets the "Bild3Date" field if the given value is not nil.
func (mu *MitarbeiterUpdate) SetNillableBild3Date(t *time.Time) *MitarbeiterUpdate {
	if t != nil {
		mu.SetBild3Date(*t)
	}
	return mu
}

// ClearBild3Date clears the value of the "Bild3Date" field.
func (mu *MitarbeiterUpdate) ClearBild3Date() *MitarbeiterUpdate {
	mu.mutation.ClearBild3Date()
	return mu
}

// Mutation returns the MitarbeiterMutation object of the builder.
func (mu *MitarbeiterUpdate) Mutation() *MitarbeiterMutation {
	return mu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MitarbeiterUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MitarbeiterUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MitarbeiterUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MitarbeiterUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MitarbeiterUpdate) check() error {
	if v, ok := mu.mutation.Name(); ok {
		if err := mitarbeiter.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`ent: validator failed for field "Mitarbeiter.Name": %w`, err)}
		}
	}
	return nil
}

func (mu *MitarbeiterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(mitarbeiter.Table, mitarbeiter.Columns, sqlgraph.NewFieldSpec(mitarbeiter.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.SetField(mitarbeiter.FieldName, field.TypeString, value)
	}
	if value, ok := mu.mutation.Short(); ok {
		_spec.SetField(mitarbeiter.FieldShort, field.TypeString, value)
	}
	if mu.mutation.ShortCleared() {
		_spec.ClearField(mitarbeiter.FieldShort, field.TypeString)
	}
	if value, ok := mu.mutation.Gruppenwahl(); ok {
		_spec.SetField(mitarbeiter.FieldGruppenwahl, field.TypeString, value)
	}
	if mu.mutation.GruppenwahlCleared() {
		_spec.ClearField(mitarbeiter.FieldGruppenwahl, field.TypeString)
	}
	if value, ok := mu.mutation.InternTelefon1(); ok {
		_spec.SetField(mitarbeiter.FieldInternTelefon1, field.TypeString, value)
	}
	if mu.mutation.InternTelefon1Cleared() {
		_spec.ClearField(mitarbeiter.FieldInternTelefon1, field.TypeString)
	}
	if value, ok := mu.mutation.InternTelefon2(); ok {
		_spec.SetField(mitarbeiter.FieldInternTelefon2, field.TypeString, value)
	}
	if mu.mutation.InternTelefon2Cleared() {
		_spec.ClearField(mitarbeiter.FieldInternTelefon2, field.TypeString)
	}
	if value, ok := mu.mutation.FestnetzPrivat(); ok {
		_spec.SetField(mitarbeiter.FieldFestnetzPrivat, field.TypeString, value)
	}
	if mu.mutation.FestnetzPrivatCleared() {
		_spec.ClearField(mitarbeiter.FieldFestnetzPrivat, field.TypeString)
	}
	if value, ok := mu.mutation.FestnetzAlternativ(); ok {
		_spec.SetField(mitarbeiter.FieldFestnetzAlternativ, field.TypeString, value)
	}
	if mu.mutation.FestnetzAlternativCleared() {
		_spec.ClearField(mitarbeiter.FieldFestnetzAlternativ, field.TypeString)
	}
	if value, ok := mu.mutation.HomeOffice(); ok {
		_spec.SetField(mitarbeiter.FieldHomeOffice, field.TypeString, value)
	}
	if mu.mutation.HomeOfficeCleared() {
		_spec.ClearField(mitarbeiter.FieldHomeOffice, field.TypeString)
	}
	if value, ok := mu.mutation.MobilBusiness(); ok {
		_spec.SetField(mitarbeiter.FieldMobilBusiness, field.TypeString, value)
	}
	if mu.mutation.MobilBusinessCleared() {
		_spec.ClearField(mitarbeiter.FieldMobilBusiness, field.TypeString)
	}
	if value, ok := mu.mutation.MobilPrivat(); ok {
		_spec.SetField(mitarbeiter.FieldMobilPrivat, field.TypeString, value)
	}
	if mu.mutation.MobilPrivatCleared() {
		_spec.ClearField(mitarbeiter.FieldMobilPrivat, field.TypeString)
	}
	if value, ok := mu.mutation.Email(); ok {
		_spec.SetField(mitarbeiter.FieldEmail, field.TypeString, value)
	}
	if mu.mutation.EmailCleared() {
		_spec.ClearField(mitarbeiter.FieldEmail, field.TypeString)
	}
	if value, ok := mu.mutation.Azubi(); ok {
		_spec.SetField(mitarbeiter.FieldAzubi, field.TypeBool, value)
	}
	if value, ok := mu.mutation.Geburtstag(); ok {
		_spec.SetField(mitarbeiter.FieldGeburtstag, field.TypeTime, value)
	}
	if mu.mutation.GeburtstagCleared() {
		_spec.ClearField(mitarbeiter.FieldGeburtstag, field.TypeTime)
	}
	if value, ok := mu.mutation.Paypal(); ok {
		_spec.SetField(mitarbeiter.FieldPaypal, field.TypeBool, value)
	}
	if value, ok := mu.mutation.Abonniert(); ok {
		_spec.SetField(mitarbeiter.FieldAbonniert, field.TypeBool, value)
	}
	if value, ok := mu.mutation.Geld(); ok {
		_spec.SetField(mitarbeiter.FieldGeld, field.TypeString, value)
	}
	if mu.mutation.GeldCleared() {
		_spec.ClearField(mitarbeiter.FieldGeld, field.TypeString)
	}
	if value, ok := mu.mutation.Pfand(); ok {
		_spec.SetField(mitarbeiter.FieldPfand, field.TypeString, value)
	}
	if mu.mutation.PfandCleared() {
		_spec.ClearField(mitarbeiter.FieldPfand, field.TypeString)
	}
	if value, ok := mu.mutation.Dinge(); ok {
		_spec.SetField(mitarbeiter.FieldDinge, field.TypeString, value)
	}
	if mu.mutation.DingeCleared() {
		_spec.ClearField(mitarbeiter.FieldDinge, field.TypeString)
	}
	if value, ok := mu.mutation.Abgeschickt(); ok {
		_spec.SetField(mitarbeiter.FieldAbgeschickt, field.TypeTime, value)
	}
	if mu.mutation.AbgeschicktCleared() {
		_spec.ClearField(mitarbeiter.FieldAbgeschickt, field.TypeTime)
	}
	if value, ok := mu.mutation.Bild1(); ok {
		_spec.SetField(mitarbeiter.FieldBild1, field.TypeString, value)
	}
	if mu.mutation.Bild1Cleared() {
		_spec.ClearField(mitarbeiter.FieldBild1, field.TypeString)
	}
	if value, ok := mu.mutation.Bild2(); ok {
		_spec.SetField(mitarbeiter.FieldBild2, field.TypeString, value)
	}
	if mu.mutation.Bild2Cleared() {
		_spec.ClearField(mitarbeiter.FieldBild2, field.TypeString)
	}
	if value, ok := mu.mutation.Bild3(); ok {
		_spec.SetField(mitarbeiter.FieldBild3, field.TypeString, value)
	}
	if mu.mutation.Bild3Cleared() {
		_spec.ClearField(mitarbeiter.FieldBild3, field.TypeString)
	}
	if value, ok := mu.mutation.Bild1Date(); ok {
		_spec.SetField(mitarbeiter.FieldBild1Date, field.TypeTime, value)
	}
	if mu.mutation.Bild1DateCleared() {
		_spec.ClearField(mitarbeiter.FieldBild1Date, field.TypeTime)
	}
	if value, ok := mu.mutation.Bild2Date(); ok {
		_spec.SetField(mitarbeiter.FieldBild2Date, field.TypeTime, value)
	}
	if mu.mutation.Bild2DateCleared() {
		_spec.ClearField(mitarbeiter.FieldBild2Date, field.TypeTime)
	}
	if value, ok := mu.mutation.Bild3Date(); ok {
		_spec.SetField(mitarbeiter.FieldBild3Date, field.TypeTime, value)
	}
	if mu.mutation.Bild3DateCleared() {
		_spec.ClearField(mitarbeiter.FieldBild3Date, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mitarbeiter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MitarbeiterUpdateOne is the builder for updating a single Mitarbeiter entity.
type MitarbeiterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MitarbeiterMutation
}

// SetName sets the "Name" field.
func (muo *MitarbeiterUpdateOne) SetName(s string) *MitarbeiterUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillableName(s *string) *MitarbeiterUpdateOne {
	if s != nil {
		muo.SetName(*s)
	}
	return muo
}

// SetShort sets the "Short" field.
func (muo *MitarbeiterUpdateOne) SetShort(s string) *MitarbeiterUpdateOne {
	muo.mutation.SetShort(s)
	return muo
}

// SetNillableShort sets the "Short" field if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillableShort(s *string) *MitarbeiterUpdateOne {
	if s != nil {
		muo.SetShort(*s)
	}
	return muo
}

// ClearShort clears the value of the "Short" field.
func (muo *MitarbeiterUpdateOne) ClearShort() *MitarbeiterUpdateOne {
	muo.mutation.ClearShort()
	return muo
}

// SetGruppenwahl sets the "Gruppenwahl" field.
func (muo *MitarbeiterUpdateOne) SetGruppenwahl(s string) *MitarbeiterUpdateOne {
	muo.mutation.SetGruppenwahl(s)
	return muo
}

// SetNillableGruppenwahl sets the "Gruppenwahl" field if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillableGruppenwahl(s *string) *MitarbeiterUpdateOne {
	if s != nil {
		muo.SetGruppenwahl(*s)
	}
	return muo
}

// ClearGruppenwahl clears the value of the "Gruppenwahl" field.
func (muo *MitarbeiterUpdateOne) ClearGruppenwahl() *MitarbeiterUpdateOne {
	muo.mutation.ClearGruppenwahl()
	return muo
}

// SetInternTelefon1 sets the "InternTelefon1" field.
func (muo *MitarbeiterUpdateOne) SetInternTelefon1(s string) *MitarbeiterUpdateOne {
	muo.mutation.SetInternTelefon1(s)
	return muo
}

// SetNillableInternTelefon1 sets the "InternTelefon1" field if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillableInternTelefon1(s *string) *MitarbeiterUpdateOne {
	if s != nil {
		muo.SetInternTelefon1(*s)
	}
	return muo
}

// ClearInternTelefon1 clears the value of the "InternTelefon1" field.
func (muo *MitarbeiterUpdateOne) ClearInternTelefon1() *MitarbeiterUpdateOne {
	muo.mutation.ClearInternTelefon1()
	return muo
}

// SetInternTelefon2 sets the "InternTelefon2" field.
func (muo *MitarbeiterUpdateOne) SetInternTelefon2(s string) *MitarbeiterUpdateOne {
	muo.mutation.SetInternTelefon2(s)
	return muo
}

// SetNillableInternTelefon2 sets the "InternTelefon2" field if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillableInternTelefon2(s *string) *MitarbeiterUpdateOne {
	if s != nil {
		muo.SetInternTelefon2(*s)
	}
	return muo
}

// ClearInternTelefon2 clears the value of the "InternTelefon2" field.
func (muo *MitarbeiterUpdateOne) ClearInternTelefon2() *MitarbeiterUpdateOne {
	muo.mutation.ClearInternTelefon2()
	return muo
}

// SetFestnetzPrivat sets the "FestnetzPrivat" field.
func (muo *MitarbeiterUpdateOne) SetFestnetzPrivat(s string) *MitarbeiterUpdateOne {
	muo.mutation.SetFestnetzPrivat(s)
	return muo
}

// SetNillableFestnetzPrivat sets the "FestnetzPrivat" field if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillableFestnetzPrivat(s *string) *MitarbeiterUpdateOne {
	if s != nil {
		muo.SetFestnetzPrivat(*s)
	}
	return muo
}

// ClearFestnetzPrivat clears the value of the "FestnetzPrivat" field.
func (muo *MitarbeiterUpdateOne) ClearFestnetzPrivat() *MitarbeiterUpdateOne {
	muo.mutation.ClearFestnetzPrivat()
	return muo
}

// SetFestnetzAlternativ sets the "FestnetzAlternativ" field.
func (muo *MitarbeiterUpdateOne) SetFestnetzAlternativ(s string) *MitarbeiterUpdateOne {
	muo.mutation.SetFestnetzAlternativ(s)
	return muo
}

// SetNillableFestnetzAlternativ sets the "FestnetzAlternativ" field if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillableFestnetzAlternativ(s *string) *MitarbeiterUpdateOne {
	if s != nil {
		muo.SetFestnetzAlternativ(*s)
	}
	return muo
}

// ClearFestnetzAlternativ clears the value of the "FestnetzAlternativ" field.
func (muo *MitarbeiterUpdateOne) ClearFestnetzAlternativ() *MitarbeiterUpdateOne {
	muo.mutation.ClearFestnetzAlternativ()
	return muo
}

// SetHomeOffice sets the "HomeOffice" field.
func (muo *MitarbeiterUpdateOne) SetHomeOffice(s string) *MitarbeiterUpdateOne {
	muo.mutation.SetHomeOffice(s)
	return muo
}

// SetNillableHomeOffice sets the "HomeOffice" field if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillableHomeOffice(s *string) *MitarbeiterUpdateOne {
	if s != nil {
		muo.SetHomeOffice(*s)
	}
	return muo
}

// ClearHomeOffice clears the value of the "HomeOffice" field.
func (muo *MitarbeiterUpdateOne) ClearHomeOffice() *MitarbeiterUpdateOne {
	muo.mutation.ClearHomeOffice()
	return muo
}

// SetMobilBusiness sets the "MobilBusiness" field.
func (muo *MitarbeiterUpdateOne) SetMobilBusiness(s string) *MitarbeiterUpdateOne {
	muo.mutation.SetMobilBusiness(s)
	return muo
}

// SetNillableMobilBusiness sets the "MobilBusiness" field if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillableMobilBusiness(s *string) *MitarbeiterUpdateOne {
	if s != nil {
		muo.SetMobilBusiness(*s)
	}
	return muo
}

// ClearMobilBusiness clears the value of the "MobilBusiness" field.
func (muo *MitarbeiterUpdateOne) ClearMobilBusiness() *MitarbeiterUpdateOne {
	muo.mutation.ClearMobilBusiness()
	return muo
}

// SetMobilPrivat sets the "MobilPrivat" field.
func (muo *MitarbeiterUpdateOne) SetMobilPrivat(s string) *MitarbeiterUpdateOne {
	muo.mutation.SetMobilPrivat(s)
	return muo
}

// SetNillableMobilPrivat sets the "MobilPrivat" field if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillableMobilPrivat(s *string) *MitarbeiterUpdateOne {
	if s != nil {
		muo.SetMobilPrivat(*s)
	}
	return muo
}

// ClearMobilPrivat clears the value of the "MobilPrivat" field.
func (muo *MitarbeiterUpdateOne) ClearMobilPrivat() *MitarbeiterUpdateOne {
	muo.mutation.ClearMobilPrivat()
	return muo
}

// SetEmail sets the "Email" field.
func (muo *MitarbeiterUpdateOne) SetEmail(s string) *MitarbeiterUpdateOne {
	muo.mutation.SetEmail(s)
	return muo
}

// SetNillableEmail sets the "Email" field if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillableEmail(s *string) *MitarbeiterUpdateOne {
	if s != nil {
		muo.SetEmail(*s)
	}
	return muo
}

// ClearEmail clears the value of the "Email" field.
func (muo *MitarbeiterUpdateOne) ClearEmail() *MitarbeiterUpdateOne {
	muo.mutation.ClearEmail()
	return muo
}

// SetAzubi sets the "Azubi" field.
func (muo *MitarbeiterUpdateOne) SetAzubi(b bool) *MitarbeiterUpdateOne {
	muo.mutation.SetAzubi(b)
	return muo
}

// SetNillableAzubi sets the "Azubi" field if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillableAzubi(b *bool) *MitarbeiterUpdateOne {
	if b != nil {
		muo.SetAzubi(*b)
	}
	return muo
}

// SetGeburtstag sets the "Geburtstag" field.
func (muo *MitarbeiterUpdateOne) SetGeburtstag(t time.Time) *MitarbeiterUpdateOne {
	muo.mutation.SetGeburtstag(t)
	return muo
}

// SetNillableGeburtstag sets the "Geburtstag" field if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillableGeburtstag(t *time.Time) *MitarbeiterUpdateOne {
	if t != nil {
		muo.SetGeburtstag(*t)
	}
	return muo
}

// ClearGeburtstag clears the value of the "Geburtstag" field.
func (muo *MitarbeiterUpdateOne) ClearGeburtstag() *MitarbeiterUpdateOne {
	muo.mutation.ClearGeburtstag()
	return muo
}

// SetPaypal sets the "Paypal" field.
func (muo *MitarbeiterUpdateOne) SetPaypal(b bool) *MitarbeiterUpdateOne {
	muo.mutation.SetPaypal(b)
	return muo
}

// SetNillablePaypal sets the "Paypal" field if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillablePaypal(b *bool) *MitarbeiterUpdateOne {
	if b != nil {
		muo.SetPaypal(*b)
	}
	return muo
}

// SetAbonniert sets the "Abonniert" field.
func (muo *MitarbeiterUpdateOne) SetAbonniert(b bool) *MitarbeiterUpdateOne {
	muo.mutation.SetAbonniert(b)
	return muo
}

// SetNillableAbonniert sets the "Abonniert" field if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillableAbonniert(b *bool) *MitarbeiterUpdateOne {
	if b != nil {
		muo.SetAbonniert(*b)
	}
	return muo
}

// SetGeld sets the "Geld" field.
func (muo *MitarbeiterUpdateOne) SetGeld(s string) *MitarbeiterUpdateOne {
	muo.mutation.SetGeld(s)
	return muo
}

// SetNillableGeld sets the "Geld" field if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillableGeld(s *string) *MitarbeiterUpdateOne {
	if s != nil {
		muo.SetGeld(*s)
	}
	return muo
}

// ClearGeld clears the value of the "Geld" field.
func (muo *MitarbeiterUpdateOne) ClearGeld() *MitarbeiterUpdateOne {
	muo.mutation.ClearGeld()
	return muo
}

// SetPfand sets the "Pfand" field.
func (muo *MitarbeiterUpdateOne) SetPfand(s string) *MitarbeiterUpdateOne {
	muo.mutation.SetPfand(s)
	return muo
}

// SetNillablePfand sets the "Pfand" field if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillablePfand(s *string) *MitarbeiterUpdateOne {
	if s != nil {
		muo.SetPfand(*s)
	}
	return muo
}

// ClearPfand clears the value of the "Pfand" field.
func (muo *MitarbeiterUpdateOne) ClearPfand() *MitarbeiterUpdateOne {
	muo.mutation.ClearPfand()
	return muo
}

// SetDinge sets the "Dinge" field.
func (muo *MitarbeiterUpdateOne) SetDinge(s string) *MitarbeiterUpdateOne {
	muo.mutation.SetDinge(s)
	return muo
}

// SetNillableDinge sets the "Dinge" field if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillableDinge(s *string) *MitarbeiterUpdateOne {
	if s != nil {
		muo.SetDinge(*s)
	}
	return muo
}

// ClearDinge clears the value of the "Dinge" field.
func (muo *MitarbeiterUpdateOne) ClearDinge() *MitarbeiterUpdateOne {
	muo.mutation.ClearDinge()
	return muo
}

// SetAbgeschickt sets the "Abgeschickt" field.
func (muo *MitarbeiterUpdateOne) SetAbgeschickt(t time.Time) *MitarbeiterUpdateOne {
	muo.mutation.SetAbgeschickt(t)
	return muo
}

// SetNillableAbgeschickt sets the "Abgeschickt" field if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillableAbgeschickt(t *time.Time) *MitarbeiterUpdateOne {
	if t != nil {
		muo.SetAbgeschickt(*t)
	}
	return muo
}

// ClearAbgeschickt clears the value of the "Abgeschickt" field.
func (muo *MitarbeiterUpdateOne) ClearAbgeschickt() *MitarbeiterUpdateOne {
	muo.mutation.ClearAbgeschickt()
	return muo
}

// SetBild1 sets the "Bild1" field.
func (muo *MitarbeiterUpdateOne) SetBild1(s string) *MitarbeiterUpdateOne {
	muo.mutation.SetBild1(s)
	return muo
}

// SetNillableBild1 sets the "Bild1" field if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillableBild1(s *string) *MitarbeiterUpdateOne {
	if s != nil {
		muo.SetBild1(*s)
	}
	return muo
}

// ClearBild1 clears the value of the "Bild1" field.
func (muo *MitarbeiterUpdateOne) ClearBild1() *MitarbeiterUpdateOne {
	muo.mutation.ClearBild1()
	return muo
}

// SetBild2 sets the "Bild2" field.
func (muo *MitarbeiterUpdateOne) SetBild2(s string) *MitarbeiterUpdateOne {
	muo.mutation.SetBild2(s)
	return muo
}

// SetNillableBild2 sets the "Bild2" field if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillableBild2(s *string) *MitarbeiterUpdateOne {
	if s != nil {
		muo.SetBild2(*s)
	}
	return muo
}

// ClearBild2 clears the value of the "Bild2" field.
func (muo *MitarbeiterUpdateOne) ClearBild2() *MitarbeiterUpdateOne {
	muo.mutation.ClearBild2()
	return muo
}

// SetBild3 sets the "Bild3" field.
func (muo *MitarbeiterUpdateOne) SetBild3(s string) *MitarbeiterUpdateOne {
	muo.mutation.SetBild3(s)
	return muo
}

// SetNillableBild3 sets the "Bild3" field if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillableBild3(s *string) *MitarbeiterUpdateOne {
	if s != nil {
		muo.SetBild3(*s)
	}
	return muo
}

// ClearBild3 clears the value of the "Bild3" field.
func (muo *MitarbeiterUpdateOne) ClearBild3() *MitarbeiterUpdateOne {
	muo.mutation.ClearBild3()
	return muo
}

// SetBild1Date sets the "Bild1Date" field.
func (muo *MitarbeiterUpdateOne) SetBild1Date(t time.Time) *MitarbeiterUpdateOne {
	muo.mutation.SetBild1Date(t)
	return muo
}

// SetNillableBild1Date sets the "Bild1Date" field if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillableBild1Date(t *time.Time) *MitarbeiterUpdateOne {
	if t != nil {
		muo.SetBild1Date(*t)
	}
	return muo
}

// ClearBild1Date clears the value of the "Bild1Date" field.
func (muo *MitarbeiterUpdateOne) ClearBild1Date() *MitarbeiterUpdateOne {
	muo.mutation.ClearBild1Date()
	return muo
}

// SetBild2Date sets the "Bild2Date" field.
func (muo *MitarbeiterUpdateOne) SetBild2Date(t time.Time) *MitarbeiterUpdateOne {
	muo.mutation.SetBild2Date(t)
	return muo
}

// SetNillableBild2Date sets the "Bild2Date" field if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillableBild2Date(t *time.Time) *MitarbeiterUpdateOne {
	if t != nil {
		muo.SetBild2Date(*t)
	}
	return muo
}

// ClearBild2Date clears the value of the "Bild2Date" field.
func (muo *MitarbeiterUpdateOne) ClearBild2Date() *MitarbeiterUpdateOne {
	muo.mutation.ClearBild2Date()
	return muo
}

// SetBild3Date sets the "Bild3Date" field.
func (muo *MitarbeiterUpdateOne) SetBild3Date(t time.Time) *MitarbeiterUpdateOne {
	muo.mutation.SetBild3Date(t)
	return muo
}

// SetNillableBild3Date sets the "Bild3Date" field if the given value is not nil.
func (muo *MitarbeiterUpdateOne) SetNillableBild3Date(t *time.Time) *MitarbeiterUpdateOne {
	if t != nil {
		muo.SetBild3Date(*t)
	}
	return muo
}

// ClearBild3Date clears the value of the "Bild3Date" field.
func (muo *MitarbeiterUpdateOne) ClearBild3Date() *MitarbeiterUpdateOne {
	muo.mutation.ClearBild3Date()
	return muo
}

// Mutation returns the MitarbeiterMutation object of the builder.
func (muo *MitarbeiterUpdateOne) Mutation() *MitarbeiterMutation {
	return muo.mutation
}

// Where appends a list predicates to the MitarbeiterUpdate builder.
func (muo *MitarbeiterUpdateOne) Where(ps ...predicate.Mitarbeiter) *MitarbeiterUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MitarbeiterUpdateOne) Select(field string, fields ...string) *MitarbeiterUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Mitarbeiter entity.
func (muo *MitarbeiterUpdateOne) Save(ctx context.Context) (*Mitarbeiter, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MitarbeiterUpdateOne) SaveX(ctx context.Context) *Mitarbeiter {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MitarbeiterUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MitarbeiterUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MitarbeiterUpdateOne) check() error {
	if v, ok := muo.mutation.Name(); ok {
		if err := mitarbeiter.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`ent: validator failed for field "Mitarbeiter.Name": %w`, err)}
		}
	}
	return nil
}

func (muo *MitarbeiterUpdateOne) sqlSave(ctx context.Context) (_node *Mitarbeiter, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(mitarbeiter.Table, mitarbeiter.Columns, sqlgraph.NewFieldSpec(mitarbeiter.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Mitarbeiter.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mitarbeiter.FieldID)
		for _, f := range fields {
			if !mitarbeiter.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mitarbeiter.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.SetField(mitarbeiter.FieldName, field.TypeString, value)
	}
	if value, ok := muo.mutation.Short(); ok {
		_spec.SetField(mitarbeiter.FieldShort, field.TypeString, value)
	}
	if muo.mutation.ShortCleared() {
		_spec.ClearField(mitarbeiter.FieldShort, field.TypeString)
	}
	if value, ok := muo.mutation.Gruppenwahl(); ok {
		_spec.SetField(mitarbeiter.FieldGruppenwahl, field.TypeString, value)
	}
	if muo.mutation.GruppenwahlCleared() {
		_spec.ClearField(mitarbeiter.FieldGruppenwahl, field.TypeString)
	}
	if value, ok := muo.mutation.InternTelefon1(); ok {
		_spec.SetField(mitarbeiter.FieldInternTelefon1, field.TypeString, value)
	}
	if muo.mutation.InternTelefon1Cleared() {
		_spec.ClearField(mitarbeiter.FieldInternTelefon1, field.TypeString)
	}
	if value, ok := muo.mutation.InternTelefon2(); ok {
		_spec.SetField(mitarbeiter.FieldInternTelefon2, field.TypeString, value)
	}
	if muo.mutation.InternTelefon2Cleared() {
		_spec.ClearField(mitarbeiter.FieldInternTelefon2, field.TypeString)
	}
	if value, ok := muo.mutation.FestnetzPrivat(); ok {
		_spec.SetField(mitarbeiter.FieldFestnetzPrivat, field.TypeString, value)
	}
	if muo.mutation.FestnetzPrivatCleared() {
		_spec.ClearField(mitarbeiter.FieldFestnetzPrivat, field.TypeString)
	}
	if value, ok := muo.mutation.FestnetzAlternativ(); ok {
		_spec.SetField(mitarbeiter.FieldFestnetzAlternativ, field.TypeString, value)
	}
	if muo.mutation.FestnetzAlternativCleared() {
		_spec.ClearField(mitarbeiter.FieldFestnetzAlternativ, field.TypeString)
	}
	if value, ok := muo.mutation.HomeOffice(); ok {
		_spec.SetField(mitarbeiter.FieldHomeOffice, field.TypeString, value)
	}
	if muo.mutation.HomeOfficeCleared() {
		_spec.ClearField(mitarbeiter.FieldHomeOffice, field.TypeString)
	}
	if value, ok := muo.mutation.MobilBusiness(); ok {
		_spec.SetField(mitarbeiter.FieldMobilBusiness, field.TypeString, value)
	}
	if muo.mutation.MobilBusinessCleared() {
		_spec.ClearField(mitarbeiter.FieldMobilBusiness, field.TypeString)
	}
	if value, ok := muo.mutation.MobilPrivat(); ok {
		_spec.SetField(mitarbeiter.FieldMobilPrivat, field.TypeString, value)
	}
	if muo.mutation.MobilPrivatCleared() {
		_spec.ClearField(mitarbeiter.FieldMobilPrivat, field.TypeString)
	}
	if value, ok := muo.mutation.Email(); ok {
		_spec.SetField(mitarbeiter.FieldEmail, field.TypeString, value)
	}
	if muo.mutation.EmailCleared() {
		_spec.ClearField(mitarbeiter.FieldEmail, field.TypeString)
	}
	if value, ok := muo.mutation.Azubi(); ok {
		_spec.SetField(mitarbeiter.FieldAzubi, field.TypeBool, value)
	}
	if value, ok := muo.mutation.Geburtstag(); ok {
		_spec.SetField(mitarbeiter.FieldGeburtstag, field.TypeTime, value)
	}
	if muo.mutation.GeburtstagCleared() {
		_spec.ClearField(mitarbeiter.FieldGeburtstag, field.TypeTime)
	}
	if value, ok := muo.mutation.Paypal(); ok {
		_spec.SetField(mitarbeiter.FieldPaypal, field.TypeBool, value)
	}
	if value, ok := muo.mutation.Abonniert(); ok {
		_spec.SetField(mitarbeiter.FieldAbonniert, field.TypeBool, value)
	}
	if value, ok := muo.mutation.Geld(); ok {
		_spec.SetField(mitarbeiter.FieldGeld, field.TypeString, value)
	}
	if muo.mutation.GeldCleared() {
		_spec.ClearField(mitarbeiter.FieldGeld, field.TypeString)
	}
	if value, ok := muo.mutation.Pfand(); ok {
		_spec.SetField(mitarbeiter.FieldPfand, field.TypeString, value)
	}
	if muo.mutation.PfandCleared() {
		_spec.ClearField(mitarbeiter.FieldPfand, field.TypeString)
	}
	if value, ok := muo.mutation.Dinge(); ok {
		_spec.SetField(mitarbeiter.FieldDinge, field.TypeString, value)
	}
	if muo.mutation.DingeCleared() {
		_spec.ClearField(mitarbeiter.FieldDinge, field.TypeString)
	}
	if value, ok := muo.mutation.Abgeschickt(); ok {
		_spec.SetField(mitarbeiter.FieldAbgeschickt, field.TypeTime, value)
	}
	if muo.mutation.AbgeschicktCleared() {
		_spec.ClearField(mitarbeiter.FieldAbgeschickt, field.TypeTime)
	}
	if value, ok := muo.mutation.Bild1(); ok {
		_spec.SetField(mitarbeiter.FieldBild1, field.TypeString, value)
	}
	if muo.mutation.Bild1Cleared() {
		_spec.ClearField(mitarbeiter.FieldBild1, field.TypeString)
	}
	if value, ok := muo.mutation.Bild2(); ok {
		_spec.SetField(mitarbeiter.FieldBild2, field.TypeString, value)
	}
	if muo.mutation.Bild2Cleared() {
		_spec.ClearField(mitarbeiter.FieldBild2, field.TypeString)
	}
	if value, ok := muo.mutation.Bild3(); ok {
		_spec.SetField(mitarbeiter.FieldBild3, field.TypeString, value)
	}
	if muo.mutation.Bild3Cleared() {
		_spec.ClearField(mitarbeiter.FieldBild3, field.TypeString)
	}
	if value, ok := muo.mutation.Bild1Date(); ok {
		_spec.SetField(mitarbeiter.FieldBild1Date, field.TypeTime, value)
	}
	if muo.mutation.Bild1DateCleared() {
		_spec.ClearField(mitarbeiter.FieldBild1Date, field.TypeTime)
	}
	if value, ok := muo.mutation.Bild2Date(); ok {
		_spec.SetField(mitarbeiter.FieldBild2Date, field.TypeTime, value)
	}
	if muo.mutation.Bild2DateCleared() {
		_spec.ClearField(mitarbeiter.FieldBild2Date, field.TypeTime)
	}
	if value, ok := muo.mutation.Bild3Date(); ok {
		_spec.SetField(mitarbeiter.FieldBild3Date, field.TypeTime, value)
	}
	if muo.mutation.Bild3DateCleared() {
		_spec.ClearField(mitarbeiter.FieldBild3Date, field.TypeTime)
	}
	_node = &Mitarbeiter{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mitarbeiter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
