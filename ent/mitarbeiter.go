// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"golang-backend/ent/mitarbeiter"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Mitarbeiter is the model entity for the Mitarbeiter schema.
type Mitarbeiter struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// Short holds the value of the "Short" field.
	Short *string `json:"Short,omitempty"`
	// Gruppenwahl holds the value of the "Gruppenwahl" field.
	Gruppenwahl *string `json:"Gruppenwahl,omitempty"`
	// InternTelefon1 holds the value of the "InternTelefon1" field.
	InternTelefon1 *string `json:"InternTelefon1,omitempty"`
	// InternTelefon2 holds the value of the "InternTelefon2" field.
	InternTelefon2 *string `json:"InternTelefon2,omitempty"`
	// FestnetzPrivat holds the value of the "FestnetzPrivat" field.
	FestnetzPrivat *string `json:"FestnetzPrivat,omitempty"`
	// FestnetzAlternativ holds the value of the "FestnetzAlternativ" field.
	FestnetzAlternativ *string `json:"FestnetzAlternativ,omitempty"`
	// HomeOffice holds the value of the "HomeOffice" field.
	HomeOffice *string `json:"HomeOffice,omitempty"`
	// MobilBusiness holds the value of the "MobilBusiness" field.
	MobilBusiness *string `json:"MobilBusiness,omitempty"`
	// MobilPrivat holds the value of the "MobilPrivat" field.
	MobilPrivat *string `json:"MobilPrivat,omitempty"`
	// Email holds the value of the "Email" field.
	Email *string `json:"Email,omitempty"`
	// Azubi holds the value of the "Azubi" field.
	Azubi bool `json:"Azubi,omitempty"`
	// Geburtstag holds the value of the "Geburtstag" field.
	Geburtstag *time.Time `json:"Geburtstag,omitempty"`
	// Paypal holds the value of the "Paypal" field.
	Paypal bool `json:"Paypal,omitempty"`
	// Abonniert holds the value of the "Abonniert" field.
	Abonniert bool `json:"Abonniert,omitempty"`
	// Geld holds the value of the "Geld" field.
	Geld *string `json:"Geld,omitempty"`
	// Pfand holds the value of the "Pfand" field.
	Pfand *string `json:"Pfand,omitempty"`
	// Dinge holds the value of the "Dinge" field.
	Dinge *string `json:"Dinge,omitempty"`
	// Abgeschickt holds the value of the "Abgeschickt" field.
	Abgeschickt *time.Time `json:"Abgeschickt,omitempty"`
	// Bild1 holds the value of the "Bild1" field.
	Bild1 *string `json:"Bild1,omitempty"`
	// Bild2 holds the value of the "Bild2" field.
	Bild2 *string `json:"Bild2,omitempty"`
	// Bild3 holds the value of the "Bild3" field.
	Bild3 *string `json:"Bild3,omitempty"`
	// Bild1Date holds the value of the "Bild1Date" field.
	Bild1Date *time.Time `json:"Bild1Date,omitempty"`
	// Bild2Date holds the value of the "Bild2Date" field.
	Bild2Date *time.Time `json:"Bild2Date,omitempty"`
	// Bild3Date holds the value of the "Bild3Date" field.
	Bild3Date    *time.Time `json:"Bild3Date,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Mitarbeiter) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case mitarbeiter.FieldAzubi, mitarbeiter.FieldPaypal, mitarbeiter.FieldAbonniert:
			values[i] = new(sql.NullBool)
		case mitarbeiter.FieldID:
			values[i] = new(sql.NullInt64)
		case mitarbeiter.FieldName, mitarbeiter.FieldShort, mitarbeiter.FieldGruppenwahl, mitarbeiter.FieldInternTelefon1, mitarbeiter.FieldInternTelefon2, mitarbeiter.FieldFestnetzPrivat, mitarbeiter.FieldFestnetzAlternativ, mitarbeiter.FieldHomeOffice, mitarbeiter.FieldMobilBusiness, mitarbeiter.FieldMobilPrivat, mitarbeiter.FieldEmail, mitarbeiter.FieldGeld, mitarbeiter.FieldPfand, mitarbeiter.FieldDinge, mitarbeiter.FieldBild1, mitarbeiter.FieldBild2, mitarbeiter.FieldBild3:
			values[i] = new(sql.NullString)
		case mitarbeiter.FieldGeburtstag, mitarbeiter.FieldAbgeschickt, mitarbeiter.FieldBild1Date, mitarbeiter.FieldBild2Date, mitarbeiter.FieldBild3Date:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Mitarbeiter fields.
func (m *Mitarbeiter) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case mitarbeiter.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case mitarbeiter.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				m.Name = value.String
			}
		case mitarbeiter.FieldShort:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Short", values[i])
			} else if value.Valid {
				m.Short = new(string)
				*m.Short = value.String
			}
		case mitarbeiter.FieldGruppenwahl:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Gruppenwahl", values[i])
			} else if value.Valid {
				m.Gruppenwahl = new(string)
				*m.Gruppenwahl = value.String
			}
		case mitarbeiter.FieldInternTelefon1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field InternTelefon1", values[i])
			} else if value.Valid {
				m.InternTelefon1 = new(string)
				*m.InternTelefon1 = value.String
			}
		case mitarbeiter.FieldInternTelefon2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field InternTelefon2", values[i])
			} else if value.Valid {
				m.InternTelefon2 = new(string)
				*m.InternTelefon2 = value.String
			}
		case mitarbeiter.FieldFestnetzPrivat:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field FestnetzPrivat", values[i])
			} else if value.Valid {
				m.FestnetzPrivat = new(string)
				*m.FestnetzPrivat = value.String
			}
		case mitarbeiter.FieldFestnetzAlternativ:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field FestnetzAlternativ", values[i])
			} else if value.Valid {
				m.FestnetzAlternativ = new(string)
				*m.FestnetzAlternativ = value.String
			}
		case mitarbeiter.FieldHomeOffice:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field HomeOffice", values[i])
			} else if value.Valid {
				m.HomeOffice = new(string)
				*m.HomeOffice = value.String
			}
		case mitarbeiter.FieldMobilBusiness:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field MobilBusiness", values[i])
			} else if value.Valid {
				m.MobilBusiness = new(string)
				*m.MobilBusiness = value.String
			}
		case mitarbeiter.FieldMobilPrivat:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field MobilPrivat", values[i])
			} else if value.Valid {
				m.MobilPrivat = new(string)
				*m.MobilPrivat = value.String
			}
		case mitarbeiter.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Email", values[i])
			} else if value.Valid {
				m.Email = new(string)
				*m.Email = value.String
			}
		case mitarbeiter.FieldAzubi:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field Azubi", values[i])
			} else if value.Valid {
				m.Azubi = value.Bool
			}
		case mitarbeiter.FieldGeburtstag:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field Geburtstag", values[i])
			} else if value.Valid {
				m.Geburtstag = new(time.Time)
				*m.Geburtstag = value.Time
			}
		case mitarbeiter.FieldPaypal:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field Paypal", values[i])
			} else if value.Valid {
				m.Paypal = value.Bool
			}
		case mitarbeiter.FieldAbonniert:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field Abonniert", values[i])
			} else if value.Valid {
				m.Abonniert = value.Bool
			}
		case mitarbeiter.FieldGeld:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Geld", values[i])
			} else if value.Valid {
				m.Geld = new(string)
				*m.Geld = value.String
			}
		case mitarbeiter.FieldPfand:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Pfand", values[i])
			} else if value.Valid {
				m.Pfand = new(string)
				*m.Pfand = value.String
			}
		case mitarbeiter.FieldDinge:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Dinge", values[i])
			} else if value.Valid {
				m.Dinge = new(string)
				*m.Dinge = value.String
			}
		case mitarbeiter.FieldAbgeschickt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field Abgeschickt", values[i])
			} else if value.Valid {
				m.Abgeschickt = new(time.Time)
				*m.Abgeschickt = value.Time
			}
		case mitarbeiter.FieldBild1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Bild1", values[i])
			} else if value.Valid {
				m.Bild1 = new(string)
				*m.Bild1 = value.String
			}
		case mitarbeiter.FieldBild2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Bild2", values[i])
			} else if value.Valid {
				m.Bild2 = new(string)
				*m.Bild2 = value.String
			}
		case mitarbeiter.FieldBild3:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Bild3", values[i])
			} else if value.Valid {
				m.Bild3 = new(string)
				*m.Bild3 = value.String
			}
		case mitarbeiter.FieldBild1Date:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field Bild1Date", values[i])
			} else if value.Valid {
				m.Bild1Date = new(time.Time)
				*m.Bild1Date = value.Time
			}
		case mitarbeiter.FieldBild2Date:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field Bild2Date", values[i])
			} else if value.Valid {
				m.Bild2Date = new(time.Time)
				*m.Bild2Date = value.Time
			}
		case mitarbeiter.FieldBild3Date:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field Bild3Date", values[i])
			} else if value.Valid {
				m.Bild3Date = new(time.Time)
				*m.Bild3Date = value.Time
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Mitarbeiter.
// This includes values selected through modifiers, order, etc.
func (m *Mitarbeiter) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// Update returns a builder for updating this Mitarbeiter.
// Note that you need to call Mitarbeiter.Unwrap() before calling this method if this Mitarbeiter
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Mitarbeiter) Update() *MitarbeiterUpdateOne {
	return NewMitarbeiterClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Mitarbeiter entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Mitarbeiter) Unwrap() *Mitarbeiter {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Mitarbeiter is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Mitarbeiter) String() string {
	var builder strings.Builder
	builder.WriteString("Mitarbeiter(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("Name=")
	builder.WriteString(m.Name)
	builder.WriteString(", ")
	if v := m.Short; v != nil {
		builder.WriteString("Short=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := m.Gruppenwahl; v != nil {
		builder.WriteString("Gruppenwahl=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := m.InternTelefon1; v != nil {
		builder.WriteString("InternTelefon1=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := m.InternTelefon2; v != nil {
		builder.WriteString("InternTelefon2=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := m.FestnetzPrivat; v != nil {
		builder.WriteString("FestnetzPrivat=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := m.FestnetzAlternativ; v != nil {
		builder.WriteString("FestnetzAlternativ=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := m.HomeOffice; v != nil {
		builder.WriteString("HomeOffice=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := m.MobilBusiness; v != nil {
		builder.WriteString("MobilBusiness=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := m.MobilPrivat; v != nil {
		builder.WriteString("MobilPrivat=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := m.Email; v != nil {
		builder.WriteString("Email=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("Azubi=")
	builder.WriteString(fmt.Sprintf("%v", m.Azubi))
	builder.WriteString(", ")
	if v := m.Geburtstag; v != nil {
		builder.WriteString("Geburtstag=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("Paypal=")
	builder.WriteString(fmt.Sprintf("%v", m.Paypal))
	builder.WriteString(", ")
	builder.WriteString("Abonniert=")
	builder.WriteString(fmt.Sprintf("%v", m.Abonniert))
	builder.WriteString(", ")
	if v := m.Geld; v != nil {
		builder.WriteString("Geld=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := m.Pfand; v != nil {
		builder.WriteString("Pfand=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := m.Dinge; v != nil {
		builder.WriteString("Dinge=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := m.Abgeschickt; v != nil {
		builder.WriteString("Abgeschickt=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := m.Bild1; v != nil {
		builder.WriteString("Bild1=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := m.Bild2; v != nil {
		builder.WriteString("Bild2=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := m.Bild3; v != nil {
		builder.WriteString("Bild3=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := m.Bild1Date; v != nil {
		builder.WriteString("Bild1Date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := m.Bild2Date; v != nil {
		builder.WriteString("Bild2Date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := m.Bild3Date; v != nil {
		builder.WriteString("Bild3Date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Mitarbeiters is a parsable slice of Mitarbeiter.
type Mitarbeiters []*Mitarbeiter
