// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"golang-backend/ent/artikel"
	"golang-backend/ent/inventur"
	"golang-backend/ent/team"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TeamCreate is the builder for creating a Team entity.
type TeamCreate struct {
	config
	mutation *TeamMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTeam sets the "Team" field.
func (tc *TeamCreate) SetTeam(i int) *TeamCreate {
	tc.mutation.SetTeam(i)
	return tc
}

// SetMitarbeiter sets the "Mitarbeiter" field.
func (tc *TeamCreate) SetMitarbeiter(s string) *TeamCreate {
	tc.mutation.SetMitarbeiter(s)
	return tc
}

// SetFarbe sets the "Farbe" field.
func (tc *TeamCreate) SetFarbe(s string) *TeamCreate {
	tc.mutation.SetFarbe(s)
	return tc
}

// SetOrt sets the "Ort" field.
func (tc *TeamCreate) SetOrt(s string) *TeamCreate {
	tc.mutation.SetOrt(s)
	return tc
}

// AddArtikelIDs adds the "artikel" edge to the Artikel entity by IDs.
func (tc *TeamCreate) AddArtikelIDs(ids ...int) *TeamCreate {
	tc.mutation.AddArtikelIDs(ids...)
	return tc
}

// AddArtikel adds the "artikel" edges to the Artikel entity.
func (tc *TeamCreate) AddArtikel(a ...*Artikel) *TeamCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tc.AddArtikelIDs(ids...)
}

// SetJahrID sets the "Jahr" edge to the Inventur entity by ID.
func (tc *TeamCreate) SetJahrID(id int) *TeamCreate {
	tc.mutation.SetJahrID(id)
	return tc
}

// SetNillableJahrID sets the "Jahr" edge to the Inventur entity by ID if the given value is not nil.
func (tc *TeamCreate) SetNillableJahrID(id *int) *TeamCreate {
	if id != nil {
		tc = tc.SetJahrID(*id)
	}
	return tc
}

// SetJahr sets the "Jahr" edge to the Inventur entity.
func (tc *TeamCreate) SetJahr(i *Inventur) *TeamCreate {
	return tc.SetJahrID(i.ID)
}

// Mutation returns the TeamMutation object of the builder.
func (tc *TeamCreate) Mutation() *TeamMutation {
	return tc.mutation
}

// Save creates the Team in the database.
func (tc *TeamCreate) Save(ctx context.Context) (*Team, error) {
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TeamCreate) SaveX(ctx context.Context) *Team {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TeamCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TeamCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TeamCreate) check() error {
	if _, ok := tc.mutation.Team(); !ok {
		return &ValidationError{Name: "Team", err: errors.New(`ent: missing required field "Team.Team"`)}
	}
	if _, ok := tc.mutation.Mitarbeiter(); !ok {
		return &ValidationError{Name: "Mitarbeiter", err: errors.New(`ent: missing required field "Team.Mitarbeiter"`)}
	}
	if _, ok := tc.mutation.Farbe(); !ok {
		return &ValidationError{Name: "Farbe", err: errors.New(`ent: missing required field "Team.Farbe"`)}
	}
	if _, ok := tc.mutation.Ort(); !ok {
		return &ValidationError{Name: "Ort", err: errors.New(`ent: missing required field "Team.Ort"`)}
	}
	return nil
}

func (tc *TeamCreate) sqlSave(ctx context.Context) (*Team, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TeamCreate) createSpec() (*Team, *sqlgraph.CreateSpec) {
	var (
		_node = &Team{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(team.Table, sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt))
	)
	_spec.OnConflict = tc.conflict
	if value, ok := tc.mutation.Team(); ok {
		_spec.SetField(team.FieldTeam, field.TypeInt, value)
		_node.Team = value
	}
	if value, ok := tc.mutation.Mitarbeiter(); ok {
		_spec.SetField(team.FieldMitarbeiter, field.TypeString, value)
		_node.Mitarbeiter = value
	}
	if value, ok := tc.mutation.Farbe(); ok {
		_spec.SetField(team.FieldFarbe, field.TypeString, value)
		_node.Farbe = value
	}
	if value, ok := tc.mutation.Ort(); ok {
		_spec.SetField(team.FieldOrt, field.TypeString, value)
		_node.Ort = value
	}
	if nodes := tc.mutation.ArtikelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.ArtikelTable,
			Columns: []string{team.ArtikelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artikel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.JahrIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   team.JahrTable,
			Columns: []string{team.JahrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventur.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.inventur_teams = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Team.Create().
//		SetTeam(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TeamUpsert) {
//			SetTeam(v+v).
//		}).
//		Exec(ctx)
func (tc *TeamCreate) OnConflict(opts ...sql.ConflictOption) *TeamUpsertOne {
	tc.conflict = opts
	return &TeamUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Team.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TeamCreate) OnConflictColumns(columns ...string) *TeamUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TeamUpsertOne{
		create: tc,
	}
}

type (
	// TeamUpsertOne is the builder for "upsert"-ing
	//  one Team node.
	TeamUpsertOne struct {
		create *TeamCreate
	}

	// TeamUpsert is the "OnConflict" setter.
	TeamUpsert struct {
		*sql.UpdateSet
	}
)

// SetTeam sets the "Team" field.
func (u *TeamUpsert) SetTeam(v int) *TeamUpsert {
	u.Set(team.FieldTeam, v)
	return u
}

// UpdateTeam sets the "Team" field to the value that was provided on create.
func (u *TeamUpsert) UpdateTeam() *TeamUpsert {
	u.SetExcluded(team.FieldTeam)
	return u
}

// AddTeam adds v to the "Team" field.
func (u *TeamUpsert) AddTeam(v int) *TeamUpsert {
	u.Add(team.FieldTeam, v)
	return u
}

// SetMitarbeiter sets the "Mitarbeiter" field.
func (u *TeamUpsert) SetMitarbeiter(v string) *TeamUpsert {
	u.Set(team.FieldMitarbeiter, v)
	return u
}

// UpdateMitarbeiter sets the "Mitarbeiter" field to the value that was provided on create.
func (u *TeamUpsert) UpdateMitarbeiter() *TeamUpsert {
	u.SetExcluded(team.FieldMitarbeiter)
	return u
}

// SetFarbe sets the "Farbe" field.
func (u *TeamUpsert) SetFarbe(v string) *TeamUpsert {
	u.Set(team.FieldFarbe, v)
	return u
}

// UpdateFarbe sets the "Farbe" field to the value that was provided on create.
func (u *TeamUpsert) UpdateFarbe() *TeamUpsert {
	u.SetExcluded(team.FieldFarbe)
	return u
}

// SetOrt sets the "Ort" field.
func (u *TeamUpsert) SetOrt(v string) *TeamUpsert {
	u.Set(team.FieldOrt, v)
	return u
}

// UpdateOrt sets the "Ort" field to the value that was provided on create.
func (u *TeamUpsert) UpdateOrt() *TeamUpsert {
	u.SetExcluded(team.FieldOrt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Team.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TeamUpsertOne) UpdateNewValues() *TeamUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Team.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TeamUpsertOne) Ignore() *TeamUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TeamUpsertOne) DoNothing() *TeamUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TeamCreate.OnConflict
// documentation for more info.
func (u *TeamUpsertOne) Update(set func(*TeamUpsert)) *TeamUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TeamUpsert{UpdateSet: update})
	}))
	return u
}

// SetTeam sets the "Team" field.
func (u *TeamUpsertOne) SetTeam(v int) *TeamUpsertOne {
	return u.Update(func(s *TeamUpsert) {
		s.SetTeam(v)
	})
}

// AddTeam adds v to the "Team" field.
func (u *TeamUpsertOne) AddTeam(v int) *TeamUpsertOne {
	return u.Update(func(s *TeamUpsert) {
		s.AddTeam(v)
	})
}

// UpdateTeam sets the "Team" field to the value that was provided on create.
func (u *TeamUpsertOne) UpdateTeam() *TeamUpsertOne {
	return u.Update(func(s *TeamUpsert) {
		s.UpdateTeam()
	})
}

// SetMitarbeiter sets the "Mitarbeiter" field.
func (u *TeamUpsertOne) SetMitarbeiter(v string) *TeamUpsertOne {
	return u.Update(func(s *TeamUpsert) {
		s.SetMitarbeiter(v)
	})
}

// UpdateMitarbeiter sets the "Mitarbeiter" field to the value that was provided on create.
func (u *TeamUpsertOne) UpdateMitarbeiter() *TeamUpsertOne {
	return u.Update(func(s *TeamUpsert) {
		s.UpdateMitarbeiter()
	})
}

// SetFarbe sets the "Farbe" field.
func (u *TeamUpsertOne) SetFarbe(v string) *TeamUpsertOne {
	return u.Update(func(s *TeamUpsert) {
		s.SetFarbe(v)
	})
}

// UpdateFarbe sets the "Farbe" field to the value that was provided on create.
func (u *TeamUpsertOne) UpdateFarbe() *TeamUpsertOne {
	return u.Update(func(s *TeamUpsert) {
		s.UpdateFarbe()
	})
}

// SetOrt sets the "Ort" field.
func (u *TeamUpsertOne) SetOrt(v string) *TeamUpsertOne {
	return u.Update(func(s *TeamUpsert) {
		s.SetOrt(v)
	})
}

// UpdateOrt sets the "Ort" field to the value that was provided on create.
func (u *TeamUpsertOne) UpdateOrt() *TeamUpsertOne {
	return u.Update(func(s *TeamUpsert) {
		s.UpdateOrt()
	})
}

// Exec executes the query.
func (u *TeamUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TeamCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TeamUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TeamUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TeamUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TeamCreateBulk is the builder for creating many Team entities in bulk.
type TeamCreateBulk struct {
	config
	err      error
	builders []*TeamCreate
	conflict []sql.ConflictOption
}

// Save creates the Team entities in the database.
func (tcb *TeamCreateBulk) Save(ctx context.Context) ([]*Team, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Team, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TeamMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TeamCreateBulk) SaveX(ctx context.Context) []*Team {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TeamCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TeamCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Team.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TeamUpsert) {
//			SetTeam(v+v).
//		}).
//		Exec(ctx)
func (tcb *TeamCreateBulk) OnConflict(opts ...sql.ConflictOption) *TeamUpsertBulk {
	tcb.conflict = opts
	return &TeamUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Team.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TeamCreateBulk) OnConflictColumns(columns ...string) *TeamUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TeamUpsertBulk{
		create: tcb,
	}
}

// TeamUpsertBulk is the builder for "upsert"-ing
// a bulk of Team nodes.
type TeamUpsertBulk struct {
	create *TeamCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Team.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TeamUpsertBulk) UpdateNewValues() *TeamUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Team.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TeamUpsertBulk) Ignore() *TeamUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TeamUpsertBulk) DoNothing() *TeamUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TeamCreateBulk.OnConflict
// documentation for more info.
func (u *TeamUpsertBulk) Update(set func(*TeamUpsert)) *TeamUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TeamUpsert{UpdateSet: update})
	}))
	return u
}

// SetTeam sets the "Team" field.
func (u *TeamUpsertBulk) SetTeam(v int) *TeamUpsertBulk {
	return u.Update(func(s *TeamUpsert) {
		s.SetTeam(v)
	})
}

// AddTeam adds v to the "Team" field.
func (u *TeamUpsertBulk) AddTeam(v int) *TeamUpsertBulk {
	return u.Update(func(s *TeamUpsert) {
		s.AddTeam(v)
	})
}

// UpdateTeam sets the "Team" field to the value that was provided on create.
func (u *TeamUpsertBulk) UpdateTeam() *TeamUpsertBulk {
	return u.Update(func(s *TeamUpsert) {
		s.UpdateTeam()
	})
}

// SetMitarbeiter sets the "Mitarbeiter" field.
func (u *TeamUpsertBulk) SetMitarbeiter(v string) *TeamUpsertBulk {
	return u.Update(func(s *TeamUpsert) {
		s.SetMitarbeiter(v)
	})
}

// UpdateMitarbeiter sets the "Mitarbeiter" field to the value that was provided on create.
func (u *TeamUpsertBulk) UpdateMitarbeiter() *TeamUpsertBulk {
	return u.Update(func(s *TeamUpsert) {
		s.UpdateMitarbeiter()
	})
}

// SetFarbe sets the "Farbe" field.
func (u *TeamUpsertBulk) SetFarbe(v string) *TeamUpsertBulk {
	return u.Update(func(s *TeamUpsert) {
		s.SetFarbe(v)
	})
}

// UpdateFarbe sets the "Farbe" field to the value that was provided on create.
func (u *TeamUpsertBulk) UpdateFarbe() *TeamUpsertBulk {
	return u.Update(func(s *TeamUpsert) {
		s.UpdateFarbe()
	})
}

// SetOrt sets the "Ort" field.
func (u *TeamUpsertBulk) SetOrt(v string) *TeamUpsertBulk {
	return u.Update(func(s *TeamUpsert) {
		s.SetOrt(v)
	})
}

// UpdateOrt sets the "Ort" field to the value that was provided on create.
func (u *TeamUpsertBulk) UpdateOrt() *TeamUpsertBulk {
	return u.Update(func(s *TeamUpsert) {
		s.UpdateOrt()
	})
}

// Exec executes the query.
func (u *TeamUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TeamCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TeamCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TeamUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
