// Code generated by ent, DO NOT EDIT.

package inventur

import (
	"golang-backend/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Inventur {
	return predicate.Inventur(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Inventur {
	return predicate.Inventur(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Inventur {
	return predicate.Inventur(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Inventur {
	return predicate.Inventur(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Inventur {
	return predicate.Inventur(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Inventur {
	return predicate.Inventur(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Inventur {
	return predicate.Inventur(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Inventur {
	return predicate.Inventur(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Inventur {
	return predicate.Inventur(sql.FieldLTE(FieldID, id))
}

// Jahr applies equality check predicate on the "Jahr" field. It's identical to JahrEQ.
func Jahr(v int) predicate.Inventur {
	return predicate.Inventur(sql.FieldEQ(FieldJahr, v))
}

// JahrEQ applies the EQ predicate on the "Jahr" field.
func JahrEQ(v int) predicate.Inventur {
	return predicate.Inventur(sql.FieldEQ(FieldJahr, v))
}

// JahrNEQ applies the NEQ predicate on the "Jahr" field.
func JahrNEQ(v int) predicate.Inventur {
	return predicate.Inventur(sql.FieldNEQ(FieldJahr, v))
}

// JahrIn applies the In predicate on the "Jahr" field.
func JahrIn(vs ...int) predicate.Inventur {
	return predicate.Inventur(sql.FieldIn(FieldJahr, vs...))
}

// JahrNotIn applies the NotIn predicate on the "Jahr" field.
func JahrNotIn(vs ...int) predicate.Inventur {
	return predicate.Inventur(sql.FieldNotIn(FieldJahr, vs...))
}

// JahrGT applies the GT predicate on the "Jahr" field.
func JahrGT(v int) predicate.Inventur {
	return predicate.Inventur(sql.FieldGT(FieldJahr, v))
}

// JahrGTE applies the GTE predicate on the "Jahr" field.
func JahrGTE(v int) predicate.Inventur {
	return predicate.Inventur(sql.FieldGTE(FieldJahr, v))
}

// JahrLT applies the LT predicate on the "Jahr" field.
func JahrLT(v int) predicate.Inventur {
	return predicate.Inventur(sql.FieldLT(FieldJahr, v))
}

// JahrLTE applies the LTE predicate on the "Jahr" field.
func JahrLTE(v int) predicate.Inventur {
	return predicate.Inventur(sql.FieldLTE(FieldJahr, v))
}

// HasTeams applies the HasEdge predicate on the "Teams" edge.
func HasTeams() predicate.Inventur {
	return predicate.Inventur(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TeamsTable, TeamsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeamsWith applies the HasEdge predicate on the "Teams" edge with a given conditions (other predicates).
func HasTeamsWith(preds ...predicate.Team) predicate.Inventur {
	return predicate.Inventur(func(s *sql.Selector) {
		step := newTeamsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Inventur) predicate.Inventur {
	return predicate.Inventur(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Inventur) predicate.Inventur {
	return predicate.Inventur(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Inventur) predicate.Inventur {
	return predicate.Inventur(sql.NotPredicates(p))
}
