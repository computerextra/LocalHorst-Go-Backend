// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"golang-backend/ent/ansprechpartner"
	"golang-backend/ent/lieferant"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AnsprechpartnerCreate is the builder for creating a Ansprechpartner entity.
type AnsprechpartnerCreate struct {
	config
	mutation *AnsprechpartnerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "Name" field.
func (ac *AnsprechpartnerCreate) SetName(s string) *AnsprechpartnerCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetTelefon sets the "Telefon" field.
func (ac *AnsprechpartnerCreate) SetTelefon(s string) *AnsprechpartnerCreate {
	ac.mutation.SetTelefon(s)
	return ac
}

// SetNillableTelefon sets the "Telefon" field if the given value is not nil.
func (ac *AnsprechpartnerCreate) SetNillableTelefon(s *string) *AnsprechpartnerCreate {
	if s != nil {
		ac.SetTelefon(*s)
	}
	return ac
}

// SetMobil sets the "Mobil" field.
func (ac *AnsprechpartnerCreate) SetMobil(s string) *AnsprechpartnerCreate {
	ac.mutation.SetMobil(s)
	return ac
}

// SetNillableMobil sets the "Mobil" field if the given value is not nil.
func (ac *AnsprechpartnerCreate) SetNillableMobil(s *string) *AnsprechpartnerCreate {
	if s != nil {
		ac.SetMobil(*s)
	}
	return ac
}

// SetMail sets the "Mail" field.
func (ac *AnsprechpartnerCreate) SetMail(s string) *AnsprechpartnerCreate {
	ac.mutation.SetMail(s)
	return ac
}

// SetNillableMail sets the "Mail" field if the given value is not nil.
func (ac *AnsprechpartnerCreate) SetNillableMail(s *string) *AnsprechpartnerCreate {
	if s != nil {
		ac.SetMail(*s)
	}
	return ac
}

// SetLieferantID sets the "Lieferant" edge to the Lieferant entity by ID.
func (ac *AnsprechpartnerCreate) SetLieferantID(id int) *AnsprechpartnerCreate {
	ac.mutation.SetLieferantID(id)
	return ac
}

// SetNillableLieferantID sets the "Lieferant" edge to the Lieferant entity by ID if the given value is not nil.
func (ac *AnsprechpartnerCreate) SetNillableLieferantID(id *int) *AnsprechpartnerCreate {
	if id != nil {
		ac = ac.SetLieferantID(*id)
	}
	return ac
}

// SetLieferant sets the "Lieferant" edge to the Lieferant entity.
func (ac *AnsprechpartnerCreate) SetLieferant(l *Lieferant) *AnsprechpartnerCreate {
	return ac.SetLieferantID(l.ID)
}

// Mutation returns the AnsprechpartnerMutation object of the builder.
func (ac *AnsprechpartnerCreate) Mutation() *AnsprechpartnerMutation {
	return ac.mutation
}

// Save creates the Ansprechpartner in the database.
func (ac *AnsprechpartnerCreate) Save(ctx context.Context) (*Ansprechpartner, error) {
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AnsprechpartnerCreate) SaveX(ctx context.Context) *Ansprechpartner {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AnsprechpartnerCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AnsprechpartnerCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AnsprechpartnerCreate) check() error {
	if _, ok := ac.mutation.Name(); !ok {
		return &ValidationError{Name: "Name", err: errors.New(`ent: missing required field "Ansprechpartner.Name"`)}
	}
	if v, ok := ac.mutation.Name(); ok {
		if err := ansprechpartner.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`ent: validator failed for field "Ansprechpartner.Name": %w`, err)}
		}
	}
	return nil
}

func (ac *AnsprechpartnerCreate) sqlSave(ctx context.Context) (*Ansprechpartner, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AnsprechpartnerCreate) createSpec() (*Ansprechpartner, *sqlgraph.CreateSpec) {
	var (
		_node = &Ansprechpartner{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(ansprechpartner.Table, sqlgraph.NewFieldSpec(ansprechpartner.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ac.conflict
	if value, ok := ac.mutation.Name(); ok {
		_spec.SetField(ansprechpartner.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ac.mutation.Telefon(); ok {
		_spec.SetField(ansprechpartner.FieldTelefon, field.TypeString, value)
		_node.Telefon = &value
	}
	if value, ok := ac.mutation.Mobil(); ok {
		_spec.SetField(ansprechpartner.FieldMobil, field.TypeString, value)
		_node.Mobil = &value
	}
	if value, ok := ac.mutation.Mail(); ok {
		_spec.SetField(ansprechpartner.FieldMail, field.TypeString, value)
		_node.Mail = &value
	}
	if nodes := ac.mutation.LieferantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ansprechpartner.LieferantTable,
			Columns: []string{ansprechpartner.LieferantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lieferant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.lieferant_ansprechpartner = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Ansprechpartner.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AnsprechpartnerUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (ac *AnsprechpartnerCreate) OnConflict(opts ...sql.ConflictOption) *AnsprechpartnerUpsertOne {
	ac.conflict = opts
	return &AnsprechpartnerUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Ansprechpartner.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ac *AnsprechpartnerCreate) OnConflictColumns(columns ...string) *AnsprechpartnerUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &AnsprechpartnerUpsertOne{
		create: ac,
	}
}

type (
	// AnsprechpartnerUpsertOne is the builder for "upsert"-ing
	//  one Ansprechpartner node.
	AnsprechpartnerUpsertOne struct {
		create *AnsprechpartnerCreate
	}

	// AnsprechpartnerUpsert is the "OnConflict" setter.
	AnsprechpartnerUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "Name" field.
func (u *AnsprechpartnerUpsert) SetName(v string) *AnsprechpartnerUpsert {
	u.Set(ansprechpartner.FieldName, v)
	return u
}

// UpdateName sets the "Name" field to the value that was provided on create.
func (u *AnsprechpartnerUpsert) UpdateName() *AnsprechpartnerUpsert {
	u.SetExcluded(ansprechpartner.FieldName)
	return u
}

// SetTelefon sets the "Telefon" field.
func (u *AnsprechpartnerUpsert) SetTelefon(v string) *AnsprechpartnerUpsert {
	u.Set(ansprechpartner.FieldTelefon, v)
	return u
}

// UpdateTelefon sets the "Telefon" field to the value that was provided on create.
func (u *AnsprechpartnerUpsert) UpdateTelefon() *AnsprechpartnerUpsert {
	u.SetExcluded(ansprechpartner.FieldTelefon)
	return u
}

// ClearTelefon clears the value of the "Telefon" field.
func (u *AnsprechpartnerUpsert) ClearTelefon() *AnsprechpartnerUpsert {
	u.SetNull(ansprechpartner.FieldTelefon)
	return u
}

// SetMobil sets the "Mobil" field.
func (u *AnsprechpartnerUpsert) SetMobil(v string) *AnsprechpartnerUpsert {
	u.Set(ansprechpartner.FieldMobil, v)
	return u
}

// UpdateMobil sets the "Mobil" field to the value that was provided on create.
func (u *AnsprechpartnerUpsert) UpdateMobil() *AnsprechpartnerUpsert {
	u.SetExcluded(ansprechpartner.FieldMobil)
	return u
}

// ClearMobil clears the value of the "Mobil" field.
func (u *AnsprechpartnerUpsert) ClearMobil() *AnsprechpartnerUpsert {
	u.SetNull(ansprechpartner.FieldMobil)
	return u
}

// SetMail sets the "Mail" field.
func (u *AnsprechpartnerUpsert) SetMail(v string) *AnsprechpartnerUpsert {
	u.Set(ansprechpartner.FieldMail, v)
	return u
}

// UpdateMail sets the "Mail" field to the value that was provided on create.
func (u *AnsprechpartnerUpsert) UpdateMail() *AnsprechpartnerUpsert {
	u.SetExcluded(ansprechpartner.FieldMail)
	return u
}

// ClearMail clears the value of the "Mail" field.
func (u *AnsprechpartnerUpsert) ClearMail() *AnsprechpartnerUpsert {
	u.SetNull(ansprechpartner.FieldMail)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Ansprechpartner.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AnsprechpartnerUpsertOne) UpdateNewValues() *AnsprechpartnerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Ansprechpartner.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AnsprechpartnerUpsertOne) Ignore() *AnsprechpartnerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AnsprechpartnerUpsertOne) DoNothing() *AnsprechpartnerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AnsprechpartnerCreate.OnConflict
// documentation for more info.
func (u *AnsprechpartnerUpsertOne) Update(set func(*AnsprechpartnerUpsert)) *AnsprechpartnerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AnsprechpartnerUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "Name" field.
func (u *AnsprechpartnerUpsertOne) SetName(v string) *AnsprechpartnerUpsertOne {
	return u.Update(func(s *AnsprechpartnerUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "Name" field to the value that was provided on create.
func (u *AnsprechpartnerUpsertOne) UpdateName() *AnsprechpartnerUpsertOne {
	return u.Update(func(s *AnsprechpartnerUpsert) {
		s.UpdateName()
	})
}

// SetTelefon sets the "Telefon" field.
func (u *AnsprechpartnerUpsertOne) SetTelefon(v string) *AnsprechpartnerUpsertOne {
	return u.Update(func(s *AnsprechpartnerUpsert) {
		s.SetTelefon(v)
	})
}

// UpdateTelefon sets the "Telefon" field to the value that was provided on create.
func (u *AnsprechpartnerUpsertOne) UpdateTelefon() *AnsprechpartnerUpsertOne {
	return u.Update(func(s *AnsprechpartnerUpsert) {
		s.UpdateTelefon()
	})
}

// ClearTelefon clears the value of the "Telefon" field.
func (u *AnsprechpartnerUpsertOne) ClearTelefon() *AnsprechpartnerUpsertOne {
	return u.Update(func(s *AnsprechpartnerUpsert) {
		s.ClearTelefon()
	})
}

// SetMobil sets the "Mobil" field.
func (u *AnsprechpartnerUpsertOne) SetMobil(v string) *AnsprechpartnerUpsertOne {
	return u.Update(func(s *AnsprechpartnerUpsert) {
		s.SetMobil(v)
	})
}

// UpdateMobil sets the "Mobil" field to the value that was provided on create.
func (u *AnsprechpartnerUpsertOne) UpdateMobil() *AnsprechpartnerUpsertOne {
	return u.Update(func(s *AnsprechpartnerUpsert) {
		s.UpdateMobil()
	})
}

// ClearMobil clears the value of the "Mobil" field.
func (u *AnsprechpartnerUpsertOne) ClearMobil() *AnsprechpartnerUpsertOne {
	return u.Update(func(s *AnsprechpartnerUpsert) {
		s.ClearMobil()
	})
}

// SetMail sets the "Mail" field.
func (u *AnsprechpartnerUpsertOne) SetMail(v string) *AnsprechpartnerUpsertOne {
	return u.Update(func(s *AnsprechpartnerUpsert) {
		s.SetMail(v)
	})
}

// UpdateMail sets the "Mail" field to the value that was provided on create.
func (u *AnsprechpartnerUpsertOne) UpdateMail() *AnsprechpartnerUpsertOne {
	return u.Update(func(s *AnsprechpartnerUpsert) {
		s.UpdateMail()
	})
}

// ClearMail clears the value of the "Mail" field.
func (u *AnsprechpartnerUpsertOne) ClearMail() *AnsprechpartnerUpsertOne {
	return u.Update(func(s *AnsprechpartnerUpsert) {
		s.ClearMail()
	})
}

// Exec executes the query.
func (u *AnsprechpartnerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AnsprechpartnerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AnsprechpartnerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AnsprechpartnerUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AnsprechpartnerUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AnsprechpartnerCreateBulk is the builder for creating many Ansprechpartner entities in bulk.
type AnsprechpartnerCreateBulk struct {
	config
	err      error
	builders []*AnsprechpartnerCreate
	conflict []sql.ConflictOption
}

// Save creates the Ansprechpartner entities in the database.
func (acb *AnsprechpartnerCreateBulk) Save(ctx context.Context) ([]*Ansprechpartner, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Ansprechpartner, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AnsprechpartnerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AnsprechpartnerCreateBulk) SaveX(ctx context.Context) []*Ansprechpartner {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AnsprechpartnerCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AnsprechpartnerCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Ansprechpartner.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AnsprechpartnerUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (acb *AnsprechpartnerCreateBulk) OnConflict(opts ...sql.ConflictOption) *AnsprechpartnerUpsertBulk {
	acb.conflict = opts
	return &AnsprechpartnerUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Ansprechpartner.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acb *AnsprechpartnerCreateBulk) OnConflictColumns(columns ...string) *AnsprechpartnerUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &AnsprechpartnerUpsertBulk{
		create: acb,
	}
}

// AnsprechpartnerUpsertBulk is the builder for "upsert"-ing
// a bulk of Ansprechpartner nodes.
type AnsprechpartnerUpsertBulk struct {
	create *AnsprechpartnerCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Ansprechpartner.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AnsprechpartnerUpsertBulk) UpdateNewValues() *AnsprechpartnerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Ansprechpartner.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AnsprechpartnerUpsertBulk) Ignore() *AnsprechpartnerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AnsprechpartnerUpsertBulk) DoNothing() *AnsprechpartnerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AnsprechpartnerCreateBulk.OnConflict
// documentation for more info.
func (u *AnsprechpartnerUpsertBulk) Update(set func(*AnsprechpartnerUpsert)) *AnsprechpartnerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AnsprechpartnerUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "Name" field.
func (u *AnsprechpartnerUpsertBulk) SetName(v string) *AnsprechpartnerUpsertBulk {
	return u.Update(func(s *AnsprechpartnerUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "Name" field to the value that was provided on create.
func (u *AnsprechpartnerUpsertBulk) UpdateName() *AnsprechpartnerUpsertBulk {
	return u.Update(func(s *AnsprechpartnerUpsert) {
		s.UpdateName()
	})
}

// SetTelefon sets the "Telefon" field.
func (u *AnsprechpartnerUpsertBulk) SetTelefon(v string) *AnsprechpartnerUpsertBulk {
	return u.Update(func(s *AnsprechpartnerUpsert) {
		s.SetTelefon(v)
	})
}

// UpdateTelefon sets the "Telefon" field to the value that was provided on create.
func (u *AnsprechpartnerUpsertBulk) UpdateTelefon() *AnsprechpartnerUpsertBulk {
	return u.Update(func(s *AnsprechpartnerUpsert) {
		s.UpdateTelefon()
	})
}

// ClearTelefon clears the value of the "Telefon" field.
func (u *AnsprechpartnerUpsertBulk) ClearTelefon() *AnsprechpartnerUpsertBulk {
	return u.Update(func(s *AnsprechpartnerUpsert) {
		s.ClearTelefon()
	})
}

// SetMobil sets the "Mobil" field.
func (u *AnsprechpartnerUpsertBulk) SetMobil(v string) *AnsprechpartnerUpsertBulk {
	return u.Update(func(s *AnsprechpartnerUpsert) {
		s.SetMobil(v)
	})
}

// UpdateMobil sets the "Mobil" field to the value that was provided on create.
func (u *AnsprechpartnerUpsertBulk) UpdateMobil() *AnsprechpartnerUpsertBulk {
	return u.Update(func(s *AnsprechpartnerUpsert) {
		s.UpdateMobil()
	})
}

// ClearMobil clears the value of the "Mobil" field.
func (u *AnsprechpartnerUpsertBulk) ClearMobil() *AnsprechpartnerUpsertBulk {
	return u.Update(func(s *AnsprechpartnerUpsert) {
		s.ClearMobil()
	})
}

// SetMail sets the "Mail" field.
func (u *AnsprechpartnerUpsertBulk) SetMail(v string) *AnsprechpartnerUpsertBulk {
	return u.Update(func(s *AnsprechpartnerUpsert) {
		s.SetMail(v)
	})
}

// UpdateMail sets the "Mail" field to the value that was provided on create.
func (u *AnsprechpartnerUpsertBulk) UpdateMail() *AnsprechpartnerUpsertBulk {
	return u.Update(func(s *AnsprechpartnerUpsert) {
		s.UpdateMail()
	})
}

// ClearMail clears the value of the "Mail" field.
func (u *AnsprechpartnerUpsertBulk) ClearMail() *AnsprechpartnerUpsertBulk {
	return u.Update(func(s *AnsprechpartnerUpsert) {
		s.ClearMail()
	})
}

// Exec executes the query.
func (u *AnsprechpartnerUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AnsprechpartnerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AnsprechpartnerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AnsprechpartnerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
