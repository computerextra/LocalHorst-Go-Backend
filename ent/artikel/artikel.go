// Code generated by ent, DO NOT EDIT.

package artikel

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the artikel type in the database.
	Label = "artikel"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldArtikelnummer holds the string denoting the artikelnummer field in the database.
	FieldArtikelnummer = "artikelnummer"
	// FieldSuchbegriff holds the string denoting the suchbegriff field in the database.
	FieldSuchbegriff = "suchbegriff"
	// FieldAnzahl holds the string denoting the anzahl field in the database.
	FieldAnzahl = "anzahl"
	// EdgeTeam holds the string denoting the team edge name in mutations.
	EdgeTeam = "team"
	// Table holds the table name of the artikel in the database.
	Table = "artikels"
	// TeamTable is the table that holds the team relation/edge.
	TeamTable = "artikels"
	// TeamInverseTable is the table name for the Team entity.
	// It exists in this package in order to avoid circular dependency with the "team" package.
	TeamInverseTable = "teams"
	// TeamColumn is the table column denoting the team relation/edge.
	TeamColumn = "team_artikel"
)

// Columns holds all SQL columns for artikel fields.
var Columns = []string{
	FieldID,
	FieldArtikelnummer,
	FieldSuchbegriff,
	FieldAnzahl,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "artikels"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"team_artikel",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Artikel queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByArtikelnummer orders the results by the Artikelnummer field.
func ByArtikelnummer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArtikelnummer, opts...).ToFunc()
}

// BySuchbegriff orders the results by the Suchbegriff field.
func BySuchbegriff(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSuchbegriff, opts...).ToFunc()
}

// ByAnzahl orders the results by the Anzahl field.
func ByAnzahl(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAnzahl, opts...).ToFunc()
}

// ByTeamField orders the results by team field.
func ByTeamField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTeamStep(), sql.OrderByField(field, opts...))
	}
}
func newTeamStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TeamInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TeamTable, TeamColumn),
	)
}
