// Code generated by ent, DO NOT EDIT.

package artikel

import (
	"golang-backend/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Artikel {
	return predicate.Artikel(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Artikel {
	return predicate.Artikel(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Artikel {
	return predicate.Artikel(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Artikel {
	return predicate.Artikel(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Artikel {
	return predicate.Artikel(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Artikel {
	return predicate.Artikel(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Artikel {
	return predicate.Artikel(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Artikel {
	return predicate.Artikel(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Artikel {
	return predicate.Artikel(sql.FieldLTE(FieldID, id))
}

// Artikelnummer applies equality check predicate on the "Artikelnummer" field. It's identical to ArtikelnummerEQ.
func Artikelnummer(v string) predicate.Artikel {
	return predicate.Artikel(sql.FieldEQ(FieldArtikelnummer, v))
}

// Suchbegriff applies equality check predicate on the "Suchbegriff" field. It's identical to SuchbegriffEQ.
func Suchbegriff(v string) predicate.Artikel {
	return predicate.Artikel(sql.FieldEQ(FieldSuchbegriff, v))
}

// Anzahl applies equality check predicate on the "Anzahl" field. It's identical to AnzahlEQ.
func Anzahl(v int) predicate.Artikel {
	return predicate.Artikel(sql.FieldEQ(FieldAnzahl, v))
}

// ArtikelnummerEQ applies the EQ predicate on the "Artikelnummer" field.
func ArtikelnummerEQ(v string) predicate.Artikel {
	return predicate.Artikel(sql.FieldEQ(FieldArtikelnummer, v))
}

// ArtikelnummerNEQ applies the NEQ predicate on the "Artikelnummer" field.
func ArtikelnummerNEQ(v string) predicate.Artikel {
	return predicate.Artikel(sql.FieldNEQ(FieldArtikelnummer, v))
}

// ArtikelnummerIn applies the In predicate on the "Artikelnummer" field.
func ArtikelnummerIn(vs ...string) predicate.Artikel {
	return predicate.Artikel(sql.FieldIn(FieldArtikelnummer, vs...))
}

// ArtikelnummerNotIn applies the NotIn predicate on the "Artikelnummer" field.
func ArtikelnummerNotIn(vs ...string) predicate.Artikel {
	return predicate.Artikel(sql.FieldNotIn(FieldArtikelnummer, vs...))
}

// ArtikelnummerGT applies the GT predicate on the "Artikelnummer" field.
func ArtikelnummerGT(v string) predicate.Artikel {
	return predicate.Artikel(sql.FieldGT(FieldArtikelnummer, v))
}

// ArtikelnummerGTE applies the GTE predicate on the "Artikelnummer" field.
func ArtikelnummerGTE(v string) predicate.Artikel {
	return predicate.Artikel(sql.FieldGTE(FieldArtikelnummer, v))
}

// ArtikelnummerLT applies the LT predicate on the "Artikelnummer" field.
func ArtikelnummerLT(v string) predicate.Artikel {
	return predicate.Artikel(sql.FieldLT(FieldArtikelnummer, v))
}

// ArtikelnummerLTE applies the LTE predicate on the "Artikelnummer" field.
func ArtikelnummerLTE(v string) predicate.Artikel {
	return predicate.Artikel(sql.FieldLTE(FieldArtikelnummer, v))
}

// ArtikelnummerContains applies the Contains predicate on the "Artikelnummer" field.
func ArtikelnummerContains(v string) predicate.Artikel {
	return predicate.Artikel(sql.FieldContains(FieldArtikelnummer, v))
}

// ArtikelnummerHasPrefix applies the HasPrefix predicate on the "Artikelnummer" field.
func ArtikelnummerHasPrefix(v string) predicate.Artikel {
	return predicate.Artikel(sql.FieldHasPrefix(FieldArtikelnummer, v))
}

// ArtikelnummerHasSuffix applies the HasSuffix predicate on the "Artikelnummer" field.
func ArtikelnummerHasSuffix(v string) predicate.Artikel {
	return predicate.Artikel(sql.FieldHasSuffix(FieldArtikelnummer, v))
}

// ArtikelnummerEqualFold applies the EqualFold predicate on the "Artikelnummer" field.
func ArtikelnummerEqualFold(v string) predicate.Artikel {
	return predicate.Artikel(sql.FieldEqualFold(FieldArtikelnummer, v))
}

// ArtikelnummerContainsFold applies the ContainsFold predicate on the "Artikelnummer" field.
func ArtikelnummerContainsFold(v string) predicate.Artikel {
	return predicate.Artikel(sql.FieldContainsFold(FieldArtikelnummer, v))
}

// SuchbegriffEQ applies the EQ predicate on the "Suchbegriff" field.
func SuchbegriffEQ(v string) predicate.Artikel {
	return predicate.Artikel(sql.FieldEQ(FieldSuchbegriff, v))
}

// SuchbegriffNEQ applies the NEQ predicate on the "Suchbegriff" field.
func SuchbegriffNEQ(v string) predicate.Artikel {
	return predicate.Artikel(sql.FieldNEQ(FieldSuchbegriff, v))
}

// SuchbegriffIn applies the In predicate on the "Suchbegriff" field.
func SuchbegriffIn(vs ...string) predicate.Artikel {
	return predicate.Artikel(sql.FieldIn(FieldSuchbegriff, vs...))
}

// SuchbegriffNotIn applies the NotIn predicate on the "Suchbegriff" field.
func SuchbegriffNotIn(vs ...string) predicate.Artikel {
	return predicate.Artikel(sql.FieldNotIn(FieldSuchbegriff, vs...))
}

// SuchbegriffGT applies the GT predicate on the "Suchbegriff" field.
func SuchbegriffGT(v string) predicate.Artikel {
	return predicate.Artikel(sql.FieldGT(FieldSuchbegriff, v))
}

// SuchbegriffGTE applies the GTE predicate on the "Suchbegriff" field.
func SuchbegriffGTE(v string) predicate.Artikel {
	return predicate.Artikel(sql.FieldGTE(FieldSuchbegriff, v))
}

// SuchbegriffLT applies the LT predicate on the "Suchbegriff" field.
func SuchbegriffLT(v string) predicate.Artikel {
	return predicate.Artikel(sql.FieldLT(FieldSuchbegriff, v))
}

// SuchbegriffLTE applies the LTE predicate on the "Suchbegriff" field.
func SuchbegriffLTE(v string) predicate.Artikel {
	return predicate.Artikel(sql.FieldLTE(FieldSuchbegriff, v))
}

// SuchbegriffContains applies the Contains predicate on the "Suchbegriff" field.
func SuchbegriffContains(v string) predicate.Artikel {
	return predicate.Artikel(sql.FieldContains(FieldSuchbegriff, v))
}

// SuchbegriffHasPrefix applies the HasPrefix predicate on the "Suchbegriff" field.
func SuchbegriffHasPrefix(v string) predicate.Artikel {
	return predicate.Artikel(sql.FieldHasPrefix(FieldSuchbegriff, v))
}

// SuchbegriffHasSuffix applies the HasSuffix predicate on the "Suchbegriff" field.
func SuchbegriffHasSuffix(v string) predicate.Artikel {
	return predicate.Artikel(sql.FieldHasSuffix(FieldSuchbegriff, v))
}

// SuchbegriffEqualFold applies the EqualFold predicate on the "Suchbegriff" field.
func SuchbegriffEqualFold(v string) predicate.Artikel {
	return predicate.Artikel(sql.FieldEqualFold(FieldSuchbegriff, v))
}

// SuchbegriffContainsFold applies the ContainsFold predicate on the "Suchbegriff" field.
func SuchbegriffContainsFold(v string) predicate.Artikel {
	return predicate.Artikel(sql.FieldContainsFold(FieldSuchbegriff, v))
}

// AnzahlEQ applies the EQ predicate on the "Anzahl" field.
func AnzahlEQ(v int) predicate.Artikel {
	return predicate.Artikel(sql.FieldEQ(FieldAnzahl, v))
}

// AnzahlNEQ applies the NEQ predicate on the "Anzahl" field.
func AnzahlNEQ(v int) predicate.Artikel {
	return predicate.Artikel(sql.FieldNEQ(FieldAnzahl, v))
}

// AnzahlIn applies the In predicate on the "Anzahl" field.
func AnzahlIn(vs ...int) predicate.Artikel {
	return predicate.Artikel(sql.FieldIn(FieldAnzahl, vs...))
}

// AnzahlNotIn applies the NotIn predicate on the "Anzahl" field.
func AnzahlNotIn(vs ...int) predicate.Artikel {
	return predicate.Artikel(sql.FieldNotIn(FieldAnzahl, vs...))
}

// AnzahlGT applies the GT predicate on the "Anzahl" field.
func AnzahlGT(v int) predicate.Artikel {
	return predicate.Artikel(sql.FieldGT(FieldAnzahl, v))
}

// AnzahlGTE applies the GTE predicate on the "Anzahl" field.
func AnzahlGTE(v int) predicate.Artikel {
	return predicate.Artikel(sql.FieldGTE(FieldAnzahl, v))
}

// AnzahlLT applies the LT predicate on the "Anzahl" field.
func AnzahlLT(v int) predicate.Artikel {
	return predicate.Artikel(sql.FieldLT(FieldAnzahl, v))
}

// AnzahlLTE applies the LTE predicate on the "Anzahl" field.
func AnzahlLTE(v int) predicate.Artikel {
	return predicate.Artikel(sql.FieldLTE(FieldAnzahl, v))
}

// HasTeam applies the HasEdge predicate on the "team" edge.
func HasTeam() predicate.Artikel {
	return predicate.Artikel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TeamTable, TeamColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeamWith applies the HasEdge predicate on the "team" edge with a given conditions (other predicates).
func HasTeamWith(preds ...predicate.Team) predicate.Artikel {
	return predicate.Artikel(func(s *sql.Selector) {
		step := newTeamStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Artikel) predicate.Artikel {
	return predicate.Artikel(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Artikel) predicate.Artikel {
	return predicate.Artikel(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Artikel) predicate.Artikel {
	return predicate.Artikel(sql.NotPredicates(p))
}
