// Code generated by ent, DO NOT EDIT.

package ansprechpartner

import (
	"golang-backend/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "Name" field. It's identical to NameEQ.
func Name(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldEQ(FieldName, v))
}

// Telefon applies equality check predicate on the "Telefon" field. It's identical to TelefonEQ.
func Telefon(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldEQ(FieldTelefon, v))
}

// Mobil applies equality check predicate on the "Mobil" field. It's identical to MobilEQ.
func Mobil(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldEQ(FieldMobil, v))
}

// Mail applies equality check predicate on the "Mail" field. It's identical to MailEQ.
func Mail(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldEQ(FieldMail, v))
}

// NameEQ applies the EQ predicate on the "Name" field.
func NameEQ(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "Name" field.
func NameNEQ(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "Name" field.
func NameIn(vs ...string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "Name" field.
func NameNotIn(vs ...string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "Name" field.
func NameGT(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "Name" field.
func NameGTE(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "Name" field.
func NameLT(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "Name" field.
func NameLTE(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "Name" field.
func NameContains(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "Name" field.
func NameHasPrefix(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "Name" field.
func NameHasSuffix(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "Name" field.
func NameEqualFold(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "Name" field.
func NameContainsFold(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldContainsFold(FieldName, v))
}

// TelefonEQ applies the EQ predicate on the "Telefon" field.
func TelefonEQ(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldEQ(FieldTelefon, v))
}

// TelefonNEQ applies the NEQ predicate on the "Telefon" field.
func TelefonNEQ(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldNEQ(FieldTelefon, v))
}

// TelefonIn applies the In predicate on the "Telefon" field.
func TelefonIn(vs ...string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldIn(FieldTelefon, vs...))
}

// TelefonNotIn applies the NotIn predicate on the "Telefon" field.
func TelefonNotIn(vs ...string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldNotIn(FieldTelefon, vs...))
}

// TelefonGT applies the GT predicate on the "Telefon" field.
func TelefonGT(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldGT(FieldTelefon, v))
}

// TelefonGTE applies the GTE predicate on the "Telefon" field.
func TelefonGTE(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldGTE(FieldTelefon, v))
}

// TelefonLT applies the LT predicate on the "Telefon" field.
func TelefonLT(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldLT(FieldTelefon, v))
}

// TelefonLTE applies the LTE predicate on the "Telefon" field.
func TelefonLTE(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldLTE(FieldTelefon, v))
}

// TelefonContains applies the Contains predicate on the "Telefon" field.
func TelefonContains(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldContains(FieldTelefon, v))
}

// TelefonHasPrefix applies the HasPrefix predicate on the "Telefon" field.
func TelefonHasPrefix(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldHasPrefix(FieldTelefon, v))
}

// TelefonHasSuffix applies the HasSuffix predicate on the "Telefon" field.
func TelefonHasSuffix(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldHasSuffix(FieldTelefon, v))
}

// TelefonEqualFold applies the EqualFold predicate on the "Telefon" field.
func TelefonEqualFold(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldEqualFold(FieldTelefon, v))
}

// TelefonContainsFold applies the ContainsFold predicate on the "Telefon" field.
func TelefonContainsFold(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldContainsFold(FieldTelefon, v))
}

// MobilEQ applies the EQ predicate on the "Mobil" field.
func MobilEQ(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldEQ(FieldMobil, v))
}

// MobilNEQ applies the NEQ predicate on the "Mobil" field.
func MobilNEQ(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldNEQ(FieldMobil, v))
}

// MobilIn applies the In predicate on the "Mobil" field.
func MobilIn(vs ...string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldIn(FieldMobil, vs...))
}

// MobilNotIn applies the NotIn predicate on the "Mobil" field.
func MobilNotIn(vs ...string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldNotIn(FieldMobil, vs...))
}

// MobilGT applies the GT predicate on the "Mobil" field.
func MobilGT(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldGT(FieldMobil, v))
}

// MobilGTE applies the GTE predicate on the "Mobil" field.
func MobilGTE(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldGTE(FieldMobil, v))
}

// MobilLT applies the LT predicate on the "Mobil" field.
func MobilLT(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldLT(FieldMobil, v))
}

// MobilLTE applies the LTE predicate on the "Mobil" field.
func MobilLTE(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldLTE(FieldMobil, v))
}

// MobilContains applies the Contains predicate on the "Mobil" field.
func MobilContains(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldContains(FieldMobil, v))
}

// MobilHasPrefix applies the HasPrefix predicate on the "Mobil" field.
func MobilHasPrefix(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldHasPrefix(FieldMobil, v))
}

// MobilHasSuffix applies the HasSuffix predicate on the "Mobil" field.
func MobilHasSuffix(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldHasSuffix(FieldMobil, v))
}

// MobilEqualFold applies the EqualFold predicate on the "Mobil" field.
func MobilEqualFold(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldEqualFold(FieldMobil, v))
}

// MobilContainsFold applies the ContainsFold predicate on the "Mobil" field.
func MobilContainsFold(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldContainsFold(FieldMobil, v))
}

// MailEQ applies the EQ predicate on the "Mail" field.
func MailEQ(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldEQ(FieldMail, v))
}

// MailNEQ applies the NEQ predicate on the "Mail" field.
func MailNEQ(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldNEQ(FieldMail, v))
}

// MailIn applies the In predicate on the "Mail" field.
func MailIn(vs ...string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldIn(FieldMail, vs...))
}

// MailNotIn applies the NotIn predicate on the "Mail" field.
func MailNotIn(vs ...string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldNotIn(FieldMail, vs...))
}

// MailGT applies the GT predicate on the "Mail" field.
func MailGT(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldGT(FieldMail, v))
}

// MailGTE applies the GTE predicate on the "Mail" field.
func MailGTE(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldGTE(FieldMail, v))
}

// MailLT applies the LT predicate on the "Mail" field.
func MailLT(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldLT(FieldMail, v))
}

// MailLTE applies the LTE predicate on the "Mail" field.
func MailLTE(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldLTE(FieldMail, v))
}

// MailContains applies the Contains predicate on the "Mail" field.
func MailContains(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldContains(FieldMail, v))
}

// MailHasPrefix applies the HasPrefix predicate on the "Mail" field.
func MailHasPrefix(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldHasPrefix(FieldMail, v))
}

// MailHasSuffix applies the HasSuffix predicate on the "Mail" field.
func MailHasSuffix(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldHasSuffix(FieldMail, v))
}

// MailEqualFold applies the EqualFold predicate on the "Mail" field.
func MailEqualFold(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldEqualFold(FieldMail, v))
}

// MailContainsFold applies the ContainsFold predicate on the "Mail" field.
func MailContainsFold(v string) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.FieldContainsFold(FieldMail, v))
}

// HasLieferant applies the HasEdge predicate on the "Lieferant" edge.
func HasLieferant() predicate.Ansprechpartner {
	return predicate.Ansprechpartner(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LieferantTable, LieferantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLieferantWith applies the HasEdge predicate on the "Lieferant" edge with a given conditions (other predicates).
func HasLieferantWith(preds ...predicate.Lieferant) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(func(s *sql.Selector) {
		step := newLieferantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Ansprechpartner) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Ansprechpartner) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Ansprechpartner) predicate.Ansprechpartner {
	return predicate.Ansprechpartner(sql.NotPredicates(p))
}
