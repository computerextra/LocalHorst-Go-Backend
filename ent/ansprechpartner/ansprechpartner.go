// Code generated by ent, DO NOT EDIT.

package ansprechpartner

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the ansprechpartner type in the database.
	Label = "ansprechpartner"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldTelefon holds the string denoting the telefon field in the database.
	FieldTelefon = "telefon"
	// FieldMobil holds the string denoting the mobil field in the database.
	FieldMobil = "mobil"
	// FieldMail holds the string denoting the mail field in the database.
	FieldMail = "mail"
	// EdgeLieferant holds the string denoting the lieferant edge name in mutations.
	EdgeLieferant = "Lieferant"
	// Table holds the table name of the ansprechpartner in the database.
	Table = "ansprechpartners"
	// LieferantTable is the table that holds the Lieferant relation/edge.
	LieferantTable = "ansprechpartners"
	// LieferantInverseTable is the table name for the Lieferant entity.
	// It exists in this package in order to avoid circular dependency with the "lieferant" package.
	LieferantInverseTable = "lieferants"
	// LieferantColumn is the table column denoting the Lieferant relation/edge.
	LieferantColumn = "lieferant_ansprechpartner"
)

// Columns holds all SQL columns for ansprechpartner fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldTelefon,
	FieldMobil,
	FieldMail,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "ansprechpartners"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"lieferant_ansprechpartner",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "Name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// OrderOption defines the ordering options for the Ansprechpartner queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the Name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByTelefon orders the results by the Telefon field.
func ByTelefon(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTelefon, opts...).ToFunc()
}

// ByMobil orders the results by the Mobil field.
func ByMobil(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMobil, opts...).ToFunc()
}

// ByMail orders the results by the Mail field.
func ByMail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMail, opts...).ToFunc()
}

// ByLieferantField orders the results by Lieferant field.
func ByLieferantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLieferantStep(), sql.OrderByField(field, opts...))
	}
}
func newLieferantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LieferantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, LieferantTable, LieferantColumn),
	)
}
