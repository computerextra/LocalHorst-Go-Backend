// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"golang-backend/ent/ansprechpartner"
	"golang-backend/ent/lieferant"
	"golang-backend/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AnsprechpartnerUpdate is the builder for updating Ansprechpartner entities.
type AnsprechpartnerUpdate struct {
	config
	hooks    []Hook
	mutation *AnsprechpartnerMutation
}

// Where appends a list predicates to the AnsprechpartnerUpdate builder.
func (au *AnsprechpartnerUpdate) Where(ps ...predicate.Ansprechpartner) *AnsprechpartnerUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetName sets the "Name" field.
func (au *AnsprechpartnerUpdate) SetName(s string) *AnsprechpartnerUpdate {
	au.mutation.SetName(s)
	return au
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (au *AnsprechpartnerUpdate) SetNillableName(s *string) *AnsprechpartnerUpdate {
	if s != nil {
		au.SetName(*s)
	}
	return au
}

// SetTelefon sets the "Telefon" field.
func (au *AnsprechpartnerUpdate) SetTelefon(s string) *AnsprechpartnerUpdate {
	au.mutation.SetTelefon(s)
	return au
}

// SetNillableTelefon sets the "Telefon" field if the given value is not nil.
func (au *AnsprechpartnerUpdate) SetNillableTelefon(s *string) *AnsprechpartnerUpdate {
	if s != nil {
		au.SetTelefon(*s)
	}
	return au
}

// ClearTelefon clears the value of the "Telefon" field.
func (au *AnsprechpartnerUpdate) ClearTelefon() *AnsprechpartnerUpdate {
	au.mutation.ClearTelefon()
	return au
}

// SetMobil sets the "Mobil" field.
func (au *AnsprechpartnerUpdate) SetMobil(s string) *AnsprechpartnerUpdate {
	au.mutation.SetMobil(s)
	return au
}

// SetNillableMobil sets the "Mobil" field if the given value is not nil.
func (au *AnsprechpartnerUpdate) SetNillableMobil(s *string) *AnsprechpartnerUpdate {
	if s != nil {
		au.SetMobil(*s)
	}
	return au
}

// ClearMobil clears the value of the "Mobil" field.
func (au *AnsprechpartnerUpdate) ClearMobil() *AnsprechpartnerUpdate {
	au.mutation.ClearMobil()
	return au
}

// SetMail sets the "Mail" field.
func (au *AnsprechpartnerUpdate) SetMail(s string) *AnsprechpartnerUpdate {
	au.mutation.SetMail(s)
	return au
}

// SetNillableMail sets the "Mail" field if the given value is not nil.
func (au *AnsprechpartnerUpdate) SetNillableMail(s *string) *AnsprechpartnerUpdate {
	if s != nil {
		au.SetMail(*s)
	}
	return au
}

// ClearMail clears the value of the "Mail" field.
func (au *AnsprechpartnerUpdate) ClearMail() *AnsprechpartnerUpdate {
	au.mutation.ClearMail()
	return au
}

// SetLieferantID sets the "Lieferant" edge to the Lieferant entity by ID.
func (au *AnsprechpartnerUpdate) SetLieferantID(id int) *AnsprechpartnerUpdate {
	au.mutation.SetLieferantID(id)
	return au
}

// SetNillableLieferantID sets the "Lieferant" edge to the Lieferant entity by ID if the given value is not nil.
func (au *AnsprechpartnerUpdate) SetNillableLieferantID(id *int) *AnsprechpartnerUpdate {
	if id != nil {
		au = au.SetLieferantID(*id)
	}
	return au
}

// SetLieferant sets the "Lieferant" edge to the Lieferant entity.
func (au *AnsprechpartnerUpdate) SetLieferant(l *Lieferant) *AnsprechpartnerUpdate {
	return au.SetLieferantID(l.ID)
}

// Mutation returns the AnsprechpartnerMutation object of the builder.
func (au *AnsprechpartnerUpdate) Mutation() *AnsprechpartnerMutation {
	return au.mutation
}

// ClearLieferant clears the "Lieferant" edge to the Lieferant entity.
func (au *AnsprechpartnerUpdate) ClearLieferant() *AnsprechpartnerUpdate {
	au.mutation.ClearLieferant()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AnsprechpartnerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AnsprechpartnerUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AnsprechpartnerUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AnsprechpartnerUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AnsprechpartnerUpdate) check() error {
	if v, ok := au.mutation.Name(); ok {
		if err := ansprechpartner.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`ent: validator failed for field "Ansprechpartner.Name": %w`, err)}
		}
	}
	return nil
}

func (au *AnsprechpartnerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(ansprechpartner.Table, ansprechpartner.Columns, sqlgraph.NewFieldSpec(ansprechpartner.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(ansprechpartner.FieldName, field.TypeString, value)
	}
	if value, ok := au.mutation.Telefon(); ok {
		_spec.SetField(ansprechpartner.FieldTelefon, field.TypeString, value)
	}
	if au.mutation.TelefonCleared() {
		_spec.ClearField(ansprechpartner.FieldTelefon, field.TypeString)
	}
	if value, ok := au.mutation.Mobil(); ok {
		_spec.SetField(ansprechpartner.FieldMobil, field.TypeString, value)
	}
	if au.mutation.MobilCleared() {
		_spec.ClearField(ansprechpartner.FieldMobil, field.TypeString)
	}
	if value, ok := au.mutation.Mail(); ok {
		_spec.SetField(ansprechpartner.FieldMail, field.TypeString, value)
	}
	if au.mutation.MailCleared() {
		_spec.ClearField(ansprechpartner.FieldMail, field.TypeString)
	}
	if au.mutation.LieferantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ansprechpartner.LieferantTable,
			Columns: []string{ansprechpartner.LieferantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lieferant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.LieferantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ansprechpartner.LieferantTable,
			Columns: []string{ansprechpartner.LieferantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lieferant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ansprechpartner.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AnsprechpartnerUpdateOne is the builder for updating a single Ansprechpartner entity.
type AnsprechpartnerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AnsprechpartnerMutation
}

// SetName sets the "Name" field.
func (auo *AnsprechpartnerUpdateOne) SetName(s string) *AnsprechpartnerUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (auo *AnsprechpartnerUpdateOne) SetNillableName(s *string) *AnsprechpartnerUpdateOne {
	if s != nil {
		auo.SetName(*s)
	}
	return auo
}

// SetTelefon sets the "Telefon" field.
func (auo *AnsprechpartnerUpdateOne) SetTelefon(s string) *AnsprechpartnerUpdateOne {
	auo.mutation.SetTelefon(s)
	return auo
}

// SetNillableTelefon sets the "Telefon" field if the given value is not nil.
func (auo *AnsprechpartnerUpdateOne) SetNillableTelefon(s *string) *AnsprechpartnerUpdateOne {
	if s != nil {
		auo.SetTelefon(*s)
	}
	return auo
}

// ClearTelefon clears the value of the "Telefon" field.
func (auo *AnsprechpartnerUpdateOne) ClearTelefon() *AnsprechpartnerUpdateOne {
	auo.mutation.ClearTelefon()
	return auo
}

// SetMobil sets the "Mobil" field.
func (auo *AnsprechpartnerUpdateOne) SetMobil(s string) *AnsprechpartnerUpdateOne {
	auo.mutation.SetMobil(s)
	return auo
}

// SetNillableMobil sets the "Mobil" field if the given value is not nil.
func (auo *AnsprechpartnerUpdateOne) SetNillableMobil(s *string) *AnsprechpartnerUpdateOne {
	if s != nil {
		auo.SetMobil(*s)
	}
	return auo
}

// ClearMobil clears the value of the "Mobil" field.
func (auo *AnsprechpartnerUpdateOne) ClearMobil() *AnsprechpartnerUpdateOne {
	auo.mutation.ClearMobil()
	return auo
}

// SetMail sets the "Mail" field.
func (auo *AnsprechpartnerUpdateOne) SetMail(s string) *AnsprechpartnerUpdateOne {
	auo.mutation.SetMail(s)
	return auo
}

// SetNillableMail sets the "Mail" field if the given value is not nil.
func (auo *AnsprechpartnerUpdateOne) SetNillableMail(s *string) *AnsprechpartnerUpdateOne {
	if s != nil {
		auo.SetMail(*s)
	}
	return auo
}

// ClearMail clears the value of the "Mail" field.
func (auo *AnsprechpartnerUpdateOne) ClearMail() *AnsprechpartnerUpdateOne {
	auo.mutation.ClearMail()
	return auo
}

// SetLieferantID sets the "Lieferant" edge to the Lieferant entity by ID.
func (auo *AnsprechpartnerUpdateOne) SetLieferantID(id int) *AnsprechpartnerUpdateOne {
	auo.mutation.SetLieferantID(id)
	return auo
}

// SetNillableLieferantID sets the "Lieferant" edge to the Lieferant entity by ID if the given value is not nil.
func (auo *AnsprechpartnerUpdateOne) SetNillableLieferantID(id *int) *AnsprechpartnerUpdateOne {
	if id != nil {
		auo = auo.SetLieferantID(*id)
	}
	return auo
}

// SetLieferant sets the "Lieferant" edge to the Lieferant entity.
func (auo *AnsprechpartnerUpdateOne) SetLieferant(l *Lieferant) *AnsprechpartnerUpdateOne {
	return auo.SetLieferantID(l.ID)
}

// Mutation returns the AnsprechpartnerMutation object of the builder.
func (auo *AnsprechpartnerUpdateOne) Mutation() *AnsprechpartnerMutation {
	return auo.mutation
}

// ClearLieferant clears the "Lieferant" edge to the Lieferant entity.
func (auo *AnsprechpartnerUpdateOne) ClearLieferant() *AnsprechpartnerUpdateOne {
	auo.mutation.ClearLieferant()
	return auo
}

// Where appends a list predicates to the AnsprechpartnerUpdate builder.
func (auo *AnsprechpartnerUpdateOne) Where(ps ...predicate.Ansprechpartner) *AnsprechpartnerUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AnsprechpartnerUpdateOne) Select(field string, fields ...string) *AnsprechpartnerUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Ansprechpartner entity.
func (auo *AnsprechpartnerUpdateOne) Save(ctx context.Context) (*Ansprechpartner, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AnsprechpartnerUpdateOne) SaveX(ctx context.Context) *Ansprechpartner {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AnsprechpartnerUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AnsprechpartnerUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AnsprechpartnerUpdateOne) check() error {
	if v, ok := auo.mutation.Name(); ok {
		if err := ansprechpartner.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`ent: validator failed for field "Ansprechpartner.Name": %w`, err)}
		}
	}
	return nil
}

func (auo *AnsprechpartnerUpdateOne) sqlSave(ctx context.Context) (_node *Ansprechpartner, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(ansprechpartner.Table, ansprechpartner.Columns, sqlgraph.NewFieldSpec(ansprechpartner.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Ansprechpartner.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ansprechpartner.FieldID)
		for _, f := range fields {
			if !ansprechpartner.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ansprechpartner.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(ansprechpartner.FieldName, field.TypeString, value)
	}
	if value, ok := auo.mutation.Telefon(); ok {
		_spec.SetField(ansprechpartner.FieldTelefon, field.TypeString, value)
	}
	if auo.mutation.TelefonCleared() {
		_spec.ClearField(ansprechpartner.FieldTelefon, field.TypeString)
	}
	if value, ok := auo.mutation.Mobil(); ok {
		_spec.SetField(ansprechpartner.FieldMobil, field.TypeString, value)
	}
	if auo.mutation.MobilCleared() {
		_spec.ClearField(ansprechpartner.FieldMobil, field.TypeString)
	}
	if value, ok := auo.mutation.Mail(); ok {
		_spec.SetField(ansprechpartner.FieldMail, field.TypeString, value)
	}
	if auo.mutation.MailCleared() {
		_spec.ClearField(ansprechpartner.FieldMail, field.TypeString)
	}
	if auo.mutation.LieferantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ansprechpartner.LieferantTable,
			Columns: []string{ansprechpartner.LieferantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lieferant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.LieferantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ansprechpartner.LieferantTable,
			Columns: []string{ansprechpartner.LieferantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(lieferant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Ansprechpartner{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ansprechpartner.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
