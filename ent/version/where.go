// Code generated by ent, DO NOT EDIT.

package version

import (
	"golang-backend/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Version {
	return predicate.Version(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Version {
	return predicate.Version(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Version {
	return predicate.Version(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Version {
	return predicate.Version(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Version {
	return predicate.Version(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Version {
	return predicate.Version(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Version {
	return predicate.Version(sql.FieldLTE(FieldID, id))
}

// CurrentVersion applies equality check predicate on the "CurrentVersion" field. It's identical to CurrentVersionEQ.
func CurrentVersion(v float64) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldCurrentVersion, v))
}

// CurrentVersionEQ applies the EQ predicate on the "CurrentVersion" field.
func CurrentVersionEQ(v float64) predicate.Version {
	return predicate.Version(sql.FieldEQ(FieldCurrentVersion, v))
}

// CurrentVersionNEQ applies the NEQ predicate on the "CurrentVersion" field.
func CurrentVersionNEQ(v float64) predicate.Version {
	return predicate.Version(sql.FieldNEQ(FieldCurrentVersion, v))
}

// CurrentVersionIn applies the In predicate on the "CurrentVersion" field.
func CurrentVersionIn(vs ...float64) predicate.Version {
	return predicate.Version(sql.FieldIn(FieldCurrentVersion, vs...))
}

// CurrentVersionNotIn applies the NotIn predicate on the "CurrentVersion" field.
func CurrentVersionNotIn(vs ...float64) predicate.Version {
	return predicate.Version(sql.FieldNotIn(FieldCurrentVersion, vs...))
}

// CurrentVersionGT applies the GT predicate on the "CurrentVersion" field.
func CurrentVersionGT(v float64) predicate.Version {
	return predicate.Version(sql.FieldGT(FieldCurrentVersion, v))
}

// CurrentVersionGTE applies the GTE predicate on the "CurrentVersion" field.
func CurrentVersionGTE(v float64) predicate.Version {
	return predicate.Version(sql.FieldGTE(FieldCurrentVersion, v))
}

// CurrentVersionLT applies the LT predicate on the "CurrentVersion" field.
func CurrentVersionLT(v float64) predicate.Version {
	return predicate.Version(sql.FieldLT(FieldCurrentVersion, v))
}

// CurrentVersionLTE applies the LTE predicate on the "CurrentVersion" field.
func CurrentVersionLTE(v float64) predicate.Version {
	return predicate.Version(sql.FieldLTE(FieldCurrentVersion, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Version) predicate.Version {
	return predicate.Version(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Version) predicate.Version {
	return predicate.Version(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Version) predicate.Version {
	return predicate.Version(sql.NotPredicates(p))
}
