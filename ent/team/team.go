// Code generated by ent, DO NOT EDIT.

package team

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the team type in the database.
	Label = "team"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTeam holds the string denoting the team field in the database.
	FieldTeam = "team"
	// FieldMitarbeiter holds the string denoting the mitarbeiter field in the database.
	FieldMitarbeiter = "mitarbeiter"
	// FieldFarbe holds the string denoting the farbe field in the database.
	FieldFarbe = "farbe"
	// FieldOrt holds the string denoting the ort field in the database.
	FieldOrt = "ort"
	// EdgeArtikel holds the string denoting the artikel edge name in mutations.
	EdgeArtikel = "artikel"
	// EdgeJahr holds the string denoting the jahr edge name in mutations.
	EdgeJahr = "Jahr"
	// Table holds the table name of the team in the database.
	Table = "teams"
	// ArtikelTable is the table that holds the artikel relation/edge.
	ArtikelTable = "artikels"
	// ArtikelInverseTable is the table name for the Artikel entity.
	// It exists in this package in order to avoid circular dependency with the "artikel" package.
	ArtikelInverseTable = "artikels"
	// ArtikelColumn is the table column denoting the artikel relation/edge.
	ArtikelColumn = "team_artikel"
	// JahrTable is the table that holds the Jahr relation/edge.
	JahrTable = "teams"
	// JahrInverseTable is the table name for the Inventur entity.
	// It exists in this package in order to avoid circular dependency with the "inventur" package.
	JahrInverseTable = "inventurs"
	// JahrColumn is the table column denoting the Jahr relation/edge.
	JahrColumn = "inventur_teams"
)

// Columns holds all SQL columns for team fields.
var Columns = []string{
	FieldID,
	FieldTeam,
	FieldMitarbeiter,
	FieldFarbe,
	FieldOrt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "teams"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"inventur_teams",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Team queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTeam orders the results by the Team field.
func ByTeam(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTeam, opts...).ToFunc()
}

// ByMitarbeiter orders the results by the Mitarbeiter field.
func ByMitarbeiter(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMitarbeiter, opts...).ToFunc()
}

// ByFarbe orders the results by the Farbe field.
func ByFarbe(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFarbe, opts...).ToFunc()
}

// ByOrt orders the results by the Ort field.
func ByOrt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrt, opts...).ToFunc()
}

// ByArtikelCount orders the results by artikel count.
func ByArtikelCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newArtikelStep(), opts...)
	}
}

// ByArtikel orders the results by artikel terms.
func ByArtikel(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newArtikelStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByJahrField orders the results by Jahr field.
func ByJahrField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJahrStep(), sql.OrderByField(field, opts...))
	}
}
func newArtikelStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ArtikelInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ArtikelTable, ArtikelColumn),
	)
}
func newJahrStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JahrInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, JahrTable, JahrColumn),
	)
}
