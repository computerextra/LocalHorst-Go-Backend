// Code generated by ent, DO NOT EDIT.

package team

import (
	"golang-backend/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Team {
	return predicate.Team(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Team {
	return predicate.Team(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Team {
	return predicate.Team(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Team {
	return predicate.Team(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Team {
	return predicate.Team(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Team {
	return predicate.Team(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Team {
	return predicate.Team(sql.FieldLTE(FieldID, id))
}

// Team applies equality check predicate on the "Team" field. It's identical to TeamEQ.
func Team(v int) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldTeam, v))
}

// Mitarbeiter applies equality check predicate on the "Mitarbeiter" field. It's identical to MitarbeiterEQ.
func Mitarbeiter(v string) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldMitarbeiter, v))
}

// Farbe applies equality check predicate on the "Farbe" field. It's identical to FarbeEQ.
func Farbe(v string) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldFarbe, v))
}

// Ort applies equality check predicate on the "Ort" field. It's identical to OrtEQ.
func Ort(v string) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldOrt, v))
}

// TeamEQ applies the EQ predicate on the "Team" field.
func TeamEQ(v int) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldTeam, v))
}

// TeamNEQ applies the NEQ predicate on the "Team" field.
func TeamNEQ(v int) predicate.Team {
	return predicate.Team(sql.FieldNEQ(FieldTeam, v))
}

// TeamIn applies the In predicate on the "Team" field.
func TeamIn(vs ...int) predicate.Team {
	return predicate.Team(sql.FieldIn(FieldTeam, vs...))
}

// TeamNotIn applies the NotIn predicate on the "Team" field.
func TeamNotIn(vs ...int) predicate.Team {
	return predicate.Team(sql.FieldNotIn(FieldTeam, vs...))
}

// TeamGT applies the GT predicate on the "Team" field.
func TeamGT(v int) predicate.Team {
	return predicate.Team(sql.FieldGT(FieldTeam, v))
}

// TeamGTE applies the GTE predicate on the "Team" field.
func TeamGTE(v int) predicate.Team {
	return predicate.Team(sql.FieldGTE(FieldTeam, v))
}

// TeamLT applies the LT predicate on the "Team" field.
func TeamLT(v int) predicate.Team {
	return predicate.Team(sql.FieldLT(FieldTeam, v))
}

// TeamLTE applies the LTE predicate on the "Team" field.
func TeamLTE(v int) predicate.Team {
	return predicate.Team(sql.FieldLTE(FieldTeam, v))
}

// MitarbeiterEQ applies the EQ predicate on the "Mitarbeiter" field.
func MitarbeiterEQ(v string) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldMitarbeiter, v))
}

// MitarbeiterNEQ applies the NEQ predicate on the "Mitarbeiter" field.
func MitarbeiterNEQ(v string) predicate.Team {
	return predicate.Team(sql.FieldNEQ(FieldMitarbeiter, v))
}

// MitarbeiterIn applies the In predicate on the "Mitarbeiter" field.
func MitarbeiterIn(vs ...string) predicate.Team {
	return predicate.Team(sql.FieldIn(FieldMitarbeiter, vs...))
}

// MitarbeiterNotIn applies the NotIn predicate on the "Mitarbeiter" field.
func MitarbeiterNotIn(vs ...string) predicate.Team {
	return predicate.Team(sql.FieldNotIn(FieldMitarbeiter, vs...))
}

// MitarbeiterGT applies the GT predicate on the "Mitarbeiter" field.
func MitarbeiterGT(v string) predicate.Team {
	return predicate.Team(sql.FieldGT(FieldMitarbeiter, v))
}

// MitarbeiterGTE applies the GTE predicate on the "Mitarbeiter" field.
func MitarbeiterGTE(v string) predicate.Team {
	return predicate.Team(sql.FieldGTE(FieldMitarbeiter, v))
}

// MitarbeiterLT applies the LT predicate on the "Mitarbeiter" field.
func MitarbeiterLT(v string) predicate.Team {
	return predicate.Team(sql.FieldLT(FieldMitarbeiter, v))
}

// MitarbeiterLTE applies the LTE predicate on the "Mitarbeiter" field.
func MitarbeiterLTE(v string) predicate.Team {
	return predicate.Team(sql.FieldLTE(FieldMitarbeiter, v))
}

// MitarbeiterContains applies the Contains predicate on the "Mitarbeiter" field.
func MitarbeiterContains(v string) predicate.Team {
	return predicate.Team(sql.FieldContains(FieldMitarbeiter, v))
}

// MitarbeiterHasPrefix applies the HasPrefix predicate on the "Mitarbeiter" field.
func MitarbeiterHasPrefix(v string) predicate.Team {
	return predicate.Team(sql.FieldHasPrefix(FieldMitarbeiter, v))
}

// MitarbeiterHasSuffix applies the HasSuffix predicate on the "Mitarbeiter" field.
func MitarbeiterHasSuffix(v string) predicate.Team {
	return predicate.Team(sql.FieldHasSuffix(FieldMitarbeiter, v))
}

// MitarbeiterEqualFold applies the EqualFold predicate on the "Mitarbeiter" field.
func MitarbeiterEqualFold(v string) predicate.Team {
	return predicate.Team(sql.FieldEqualFold(FieldMitarbeiter, v))
}

// MitarbeiterContainsFold applies the ContainsFold predicate on the "Mitarbeiter" field.
func MitarbeiterContainsFold(v string) predicate.Team {
	return predicate.Team(sql.FieldContainsFold(FieldMitarbeiter, v))
}

// FarbeEQ applies the EQ predicate on the "Farbe" field.
func FarbeEQ(v string) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldFarbe, v))
}

// FarbeNEQ applies the NEQ predicate on the "Farbe" field.
func FarbeNEQ(v string) predicate.Team {
	return predicate.Team(sql.FieldNEQ(FieldFarbe, v))
}

// FarbeIn applies the In predicate on the "Farbe" field.
func FarbeIn(vs ...string) predicate.Team {
	return predicate.Team(sql.FieldIn(FieldFarbe, vs...))
}

// FarbeNotIn applies the NotIn predicate on the "Farbe" field.
func FarbeNotIn(vs ...string) predicate.Team {
	return predicate.Team(sql.FieldNotIn(FieldFarbe, vs...))
}

// FarbeGT applies the GT predicate on the "Farbe" field.
func FarbeGT(v string) predicate.Team {
	return predicate.Team(sql.FieldGT(FieldFarbe, v))
}

// FarbeGTE applies the GTE predicate on the "Farbe" field.
func FarbeGTE(v string) predicate.Team {
	return predicate.Team(sql.FieldGTE(FieldFarbe, v))
}

// FarbeLT applies the LT predicate on the "Farbe" field.
func FarbeLT(v string) predicate.Team {
	return predicate.Team(sql.FieldLT(FieldFarbe, v))
}

// FarbeLTE applies the LTE predicate on the "Farbe" field.
func FarbeLTE(v string) predicate.Team {
	return predicate.Team(sql.FieldLTE(FieldFarbe, v))
}

// FarbeContains applies the Contains predicate on the "Farbe" field.
func FarbeContains(v string) predicate.Team {
	return predicate.Team(sql.FieldContains(FieldFarbe, v))
}

// FarbeHasPrefix applies the HasPrefix predicate on the "Farbe" field.
func FarbeHasPrefix(v string) predicate.Team {
	return predicate.Team(sql.FieldHasPrefix(FieldFarbe, v))
}

// FarbeHasSuffix applies the HasSuffix predicate on the "Farbe" field.
func FarbeHasSuffix(v string) predicate.Team {
	return predicate.Team(sql.FieldHasSuffix(FieldFarbe, v))
}

// FarbeEqualFold applies the EqualFold predicate on the "Farbe" field.
func FarbeEqualFold(v string) predicate.Team {
	return predicate.Team(sql.FieldEqualFold(FieldFarbe, v))
}

// FarbeContainsFold applies the ContainsFold predicate on the "Farbe" field.
func FarbeContainsFold(v string) predicate.Team {
	return predicate.Team(sql.FieldContainsFold(FieldFarbe, v))
}

// OrtEQ applies the EQ predicate on the "Ort" field.
func OrtEQ(v string) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldOrt, v))
}

// OrtNEQ applies the NEQ predicate on the "Ort" field.
func OrtNEQ(v string) predicate.Team {
	return predicate.Team(sql.FieldNEQ(FieldOrt, v))
}

// OrtIn applies the In predicate on the "Ort" field.
func OrtIn(vs ...string) predicate.Team {
	return predicate.Team(sql.FieldIn(FieldOrt, vs...))
}

// OrtNotIn applies the NotIn predicate on the "Ort" field.
func OrtNotIn(vs ...string) predicate.Team {
	return predicate.Team(sql.FieldNotIn(FieldOrt, vs...))
}

// OrtGT applies the GT predicate on the "Ort" field.
func OrtGT(v string) predicate.Team {
	return predicate.Team(sql.FieldGT(FieldOrt, v))
}

// OrtGTE applies the GTE predicate on the "Ort" field.
func OrtGTE(v string) predicate.Team {
	return predicate.Team(sql.FieldGTE(FieldOrt, v))
}

// OrtLT applies the LT predicate on the "Ort" field.
func OrtLT(v string) predicate.Team {
	return predicate.Team(sql.FieldLT(FieldOrt, v))
}

// OrtLTE applies the LTE predicate on the "Ort" field.
func OrtLTE(v string) predicate.Team {
	return predicate.Team(sql.FieldLTE(FieldOrt, v))
}

// OrtContains applies the Contains predicate on the "Ort" field.
func OrtContains(v string) predicate.Team {
	return predicate.Team(sql.FieldContains(FieldOrt, v))
}

// OrtHasPrefix applies the HasPrefix predicate on the "Ort" field.
func OrtHasPrefix(v string) predicate.Team {
	return predicate.Team(sql.FieldHasPrefix(FieldOrt, v))
}

// OrtHasSuffix applies the HasSuffix predicate on the "Ort" field.
func OrtHasSuffix(v string) predicate.Team {
	return predicate.Team(sql.FieldHasSuffix(FieldOrt, v))
}

// OrtEqualFold applies the EqualFold predicate on the "Ort" field.
func OrtEqualFold(v string) predicate.Team {
	return predicate.Team(sql.FieldEqualFold(FieldOrt, v))
}

// OrtContainsFold applies the ContainsFold predicate on the "Ort" field.
func OrtContainsFold(v string) predicate.Team {
	return predicate.Team(sql.FieldContainsFold(FieldOrt, v))
}

// HasTeamName applies the HasEdge predicate on the "teamName" edge.
func HasTeamName() predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TeamNameTable, TeamNameColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeamNameWith applies the HasEdge predicate on the "teamName" edge with a given conditions (other predicates).
func HasTeamNameWith(preds ...predicate.Artikel) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := newTeamNameStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasJahr applies the HasEdge predicate on the "Jahr" edge.
func HasJahr() predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, JahrTable, JahrColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJahrWith applies the HasEdge predicate on the "Jahr" edge with a given conditions (other predicates).
func HasJahrWith(preds ...predicate.Inventur) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := newJahrStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Team) predicate.Team {
	return predicate.Team(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Team) predicate.Team {
	return predicate.Team(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Team) predicate.Team {
	return predicate.Team(sql.NotPredicates(p))
}
