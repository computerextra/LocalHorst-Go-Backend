// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldMail holds the string denoting the mail field in the database.
	FieldMail = "mail"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// EdgeMitarbeiter holds the string denoting the mitarbeiter edge name in mutations.
	EdgeMitarbeiter = "mitarbeiter"
	// Table holds the table name of the user in the database.
	Table = "users"
	// MitarbeiterTable is the table that holds the mitarbeiter relation/edge.
	MitarbeiterTable = "mitarbeiters"
	// MitarbeiterInverseTable is the table name for the Mitarbeiter entity.
	// It exists in this package in order to avoid circular dependency with the "mitarbeiter" package.
	MitarbeiterInverseTable = "mitarbeiters"
	// MitarbeiterColumn is the table column denoting the mitarbeiter relation/edge.
	MitarbeiterColumn = "user_mitarbeiter"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldPassword,
	FieldMail,
	FieldActive,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "Name" field. It is called by the builders before save.
	NameValidator func(string) error
	// PasswordValidator is a validator for the "Password" field. It is called by the builders before save.
	PasswordValidator func(string) error
	// MailValidator is a validator for the "Mail" field. It is called by the builders before save.
	MailValidator func(string) error
	// DefaultActive holds the default value on creation for the "Active" field.
	DefaultActive bool
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the Name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPassword orders the results by the Password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByMail orders the results by the Mail field.
func ByMail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMail, opts...).ToFunc()
}

// ByActive orders the results by the Active field.
func ByActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActive, opts...).ToFunc()
}

// ByMitarbeiterField orders the results by mitarbeiter field.
func ByMitarbeiterField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMitarbeiterStep(), sql.OrderByField(field, opts...))
	}
}
func newMitarbeiterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MitarbeiterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, MitarbeiterTable, MitarbeiterColumn),
	)
}
