// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"golang-backend/ent/inventur"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Inventur is the model entity for the Inventur schema.
type Inventur struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Jahr holds the value of the "Jahr" field.
	Jahr int `json:"Jahr,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InventurQuery when eager-loading is set.
	Edges        InventurEdges `json:"edges"`
	selectValues sql.SelectValues
}

// InventurEdges holds the relations/edges for other nodes in the graph.
type InventurEdges struct {
	// Teams holds the value of the Teams edge.
	Teams []*Team `json:"Teams,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TeamsOrErr returns the Teams value or an error if the edge
// was not loaded in eager-loading.
func (e InventurEdges) TeamsOrErr() ([]*Team, error) {
	if e.loadedTypes[0] {
		return e.Teams, nil
	}
	return nil, &NotLoadedError{edge: "Teams"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Inventur) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case inventur.FieldID, inventur.FieldJahr:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Inventur fields.
func (i *Inventur) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case inventur.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int(value.Int64)
		case inventur.FieldJahr:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Jahr", values[j])
			} else if value.Valid {
				i.Jahr = int(value.Int64)
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Inventur.
// This includes values selected through modifiers, order, etc.
func (i *Inventur) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// QueryTeams queries the "Teams" edge of the Inventur entity.
func (i *Inventur) QueryTeams() *TeamQuery {
	return NewInventurClient(i.config).QueryTeams(i)
}

// Update returns a builder for updating this Inventur.
// Note that you need to call Inventur.Unwrap() before calling this method if this Inventur
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Inventur) Update() *InventurUpdateOne {
	return NewInventurClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Inventur entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Inventur) Unwrap() *Inventur {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Inventur is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Inventur) String() string {
	var builder strings.Builder
	builder.WriteString("Inventur(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("Jahr=")
	builder.WriteString(fmt.Sprintf("%v", i.Jahr))
	builder.WriteByte(')')
	return builder.String()
}

// Inventurs is a parsable slice of Inventur.
type Inventurs []*Inventur
