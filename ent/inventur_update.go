// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"golang-backend/ent/inventur"
	"golang-backend/ent/predicate"
	"golang-backend/ent/team"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// InventurUpdate is the builder for updating Inventur entities.
type InventurUpdate struct {
	config
	hooks    []Hook
	mutation *InventurMutation
}

// Where appends a list predicates to the InventurUpdate builder.
func (iu *InventurUpdate) Where(ps ...predicate.Inventur) *InventurUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetJahr sets the "Jahr" field.
func (iu *InventurUpdate) SetJahr(i int) *InventurUpdate {
	iu.mutation.ResetJahr()
	iu.mutation.SetJahr(i)
	return iu
}

// SetNillableJahr sets the "Jahr" field if the given value is not nil.
func (iu *InventurUpdate) SetNillableJahr(i *int) *InventurUpdate {
	if i != nil {
		iu.SetJahr(*i)
	}
	return iu
}

// AddJahr adds i to the "Jahr" field.
func (iu *InventurUpdate) AddJahr(i int) *InventurUpdate {
	iu.mutation.AddJahr(i)
	return iu
}

// AddTeamIDs adds the "Teams" edge to the Team entity by IDs.
func (iu *InventurUpdate) AddTeamIDs(ids ...int) *InventurUpdate {
	iu.mutation.AddTeamIDs(ids...)
	return iu
}

// AddTeams adds the "Teams" edges to the Team entity.
func (iu *InventurUpdate) AddTeams(t ...*Team) *InventurUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return iu.AddTeamIDs(ids...)
}

// Mutation returns the InventurMutation object of the builder.
func (iu *InventurUpdate) Mutation() *InventurMutation {
	return iu.mutation
}

// ClearTeams clears all "Teams" edges to the Team entity.
func (iu *InventurUpdate) ClearTeams() *InventurUpdate {
	iu.mutation.ClearTeams()
	return iu
}

// RemoveTeamIDs removes the "Teams" edge to Team entities by IDs.
func (iu *InventurUpdate) RemoveTeamIDs(ids ...int) *InventurUpdate {
	iu.mutation.RemoveTeamIDs(ids...)
	return iu
}

// RemoveTeams removes "Teams" edges to Team entities.
func (iu *InventurUpdate) RemoveTeams(t ...*Team) *InventurUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return iu.RemoveTeamIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *InventurUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InventurUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InventurUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InventurUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iu *InventurUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(inventur.Table, inventur.Columns, sqlgraph.NewFieldSpec(inventur.FieldID, field.TypeInt))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Jahr(); ok {
		_spec.SetField(inventur.FieldJahr, field.TypeInt, value)
	}
	if value, ok := iu.mutation.AddedJahr(); ok {
		_spec.AddField(inventur.FieldJahr, field.TypeInt, value)
	}
	if iu.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inventur.TeamsTable,
			Columns: []string{inventur.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedTeamsIDs(); len(nodes) > 0 && !iu.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inventur.TeamsTable,
			Columns: []string{inventur.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inventur.TeamsTable,
			Columns: []string{inventur.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inventur.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// InventurUpdateOne is the builder for updating a single Inventur entity.
type InventurUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InventurMutation
}

// SetJahr sets the "Jahr" field.
func (iuo *InventurUpdateOne) SetJahr(i int) *InventurUpdateOne {
	iuo.mutation.ResetJahr()
	iuo.mutation.SetJahr(i)
	return iuo
}

// SetNillableJahr sets the "Jahr" field if the given value is not nil.
func (iuo *InventurUpdateOne) SetNillableJahr(i *int) *InventurUpdateOne {
	if i != nil {
		iuo.SetJahr(*i)
	}
	return iuo
}

// AddJahr adds i to the "Jahr" field.
func (iuo *InventurUpdateOne) AddJahr(i int) *InventurUpdateOne {
	iuo.mutation.AddJahr(i)
	return iuo
}

// AddTeamIDs adds the "Teams" edge to the Team entity by IDs.
func (iuo *InventurUpdateOne) AddTeamIDs(ids ...int) *InventurUpdateOne {
	iuo.mutation.AddTeamIDs(ids...)
	return iuo
}

// AddTeams adds the "Teams" edges to the Team entity.
func (iuo *InventurUpdateOne) AddTeams(t ...*Team) *InventurUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return iuo.AddTeamIDs(ids...)
}

// Mutation returns the InventurMutation object of the builder.
func (iuo *InventurUpdateOne) Mutation() *InventurMutation {
	return iuo.mutation
}

// ClearTeams clears all "Teams" edges to the Team entity.
func (iuo *InventurUpdateOne) ClearTeams() *InventurUpdateOne {
	iuo.mutation.ClearTeams()
	return iuo
}

// RemoveTeamIDs removes the "Teams" edge to Team entities by IDs.
func (iuo *InventurUpdateOne) RemoveTeamIDs(ids ...int) *InventurUpdateOne {
	iuo.mutation.RemoveTeamIDs(ids...)
	return iuo
}

// RemoveTeams removes "Teams" edges to Team entities.
func (iuo *InventurUpdateOne) RemoveTeams(t ...*Team) *InventurUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return iuo.RemoveTeamIDs(ids...)
}

// Where appends a list predicates to the InventurUpdate builder.
func (iuo *InventurUpdateOne) Where(ps ...predicate.Inventur) *InventurUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *InventurUpdateOne) Select(field string, fields ...string) *InventurUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Inventur entity.
func (iuo *InventurUpdateOne) Save(ctx context.Context) (*Inventur, error) {
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InventurUpdateOne) SaveX(ctx context.Context) *Inventur {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *InventurUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InventurUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iuo *InventurUpdateOne) sqlSave(ctx context.Context) (_node *Inventur, err error) {
	_spec := sqlgraph.NewUpdateSpec(inventur.Table, inventur.Columns, sqlgraph.NewFieldSpec(inventur.FieldID, field.TypeInt))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Inventur.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, inventur.FieldID)
		for _, f := range fields {
			if !inventur.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != inventur.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.Jahr(); ok {
		_spec.SetField(inventur.FieldJahr, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.AddedJahr(); ok {
		_spec.AddField(inventur.FieldJahr, field.TypeInt, value)
	}
	if iuo.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inventur.TeamsTable,
			Columns: []string{inventur.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedTeamsIDs(); len(nodes) > 0 && !iuo.mutation.TeamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inventur.TeamsTable,
			Columns: []string{inventur.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inventur.TeamsTable,
			Columns: []string{inventur.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Inventur{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inventur.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
