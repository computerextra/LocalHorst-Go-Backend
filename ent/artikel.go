// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"golang-backend/ent/artikel"
	"golang-backend/ent/team"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Artikel is the model entity for the Artikel schema.
type Artikel struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Artikelnummer holds the value of the "Artikelnummer" field.
	Artikelnummer string `json:"Artikelnummer,omitempty"`
	// Suchbegriff holds the value of the "Suchbegriff" field.
	Suchbegriff string `json:"Suchbegriff,omitempty"`
	// Anzahl holds the value of the "Anzahl" field.
	Anzahl int `json:"Anzahl,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ArtikelQuery when eager-loading is set.
	Edges        ArtikelEdges `json:"edges"`
	team_artikel *int
	selectValues sql.SelectValues
}

// ArtikelEdges holds the relations/edges for other nodes in the graph.
type ArtikelEdges struct {
	// Team holds the value of the team edge.
	Team *Team `json:"team,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TeamOrErr returns the Team value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ArtikelEdges) TeamOrErr() (*Team, error) {
	if e.Team != nil {
		return e.Team, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: team.Label}
	}
	return nil, &NotLoadedError{edge: "team"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Artikel) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case artikel.FieldID, artikel.FieldAnzahl:
			values[i] = new(sql.NullInt64)
		case artikel.FieldArtikelnummer, artikel.FieldSuchbegriff:
			values[i] = new(sql.NullString)
		case artikel.ForeignKeys[0]: // team_artikel
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Artikel fields.
func (a *Artikel) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case artikel.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case artikel.FieldArtikelnummer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Artikelnummer", values[i])
			} else if value.Valid {
				a.Artikelnummer = value.String
			}
		case artikel.FieldSuchbegriff:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Suchbegriff", values[i])
			} else if value.Valid {
				a.Suchbegriff = value.String
			}
		case artikel.FieldAnzahl:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Anzahl", values[i])
			} else if value.Valid {
				a.Anzahl = int(value.Int64)
			}
		case artikel.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field team_artikel", value)
			} else if value.Valid {
				a.team_artikel = new(int)
				*a.team_artikel = int(value.Int64)
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Artikel.
// This includes values selected through modifiers, order, etc.
func (a *Artikel) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryTeam queries the "team" edge of the Artikel entity.
func (a *Artikel) QueryTeam() *TeamQuery {
	return NewArtikelClient(a.config).QueryTeam(a)
}

// Update returns a builder for updating this Artikel.
// Note that you need to call Artikel.Unwrap() before calling this method if this Artikel
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Artikel) Update() *ArtikelUpdateOne {
	return NewArtikelClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Artikel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Artikel) Unwrap() *Artikel {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Artikel is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Artikel) String() string {
	var builder strings.Builder
	builder.WriteString("Artikel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("Artikelnummer=")
	builder.WriteString(a.Artikelnummer)
	builder.WriteString(", ")
	builder.WriteString("Suchbegriff=")
	builder.WriteString(a.Suchbegriff)
	builder.WriteString(", ")
	builder.WriteString("Anzahl=")
	builder.WriteString(fmt.Sprintf("%v", a.Anzahl))
	builder.WriteByte(')')
	return builder.String()
}

// Artikels is a parsable slice of Artikel.
type Artikels []*Artikel
