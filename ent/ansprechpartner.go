// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"golang-backend/ent/ansprechpartner"
	"golang-backend/ent/lieferant"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Ansprechpartner is the model entity for the Ansprechpartner schema.
type Ansprechpartner struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// Telefon holds the value of the "Telefon" field.
	Telefon *string `json:"Telefon,omitempty"`
	// Mobil holds the value of the "Mobil" field.
	Mobil *string `json:"Mobil,omitempty"`
	// Mail holds the value of the "Mail" field.
	Mail *string `json:"Mail,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AnsprechpartnerQuery when eager-loading is set.
	Edges                     AnsprechpartnerEdges `json:"edges"`
	lieferant_ansprechpartner *int
	selectValues              sql.SelectValues
}

// AnsprechpartnerEdges holds the relations/edges for other nodes in the graph.
type AnsprechpartnerEdges struct {
	// Lieferant holds the value of the Lieferant edge.
	Lieferant *Lieferant `json:"Lieferant,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// LieferantOrErr returns the Lieferant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AnsprechpartnerEdges) LieferantOrErr() (*Lieferant, error) {
	if e.Lieferant != nil {
		return e.Lieferant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: lieferant.Label}
	}
	return nil, &NotLoadedError{edge: "Lieferant"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Ansprechpartner) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ansprechpartner.FieldID:
			values[i] = new(sql.NullInt64)
		case ansprechpartner.FieldName, ansprechpartner.FieldTelefon, ansprechpartner.FieldMobil, ansprechpartner.FieldMail:
			values[i] = new(sql.NullString)
		case ansprechpartner.ForeignKeys[0]: // lieferant_ansprechpartner
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Ansprechpartner fields.
func (a *Ansprechpartner) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ansprechpartner.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case ansprechpartner.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case ansprechpartner.FieldTelefon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Telefon", values[i])
			} else if value.Valid {
				a.Telefon = new(string)
				*a.Telefon = value.String
			}
		case ansprechpartner.FieldMobil:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Mobil", values[i])
			} else if value.Valid {
				a.Mobil = new(string)
				*a.Mobil = value.String
			}
		case ansprechpartner.FieldMail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Mail", values[i])
			} else if value.Valid {
				a.Mail = new(string)
				*a.Mail = value.String
			}
		case ansprechpartner.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field lieferant_ansprechpartner", value)
			} else if value.Valid {
				a.lieferant_ansprechpartner = new(int)
				*a.lieferant_ansprechpartner = int(value.Int64)
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Ansprechpartner.
// This includes values selected through modifiers, order, etc.
func (a *Ansprechpartner) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryLieferant queries the "Lieferant" edge of the Ansprechpartner entity.
func (a *Ansprechpartner) QueryLieferant() *LieferantQuery {
	return NewAnsprechpartnerClient(a.config).QueryLieferant(a)
}

// Update returns a builder for updating this Ansprechpartner.
// Note that you need to call Ansprechpartner.Unwrap() before calling this method if this Ansprechpartner
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Ansprechpartner) Update() *AnsprechpartnerUpdateOne {
	return NewAnsprechpartnerClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Ansprechpartner entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Ansprechpartner) Unwrap() *Ansprechpartner {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Ansprechpartner is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Ansprechpartner) String() string {
	var builder strings.Builder
	builder.WriteString("Ansprechpartner(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("Name=")
	builder.WriteString(a.Name)
	builder.WriteString(", ")
	if v := a.Telefon; v != nil {
		builder.WriteString("Telefon=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := a.Mobil; v != nil {
		builder.WriteString("Mobil=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := a.Mail; v != nil {
		builder.WriteString("Mail=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Ansprechpartners is a parsable slice of Ansprechpartner.
type Ansprechpartners []*Ansprechpartner
