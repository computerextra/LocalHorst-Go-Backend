// Code generated by ent, DO NOT EDIT.

package mitarbeiter

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the mitarbeiter type in the database.
	Label = "mitarbeiter"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldShort holds the string denoting the short field in the database.
	FieldShort = "short"
	// FieldGruppenwahl holds the string denoting the gruppenwahl field in the database.
	FieldGruppenwahl = "gruppenwahl"
	// FieldInternTelefon1 holds the string denoting the interntelefon1 field in the database.
	FieldInternTelefon1 = "intern_telefon1"
	// FieldInternTelefon2 holds the string denoting the interntelefon2 field in the database.
	FieldInternTelefon2 = "intern_telefon2"
	// FieldFestnetzPrivat holds the string denoting the festnetzprivat field in the database.
	FieldFestnetzPrivat = "festnetz_privat"
	// FieldFestnetzAlternativ holds the string denoting the festnetzalternativ field in the database.
	FieldFestnetzAlternativ = "festnetz_alternativ"
	// FieldHomeOffice holds the string denoting the homeoffice field in the database.
	FieldHomeOffice = "home_office"
	// FieldMobilBusiness holds the string denoting the mobilbusiness field in the database.
	FieldMobilBusiness = "mobil_business"
	// FieldMobilPrivat holds the string denoting the mobilprivat field in the database.
	FieldMobilPrivat = "mobil_privat"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldAzubi holds the string denoting the azubi field in the database.
	FieldAzubi = "azubi"
	// FieldGeburtstag holds the string denoting the geburtstag field in the database.
	FieldGeburtstag = "geburtstag"
	// FieldPaypal holds the string denoting the paypal field in the database.
	FieldPaypal = "paypal"
	// FieldAbonniert holds the string denoting the abonniert field in the database.
	FieldAbonniert = "abonniert"
	// FieldGeld holds the string denoting the geld field in the database.
	FieldGeld = "geld"
	// FieldPfand holds the string denoting the pfand field in the database.
	FieldPfand = "pfand"
	// FieldDinge holds the string denoting the dinge field in the database.
	FieldDinge = "dinge"
	// FieldAbgeschickt holds the string denoting the abgeschickt field in the database.
	FieldAbgeschickt = "abgeschickt"
	// FieldBild1 holds the string denoting the bild1 field in the database.
	FieldBild1 = "bild1"
	// FieldBild2 holds the string denoting the bild2 field in the database.
	FieldBild2 = "bild2"
	// FieldBild3 holds the string denoting the bild3 field in the database.
	FieldBild3 = "bild3"
	// FieldBild1Date holds the string denoting the bild1date field in the database.
	FieldBild1Date = "bild1date"
	// FieldBild2Date holds the string denoting the bild2date field in the database.
	FieldBild2Date = "bild2date"
	// FieldBild3Date holds the string denoting the bild3date field in the database.
	FieldBild3Date = "bild3date"
	// Table holds the table name of the mitarbeiter in the database.
	Table = "mitarbeiters"
)

// Columns holds all SQL columns for mitarbeiter fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldShort,
	FieldGruppenwahl,
	FieldInternTelefon1,
	FieldInternTelefon2,
	FieldFestnetzPrivat,
	FieldFestnetzAlternativ,
	FieldHomeOffice,
	FieldMobilBusiness,
	FieldMobilPrivat,
	FieldEmail,
	FieldAzubi,
	FieldGeburtstag,
	FieldPaypal,
	FieldAbonniert,
	FieldGeld,
	FieldPfand,
	FieldDinge,
	FieldAbgeschickt,
	FieldBild1,
	FieldBild2,
	FieldBild3,
	FieldBild1Date,
	FieldBild2Date,
	FieldBild3Date,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "Name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultAzubi holds the default value on creation for the "Azubi" field.
	DefaultAzubi bool
	// DefaultPaypal holds the default value on creation for the "Paypal" field.
	DefaultPaypal bool
	// DefaultAbonniert holds the default value on creation for the "Abonniert" field.
	DefaultAbonniert bool
)

// OrderOption defines the ordering options for the Mitarbeiter queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the Name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByShort orders the results by the Short field.
func ByShort(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShort, opts...).ToFunc()
}

// ByGruppenwahl orders the results by the Gruppenwahl field.
func ByGruppenwahl(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGruppenwahl, opts...).ToFunc()
}

// ByInternTelefon1 orders the results by the InternTelefon1 field.
func ByInternTelefon1(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInternTelefon1, opts...).ToFunc()
}

// ByInternTelefon2 orders the results by the InternTelefon2 field.
func ByInternTelefon2(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInternTelefon2, opts...).ToFunc()
}

// ByFestnetzPrivat orders the results by the FestnetzPrivat field.
func ByFestnetzPrivat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFestnetzPrivat, opts...).ToFunc()
}

// ByFestnetzAlternativ orders the results by the FestnetzAlternativ field.
func ByFestnetzAlternativ(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFestnetzAlternativ, opts...).ToFunc()
}

// ByHomeOffice orders the results by the HomeOffice field.
func ByHomeOffice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHomeOffice, opts...).ToFunc()
}

// ByMobilBusiness orders the results by the MobilBusiness field.
func ByMobilBusiness(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMobilBusiness, opts...).ToFunc()
}

// ByMobilPrivat orders the results by the MobilPrivat field.
func ByMobilPrivat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMobilPrivat, opts...).ToFunc()
}

// ByEmail orders the results by the Email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByAzubi orders the results by the Azubi field.
func ByAzubi(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAzubi, opts...).ToFunc()
}

// ByGeburtstag orders the results by the Geburtstag field.
func ByGeburtstag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGeburtstag, opts...).ToFunc()
}

// ByPaypal orders the results by the Paypal field.
func ByPaypal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaypal, opts...).ToFunc()
}

// ByAbonniert orders the results by the Abonniert field.
func ByAbonniert(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAbonniert, opts...).ToFunc()
}

// ByGeld orders the results by the Geld field.
func ByGeld(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGeld, opts...).ToFunc()
}

// ByPfand orders the results by the Pfand field.
func ByPfand(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPfand, opts...).ToFunc()
}

// ByDinge orders the results by the Dinge field.
func ByDinge(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDinge, opts...).ToFunc()
}

// ByAbgeschickt orders the results by the Abgeschickt field.
func ByAbgeschickt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAbgeschickt, opts...).ToFunc()
}

// ByBild1 orders the results by the Bild1 field.
func ByBild1(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBild1, opts...).ToFunc()
}

// ByBild2 orders the results by the Bild2 field.
func ByBild2(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBild2, opts...).ToFunc()
}

// ByBild3 orders the results by the Bild3 field.
func ByBild3(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBild3, opts...).ToFunc()
}

// ByBild1Date orders the results by the Bild1Date field.
func ByBild1Date(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBild1Date, opts...).ToFunc()
}

// ByBild2Date orders the results by the Bild2Date field.
func ByBild2Date(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBild2Date, opts...).ToFunc()
}

// ByBild3Date orders the results by the Bild3Date field.
func ByBild3Date(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBild3Date, opts...).ToFunc()
}
