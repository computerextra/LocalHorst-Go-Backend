// Code generated by ent, DO NOT EDIT.

package mitarbeiter

import (
	"golang-backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "Name" field. It's identical to NameEQ.
func Name(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldName, v))
}

// Short applies equality check predicate on the "Short" field. It's identical to ShortEQ.
func Short(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldShort, v))
}

// Gruppenwahl applies equality check predicate on the "Gruppenwahl" field. It's identical to GruppenwahlEQ.
func Gruppenwahl(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldGruppenwahl, v))
}

// InternTelefon1 applies equality check predicate on the "InternTelefon1" field. It's identical to InternTelefon1EQ.
func InternTelefon1(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldInternTelefon1, v))
}

// InternTelefon2 applies equality check predicate on the "InternTelefon2" field. It's identical to InternTelefon2EQ.
func InternTelefon2(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldInternTelefon2, v))
}

// FestnetzPrivat applies equality check predicate on the "FestnetzPrivat" field. It's identical to FestnetzPrivatEQ.
func FestnetzPrivat(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldFestnetzPrivat, v))
}

// FestnetzAlternativ applies equality check predicate on the "FestnetzAlternativ" field. It's identical to FestnetzAlternativEQ.
func FestnetzAlternativ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldFestnetzAlternativ, v))
}

// HomeOffice applies equality check predicate on the "HomeOffice" field. It's identical to HomeOfficeEQ.
func HomeOffice(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldHomeOffice, v))
}

// MobilBusiness applies equality check predicate on the "MobilBusiness" field. It's identical to MobilBusinessEQ.
func MobilBusiness(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldMobilBusiness, v))
}

// MobilPrivat applies equality check predicate on the "MobilPrivat" field. It's identical to MobilPrivatEQ.
func MobilPrivat(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldMobilPrivat, v))
}

// Email applies equality check predicate on the "Email" field. It's identical to EmailEQ.
func Email(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldEmail, v))
}

// Azubi applies equality check predicate on the "Azubi" field. It's identical to AzubiEQ.
func Azubi(v bool) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldAzubi, v))
}

// Geburtstag applies equality check predicate on the "Geburtstag" field. It's identical to GeburtstagEQ.
func Geburtstag(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldGeburtstag, v))
}

// Paypal applies equality check predicate on the "Paypal" field. It's identical to PaypalEQ.
func Paypal(v bool) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldPaypal, v))
}

// Abonniert applies equality check predicate on the "Abonniert" field. It's identical to AbonniertEQ.
func Abonniert(v bool) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldAbonniert, v))
}

// Geld applies equality check predicate on the "Geld" field. It's identical to GeldEQ.
func Geld(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldGeld, v))
}

// Pfand applies equality check predicate on the "Pfand" field. It's identical to PfandEQ.
func Pfand(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldPfand, v))
}

// Dinge applies equality check predicate on the "Dinge" field. It's identical to DingeEQ.
func Dinge(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldDinge, v))
}

// Abgeschickt applies equality check predicate on the "Abgeschickt" field. It's identical to AbgeschicktEQ.
func Abgeschickt(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldAbgeschickt, v))
}

// Bild1 applies equality check predicate on the "Bild1" field. It's identical to Bild1EQ.
func Bild1(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldBild1, v))
}

// Bild2 applies equality check predicate on the "Bild2" field. It's identical to Bild2EQ.
func Bild2(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldBild2, v))
}

// Bild3 applies equality check predicate on the "Bild3" field. It's identical to Bild3EQ.
func Bild3(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldBild3, v))
}

// Bild1Date applies equality check predicate on the "Bild1Date" field. It's identical to Bild1DateEQ.
func Bild1Date(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldBild1Date, v))
}

// Bild2Date applies equality check predicate on the "Bild2Date" field. It's identical to Bild2DateEQ.
func Bild2Date(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldBild2Date, v))
}

// Bild3Date applies equality check predicate on the "Bild3Date" field. It's identical to Bild3DateEQ.
func Bild3Date(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldBild3Date, v))
}

// AbgescBild3Datehickt applies equality check predicate on the "AbgescBild3Datehickt" field. It's identical to AbgescBild3DatehicktEQ.
func AbgescBild3Datehickt(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldAbgescBild3Datehickt, v))
}

// NameEQ applies the EQ predicate on the "Name" field.
func NameEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "Name" field.
func NameNEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "Name" field.
func NameIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "Name" field.
func NameNotIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "Name" field.
func NameGT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "Name" field.
func NameGTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "Name" field.
func NameLT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "Name" field.
func NameLTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "Name" field.
func NameContains(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "Name" field.
func NameHasPrefix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "Name" field.
func NameHasSuffix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "Name" field.
func NameEqualFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "Name" field.
func NameContainsFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContainsFold(FieldName, v))
}

// ShortEQ applies the EQ predicate on the "Short" field.
func ShortEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldShort, v))
}

// ShortNEQ applies the NEQ predicate on the "Short" field.
func ShortNEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldShort, v))
}

// ShortIn applies the In predicate on the "Short" field.
func ShortIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIn(FieldShort, vs...))
}

// ShortNotIn applies the NotIn predicate on the "Short" field.
func ShortNotIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotIn(FieldShort, vs...))
}

// ShortGT applies the GT predicate on the "Short" field.
func ShortGT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGT(FieldShort, v))
}

// ShortGTE applies the GTE predicate on the "Short" field.
func ShortGTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGTE(FieldShort, v))
}

// ShortLT applies the LT predicate on the "Short" field.
func ShortLT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLT(FieldShort, v))
}

// ShortLTE applies the LTE predicate on the "Short" field.
func ShortLTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLTE(FieldShort, v))
}

// ShortContains applies the Contains predicate on the "Short" field.
func ShortContains(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContains(FieldShort, v))
}

// ShortHasPrefix applies the HasPrefix predicate on the "Short" field.
func ShortHasPrefix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasPrefix(FieldShort, v))
}

// ShortHasSuffix applies the HasSuffix predicate on the "Short" field.
func ShortHasSuffix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasSuffix(FieldShort, v))
}

// ShortEqualFold applies the EqualFold predicate on the "Short" field.
func ShortEqualFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEqualFold(FieldShort, v))
}

// ShortContainsFold applies the ContainsFold predicate on the "Short" field.
func ShortContainsFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContainsFold(FieldShort, v))
}

// GruppenwahlEQ applies the EQ predicate on the "Gruppenwahl" field.
func GruppenwahlEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldGruppenwahl, v))
}

// GruppenwahlNEQ applies the NEQ predicate on the "Gruppenwahl" field.
func GruppenwahlNEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldGruppenwahl, v))
}

// GruppenwahlIn applies the In predicate on the "Gruppenwahl" field.
func GruppenwahlIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIn(FieldGruppenwahl, vs...))
}

// GruppenwahlNotIn applies the NotIn predicate on the "Gruppenwahl" field.
func GruppenwahlNotIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotIn(FieldGruppenwahl, vs...))
}

// GruppenwahlGT applies the GT predicate on the "Gruppenwahl" field.
func GruppenwahlGT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGT(FieldGruppenwahl, v))
}

// GruppenwahlGTE applies the GTE predicate on the "Gruppenwahl" field.
func GruppenwahlGTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGTE(FieldGruppenwahl, v))
}

// GruppenwahlLT applies the LT predicate on the "Gruppenwahl" field.
func GruppenwahlLT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLT(FieldGruppenwahl, v))
}

// GruppenwahlLTE applies the LTE predicate on the "Gruppenwahl" field.
func GruppenwahlLTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLTE(FieldGruppenwahl, v))
}

// GruppenwahlContains applies the Contains predicate on the "Gruppenwahl" field.
func GruppenwahlContains(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContains(FieldGruppenwahl, v))
}

// GruppenwahlHasPrefix applies the HasPrefix predicate on the "Gruppenwahl" field.
func GruppenwahlHasPrefix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasPrefix(FieldGruppenwahl, v))
}

// GruppenwahlHasSuffix applies the HasSuffix predicate on the "Gruppenwahl" field.
func GruppenwahlHasSuffix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasSuffix(FieldGruppenwahl, v))
}

// GruppenwahlEqualFold applies the EqualFold predicate on the "Gruppenwahl" field.
func GruppenwahlEqualFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEqualFold(FieldGruppenwahl, v))
}

// GruppenwahlContainsFold applies the ContainsFold predicate on the "Gruppenwahl" field.
func GruppenwahlContainsFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContainsFold(FieldGruppenwahl, v))
}

// InternTelefon1EQ applies the EQ predicate on the "InternTelefon1" field.
func InternTelefon1EQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldInternTelefon1, v))
}

// InternTelefon1NEQ applies the NEQ predicate on the "InternTelefon1" field.
func InternTelefon1NEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldInternTelefon1, v))
}

// InternTelefon1In applies the In predicate on the "InternTelefon1" field.
func InternTelefon1In(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIn(FieldInternTelefon1, vs...))
}

// InternTelefon1NotIn applies the NotIn predicate on the "InternTelefon1" field.
func InternTelefon1NotIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotIn(FieldInternTelefon1, vs...))
}

// InternTelefon1GT applies the GT predicate on the "InternTelefon1" field.
func InternTelefon1GT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGT(FieldInternTelefon1, v))
}

// InternTelefon1GTE applies the GTE predicate on the "InternTelefon1" field.
func InternTelefon1GTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGTE(FieldInternTelefon1, v))
}

// InternTelefon1LT applies the LT predicate on the "InternTelefon1" field.
func InternTelefon1LT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLT(FieldInternTelefon1, v))
}

// InternTelefon1LTE applies the LTE predicate on the "InternTelefon1" field.
func InternTelefon1LTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLTE(FieldInternTelefon1, v))
}

// InternTelefon1Contains applies the Contains predicate on the "InternTelefon1" field.
func InternTelefon1Contains(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContains(FieldInternTelefon1, v))
}

// InternTelefon1HasPrefix applies the HasPrefix predicate on the "InternTelefon1" field.
func InternTelefon1HasPrefix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasPrefix(FieldInternTelefon1, v))
}

// InternTelefon1HasSuffix applies the HasSuffix predicate on the "InternTelefon1" field.
func InternTelefon1HasSuffix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasSuffix(FieldInternTelefon1, v))
}

// InternTelefon1EqualFold applies the EqualFold predicate on the "InternTelefon1" field.
func InternTelefon1EqualFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEqualFold(FieldInternTelefon1, v))
}

// InternTelefon1ContainsFold applies the ContainsFold predicate on the "InternTelefon1" field.
func InternTelefon1ContainsFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContainsFold(FieldInternTelefon1, v))
}

// InternTelefon2EQ applies the EQ predicate on the "InternTelefon2" field.
func InternTelefon2EQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldInternTelefon2, v))
}

// InternTelefon2NEQ applies the NEQ predicate on the "InternTelefon2" field.
func InternTelefon2NEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldInternTelefon2, v))
}

// InternTelefon2In applies the In predicate on the "InternTelefon2" field.
func InternTelefon2In(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIn(FieldInternTelefon2, vs...))
}

// InternTelefon2NotIn applies the NotIn predicate on the "InternTelefon2" field.
func InternTelefon2NotIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotIn(FieldInternTelefon2, vs...))
}

// InternTelefon2GT applies the GT predicate on the "InternTelefon2" field.
func InternTelefon2GT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGT(FieldInternTelefon2, v))
}

// InternTelefon2GTE applies the GTE predicate on the "InternTelefon2" field.
func InternTelefon2GTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGTE(FieldInternTelefon2, v))
}

// InternTelefon2LT applies the LT predicate on the "InternTelefon2" field.
func InternTelefon2LT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLT(FieldInternTelefon2, v))
}

// InternTelefon2LTE applies the LTE predicate on the "InternTelefon2" field.
func InternTelefon2LTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLTE(FieldInternTelefon2, v))
}

// InternTelefon2Contains applies the Contains predicate on the "InternTelefon2" field.
func InternTelefon2Contains(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContains(FieldInternTelefon2, v))
}

// InternTelefon2HasPrefix applies the HasPrefix predicate on the "InternTelefon2" field.
func InternTelefon2HasPrefix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasPrefix(FieldInternTelefon2, v))
}

// InternTelefon2HasSuffix applies the HasSuffix predicate on the "InternTelefon2" field.
func InternTelefon2HasSuffix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasSuffix(FieldInternTelefon2, v))
}

// InternTelefon2EqualFold applies the EqualFold predicate on the "InternTelefon2" field.
func InternTelefon2EqualFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEqualFold(FieldInternTelefon2, v))
}

// InternTelefon2ContainsFold applies the ContainsFold predicate on the "InternTelefon2" field.
func InternTelefon2ContainsFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContainsFold(FieldInternTelefon2, v))
}

// FestnetzPrivatEQ applies the EQ predicate on the "FestnetzPrivat" field.
func FestnetzPrivatEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldFestnetzPrivat, v))
}

// FestnetzPrivatNEQ applies the NEQ predicate on the "FestnetzPrivat" field.
func FestnetzPrivatNEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldFestnetzPrivat, v))
}

// FestnetzPrivatIn applies the In predicate on the "FestnetzPrivat" field.
func FestnetzPrivatIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIn(FieldFestnetzPrivat, vs...))
}

// FestnetzPrivatNotIn applies the NotIn predicate on the "FestnetzPrivat" field.
func FestnetzPrivatNotIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotIn(FieldFestnetzPrivat, vs...))
}

// FestnetzPrivatGT applies the GT predicate on the "FestnetzPrivat" field.
func FestnetzPrivatGT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGT(FieldFestnetzPrivat, v))
}

// FestnetzPrivatGTE applies the GTE predicate on the "FestnetzPrivat" field.
func FestnetzPrivatGTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGTE(FieldFestnetzPrivat, v))
}

// FestnetzPrivatLT applies the LT predicate on the "FestnetzPrivat" field.
func FestnetzPrivatLT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLT(FieldFestnetzPrivat, v))
}

// FestnetzPrivatLTE applies the LTE predicate on the "FestnetzPrivat" field.
func FestnetzPrivatLTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLTE(FieldFestnetzPrivat, v))
}

// FestnetzPrivatContains applies the Contains predicate on the "FestnetzPrivat" field.
func FestnetzPrivatContains(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContains(FieldFestnetzPrivat, v))
}

// FestnetzPrivatHasPrefix applies the HasPrefix predicate on the "FestnetzPrivat" field.
func FestnetzPrivatHasPrefix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasPrefix(FieldFestnetzPrivat, v))
}

// FestnetzPrivatHasSuffix applies the HasSuffix predicate on the "FestnetzPrivat" field.
func FestnetzPrivatHasSuffix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasSuffix(FieldFestnetzPrivat, v))
}

// FestnetzPrivatEqualFold applies the EqualFold predicate on the "FestnetzPrivat" field.
func FestnetzPrivatEqualFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEqualFold(FieldFestnetzPrivat, v))
}

// FestnetzPrivatContainsFold applies the ContainsFold predicate on the "FestnetzPrivat" field.
func FestnetzPrivatContainsFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContainsFold(FieldFestnetzPrivat, v))
}

// FestnetzAlternativEQ applies the EQ predicate on the "FestnetzAlternativ" field.
func FestnetzAlternativEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldFestnetzAlternativ, v))
}

// FestnetzAlternativNEQ applies the NEQ predicate on the "FestnetzAlternativ" field.
func FestnetzAlternativNEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldFestnetzAlternativ, v))
}

// FestnetzAlternativIn applies the In predicate on the "FestnetzAlternativ" field.
func FestnetzAlternativIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIn(FieldFestnetzAlternativ, vs...))
}

// FestnetzAlternativNotIn applies the NotIn predicate on the "FestnetzAlternativ" field.
func FestnetzAlternativNotIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotIn(FieldFestnetzAlternativ, vs...))
}

// FestnetzAlternativGT applies the GT predicate on the "FestnetzAlternativ" field.
func FestnetzAlternativGT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGT(FieldFestnetzAlternativ, v))
}

// FestnetzAlternativGTE applies the GTE predicate on the "FestnetzAlternativ" field.
func FestnetzAlternativGTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGTE(FieldFestnetzAlternativ, v))
}

// FestnetzAlternativLT applies the LT predicate on the "FestnetzAlternativ" field.
func FestnetzAlternativLT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLT(FieldFestnetzAlternativ, v))
}

// FestnetzAlternativLTE applies the LTE predicate on the "FestnetzAlternativ" field.
func FestnetzAlternativLTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLTE(FieldFestnetzAlternativ, v))
}

// FestnetzAlternativContains applies the Contains predicate on the "FestnetzAlternativ" field.
func FestnetzAlternativContains(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContains(FieldFestnetzAlternativ, v))
}

// FestnetzAlternativHasPrefix applies the HasPrefix predicate on the "FestnetzAlternativ" field.
func FestnetzAlternativHasPrefix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasPrefix(FieldFestnetzAlternativ, v))
}

// FestnetzAlternativHasSuffix applies the HasSuffix predicate on the "FestnetzAlternativ" field.
func FestnetzAlternativHasSuffix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasSuffix(FieldFestnetzAlternativ, v))
}

// FestnetzAlternativEqualFold applies the EqualFold predicate on the "FestnetzAlternativ" field.
func FestnetzAlternativEqualFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEqualFold(FieldFestnetzAlternativ, v))
}

// FestnetzAlternativContainsFold applies the ContainsFold predicate on the "FestnetzAlternativ" field.
func FestnetzAlternativContainsFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContainsFold(FieldFestnetzAlternativ, v))
}

// HomeOfficeEQ applies the EQ predicate on the "HomeOffice" field.
func HomeOfficeEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldHomeOffice, v))
}

// HomeOfficeNEQ applies the NEQ predicate on the "HomeOffice" field.
func HomeOfficeNEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldHomeOffice, v))
}

// HomeOfficeIn applies the In predicate on the "HomeOffice" field.
func HomeOfficeIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIn(FieldHomeOffice, vs...))
}

// HomeOfficeNotIn applies the NotIn predicate on the "HomeOffice" field.
func HomeOfficeNotIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotIn(FieldHomeOffice, vs...))
}

// HomeOfficeGT applies the GT predicate on the "HomeOffice" field.
func HomeOfficeGT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGT(FieldHomeOffice, v))
}

// HomeOfficeGTE applies the GTE predicate on the "HomeOffice" field.
func HomeOfficeGTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGTE(FieldHomeOffice, v))
}

// HomeOfficeLT applies the LT predicate on the "HomeOffice" field.
func HomeOfficeLT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLT(FieldHomeOffice, v))
}

// HomeOfficeLTE applies the LTE predicate on the "HomeOffice" field.
func HomeOfficeLTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLTE(FieldHomeOffice, v))
}

// HomeOfficeContains applies the Contains predicate on the "HomeOffice" field.
func HomeOfficeContains(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContains(FieldHomeOffice, v))
}

// HomeOfficeHasPrefix applies the HasPrefix predicate on the "HomeOffice" field.
func HomeOfficeHasPrefix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasPrefix(FieldHomeOffice, v))
}

// HomeOfficeHasSuffix applies the HasSuffix predicate on the "HomeOffice" field.
func HomeOfficeHasSuffix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasSuffix(FieldHomeOffice, v))
}

// HomeOfficeEqualFold applies the EqualFold predicate on the "HomeOffice" field.
func HomeOfficeEqualFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEqualFold(FieldHomeOffice, v))
}

// HomeOfficeContainsFold applies the ContainsFold predicate on the "HomeOffice" field.
func HomeOfficeContainsFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContainsFold(FieldHomeOffice, v))
}

// MobilBusinessEQ applies the EQ predicate on the "MobilBusiness" field.
func MobilBusinessEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldMobilBusiness, v))
}

// MobilBusinessNEQ applies the NEQ predicate on the "MobilBusiness" field.
func MobilBusinessNEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldMobilBusiness, v))
}

// MobilBusinessIn applies the In predicate on the "MobilBusiness" field.
func MobilBusinessIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIn(FieldMobilBusiness, vs...))
}

// MobilBusinessNotIn applies the NotIn predicate on the "MobilBusiness" field.
func MobilBusinessNotIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotIn(FieldMobilBusiness, vs...))
}

// MobilBusinessGT applies the GT predicate on the "MobilBusiness" field.
func MobilBusinessGT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGT(FieldMobilBusiness, v))
}

// MobilBusinessGTE applies the GTE predicate on the "MobilBusiness" field.
func MobilBusinessGTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGTE(FieldMobilBusiness, v))
}

// MobilBusinessLT applies the LT predicate on the "MobilBusiness" field.
func MobilBusinessLT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLT(FieldMobilBusiness, v))
}

// MobilBusinessLTE applies the LTE predicate on the "MobilBusiness" field.
func MobilBusinessLTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLTE(FieldMobilBusiness, v))
}

// MobilBusinessContains applies the Contains predicate on the "MobilBusiness" field.
func MobilBusinessContains(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContains(FieldMobilBusiness, v))
}

// MobilBusinessHasPrefix applies the HasPrefix predicate on the "MobilBusiness" field.
func MobilBusinessHasPrefix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasPrefix(FieldMobilBusiness, v))
}

// MobilBusinessHasSuffix applies the HasSuffix predicate on the "MobilBusiness" field.
func MobilBusinessHasSuffix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasSuffix(FieldMobilBusiness, v))
}

// MobilBusinessEqualFold applies the EqualFold predicate on the "MobilBusiness" field.
func MobilBusinessEqualFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEqualFold(FieldMobilBusiness, v))
}

// MobilBusinessContainsFold applies the ContainsFold predicate on the "MobilBusiness" field.
func MobilBusinessContainsFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContainsFold(FieldMobilBusiness, v))
}

// MobilPrivatEQ applies the EQ predicate on the "MobilPrivat" field.
func MobilPrivatEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldMobilPrivat, v))
}

// MobilPrivatNEQ applies the NEQ predicate on the "MobilPrivat" field.
func MobilPrivatNEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldMobilPrivat, v))
}

// MobilPrivatIn applies the In predicate on the "MobilPrivat" field.
func MobilPrivatIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIn(FieldMobilPrivat, vs...))
}

// MobilPrivatNotIn applies the NotIn predicate on the "MobilPrivat" field.
func MobilPrivatNotIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotIn(FieldMobilPrivat, vs...))
}

// MobilPrivatGT applies the GT predicate on the "MobilPrivat" field.
func MobilPrivatGT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGT(FieldMobilPrivat, v))
}

// MobilPrivatGTE applies the GTE predicate on the "MobilPrivat" field.
func MobilPrivatGTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGTE(FieldMobilPrivat, v))
}

// MobilPrivatLT applies the LT predicate on the "MobilPrivat" field.
func MobilPrivatLT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLT(FieldMobilPrivat, v))
}

// MobilPrivatLTE applies the LTE predicate on the "MobilPrivat" field.
func MobilPrivatLTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLTE(FieldMobilPrivat, v))
}

// MobilPrivatContains applies the Contains predicate on the "MobilPrivat" field.
func MobilPrivatContains(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContains(FieldMobilPrivat, v))
}

// MobilPrivatHasPrefix applies the HasPrefix predicate on the "MobilPrivat" field.
func MobilPrivatHasPrefix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasPrefix(FieldMobilPrivat, v))
}

// MobilPrivatHasSuffix applies the HasSuffix predicate on the "MobilPrivat" field.
func MobilPrivatHasSuffix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasSuffix(FieldMobilPrivat, v))
}

// MobilPrivatEqualFold applies the EqualFold predicate on the "MobilPrivat" field.
func MobilPrivatEqualFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEqualFold(FieldMobilPrivat, v))
}

// MobilPrivatContainsFold applies the ContainsFold predicate on the "MobilPrivat" field.
func MobilPrivatContainsFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContainsFold(FieldMobilPrivat, v))
}

// EmailEQ applies the EQ predicate on the "Email" field.
func EmailEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "Email" field.
func EmailNEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "Email" field.
func EmailIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "Email" field.
func EmailNotIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "Email" field.
func EmailGT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "Email" field.
func EmailGTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "Email" field.
func EmailLT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "Email" field.
func EmailLTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "Email" field.
func EmailContains(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "Email" field.
func EmailHasPrefix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "Email" field.
func EmailHasSuffix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "Email" field.
func EmailEqualFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "Email" field.
func EmailContainsFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContainsFold(FieldEmail, v))
}

// AzubiEQ applies the EQ predicate on the "Azubi" field.
func AzubiEQ(v bool) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldAzubi, v))
}

// AzubiNEQ applies the NEQ predicate on the "Azubi" field.
func AzubiNEQ(v bool) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldAzubi, v))
}

// GeburtstagEQ applies the EQ predicate on the "Geburtstag" field.
func GeburtstagEQ(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldGeburtstag, v))
}

// GeburtstagNEQ applies the NEQ predicate on the "Geburtstag" field.
func GeburtstagNEQ(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldGeburtstag, v))
}

// GeburtstagIn applies the In predicate on the "Geburtstag" field.
func GeburtstagIn(vs ...time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIn(FieldGeburtstag, vs...))
}

// GeburtstagNotIn applies the NotIn predicate on the "Geburtstag" field.
func GeburtstagNotIn(vs ...time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotIn(FieldGeburtstag, vs...))
}

// GeburtstagGT applies the GT predicate on the "Geburtstag" field.
func GeburtstagGT(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGT(FieldGeburtstag, v))
}

// GeburtstagGTE applies the GTE predicate on the "Geburtstag" field.
func GeburtstagGTE(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGTE(FieldGeburtstag, v))
}

// GeburtstagLT applies the LT predicate on the "Geburtstag" field.
func GeburtstagLT(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLT(FieldGeburtstag, v))
}

// GeburtstagLTE applies the LTE predicate on the "Geburtstag" field.
func GeburtstagLTE(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLTE(FieldGeburtstag, v))
}

// PaypalEQ applies the EQ predicate on the "Paypal" field.
func PaypalEQ(v bool) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldPaypal, v))
}

// PaypalNEQ applies the NEQ predicate on the "Paypal" field.
func PaypalNEQ(v bool) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldPaypal, v))
}

// AbonniertEQ applies the EQ predicate on the "Abonniert" field.
func AbonniertEQ(v bool) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldAbonniert, v))
}

// AbonniertNEQ applies the NEQ predicate on the "Abonniert" field.
func AbonniertNEQ(v bool) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldAbonniert, v))
}

// GeldEQ applies the EQ predicate on the "Geld" field.
func GeldEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldGeld, v))
}

// GeldNEQ applies the NEQ predicate on the "Geld" field.
func GeldNEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldGeld, v))
}

// GeldIn applies the In predicate on the "Geld" field.
func GeldIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIn(FieldGeld, vs...))
}

// GeldNotIn applies the NotIn predicate on the "Geld" field.
func GeldNotIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotIn(FieldGeld, vs...))
}

// GeldGT applies the GT predicate on the "Geld" field.
func GeldGT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGT(FieldGeld, v))
}

// GeldGTE applies the GTE predicate on the "Geld" field.
func GeldGTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGTE(FieldGeld, v))
}

// GeldLT applies the LT predicate on the "Geld" field.
func GeldLT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLT(FieldGeld, v))
}

// GeldLTE applies the LTE predicate on the "Geld" field.
func GeldLTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLTE(FieldGeld, v))
}

// GeldContains applies the Contains predicate on the "Geld" field.
func GeldContains(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContains(FieldGeld, v))
}

// GeldHasPrefix applies the HasPrefix predicate on the "Geld" field.
func GeldHasPrefix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasPrefix(FieldGeld, v))
}

// GeldHasSuffix applies the HasSuffix predicate on the "Geld" field.
func GeldHasSuffix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasSuffix(FieldGeld, v))
}

// GeldEqualFold applies the EqualFold predicate on the "Geld" field.
func GeldEqualFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEqualFold(FieldGeld, v))
}

// GeldContainsFold applies the ContainsFold predicate on the "Geld" field.
func GeldContainsFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContainsFold(FieldGeld, v))
}

// PfandEQ applies the EQ predicate on the "Pfand" field.
func PfandEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldPfand, v))
}

// PfandNEQ applies the NEQ predicate on the "Pfand" field.
func PfandNEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldPfand, v))
}

// PfandIn applies the In predicate on the "Pfand" field.
func PfandIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIn(FieldPfand, vs...))
}

// PfandNotIn applies the NotIn predicate on the "Pfand" field.
func PfandNotIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotIn(FieldPfand, vs...))
}

// PfandGT applies the GT predicate on the "Pfand" field.
func PfandGT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGT(FieldPfand, v))
}

// PfandGTE applies the GTE predicate on the "Pfand" field.
func PfandGTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGTE(FieldPfand, v))
}

// PfandLT applies the LT predicate on the "Pfand" field.
func PfandLT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLT(FieldPfand, v))
}

// PfandLTE applies the LTE predicate on the "Pfand" field.
func PfandLTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLTE(FieldPfand, v))
}

// PfandContains applies the Contains predicate on the "Pfand" field.
func PfandContains(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContains(FieldPfand, v))
}

// PfandHasPrefix applies the HasPrefix predicate on the "Pfand" field.
func PfandHasPrefix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasPrefix(FieldPfand, v))
}

// PfandHasSuffix applies the HasSuffix predicate on the "Pfand" field.
func PfandHasSuffix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasSuffix(FieldPfand, v))
}

// PfandEqualFold applies the EqualFold predicate on the "Pfand" field.
func PfandEqualFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEqualFold(FieldPfand, v))
}

// PfandContainsFold applies the ContainsFold predicate on the "Pfand" field.
func PfandContainsFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContainsFold(FieldPfand, v))
}

// DingeEQ applies the EQ predicate on the "Dinge" field.
func DingeEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldDinge, v))
}

// DingeNEQ applies the NEQ predicate on the "Dinge" field.
func DingeNEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldDinge, v))
}

// DingeIn applies the In predicate on the "Dinge" field.
func DingeIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIn(FieldDinge, vs...))
}

// DingeNotIn applies the NotIn predicate on the "Dinge" field.
func DingeNotIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotIn(FieldDinge, vs...))
}

// DingeGT applies the GT predicate on the "Dinge" field.
func DingeGT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGT(FieldDinge, v))
}

// DingeGTE applies the GTE predicate on the "Dinge" field.
func DingeGTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGTE(FieldDinge, v))
}

// DingeLT applies the LT predicate on the "Dinge" field.
func DingeLT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLT(FieldDinge, v))
}

// DingeLTE applies the LTE predicate on the "Dinge" field.
func DingeLTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLTE(FieldDinge, v))
}

// DingeContains applies the Contains predicate on the "Dinge" field.
func DingeContains(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContains(FieldDinge, v))
}

// DingeHasPrefix applies the HasPrefix predicate on the "Dinge" field.
func DingeHasPrefix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasPrefix(FieldDinge, v))
}

// DingeHasSuffix applies the HasSuffix predicate on the "Dinge" field.
func DingeHasSuffix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasSuffix(FieldDinge, v))
}

// DingeEqualFold applies the EqualFold predicate on the "Dinge" field.
func DingeEqualFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEqualFold(FieldDinge, v))
}

// DingeContainsFold applies the ContainsFold predicate on the "Dinge" field.
func DingeContainsFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContainsFold(FieldDinge, v))
}

// AbgeschicktEQ applies the EQ predicate on the "Abgeschickt" field.
func AbgeschicktEQ(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldAbgeschickt, v))
}

// AbgeschicktNEQ applies the NEQ predicate on the "Abgeschickt" field.
func AbgeschicktNEQ(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldAbgeschickt, v))
}

// AbgeschicktIn applies the In predicate on the "Abgeschickt" field.
func AbgeschicktIn(vs ...time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIn(FieldAbgeschickt, vs...))
}

// AbgeschicktNotIn applies the NotIn predicate on the "Abgeschickt" field.
func AbgeschicktNotIn(vs ...time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotIn(FieldAbgeschickt, vs...))
}

// AbgeschicktGT applies the GT predicate on the "Abgeschickt" field.
func AbgeschicktGT(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGT(FieldAbgeschickt, v))
}

// AbgeschicktGTE applies the GTE predicate on the "Abgeschickt" field.
func AbgeschicktGTE(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGTE(FieldAbgeschickt, v))
}

// AbgeschicktLT applies the LT predicate on the "Abgeschickt" field.
func AbgeschicktLT(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLT(FieldAbgeschickt, v))
}

// AbgeschicktLTE applies the LTE predicate on the "Abgeschickt" field.
func AbgeschicktLTE(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLTE(FieldAbgeschickt, v))
}

// Bild1EQ applies the EQ predicate on the "Bild1" field.
func Bild1EQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldBild1, v))
}

// Bild1NEQ applies the NEQ predicate on the "Bild1" field.
func Bild1NEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldBild1, v))
}

// Bild1In applies the In predicate on the "Bild1" field.
func Bild1In(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIn(FieldBild1, vs...))
}

// Bild1NotIn applies the NotIn predicate on the "Bild1" field.
func Bild1NotIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotIn(FieldBild1, vs...))
}

// Bild1GT applies the GT predicate on the "Bild1" field.
func Bild1GT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGT(FieldBild1, v))
}

// Bild1GTE applies the GTE predicate on the "Bild1" field.
func Bild1GTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGTE(FieldBild1, v))
}

// Bild1LT applies the LT predicate on the "Bild1" field.
func Bild1LT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLT(FieldBild1, v))
}

// Bild1LTE applies the LTE predicate on the "Bild1" field.
func Bild1LTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLTE(FieldBild1, v))
}

// Bild1Contains applies the Contains predicate on the "Bild1" field.
func Bild1Contains(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContains(FieldBild1, v))
}

// Bild1HasPrefix applies the HasPrefix predicate on the "Bild1" field.
func Bild1HasPrefix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasPrefix(FieldBild1, v))
}

// Bild1HasSuffix applies the HasSuffix predicate on the "Bild1" field.
func Bild1HasSuffix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasSuffix(FieldBild1, v))
}

// Bild1EqualFold applies the EqualFold predicate on the "Bild1" field.
func Bild1EqualFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEqualFold(FieldBild1, v))
}

// Bild1ContainsFold applies the ContainsFold predicate on the "Bild1" field.
func Bild1ContainsFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContainsFold(FieldBild1, v))
}

// Bild2EQ applies the EQ predicate on the "Bild2" field.
func Bild2EQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldBild2, v))
}

// Bild2NEQ applies the NEQ predicate on the "Bild2" field.
func Bild2NEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldBild2, v))
}

// Bild2In applies the In predicate on the "Bild2" field.
func Bild2In(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIn(FieldBild2, vs...))
}

// Bild2NotIn applies the NotIn predicate on the "Bild2" field.
func Bild2NotIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotIn(FieldBild2, vs...))
}

// Bild2GT applies the GT predicate on the "Bild2" field.
func Bild2GT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGT(FieldBild2, v))
}

// Bild2GTE applies the GTE predicate on the "Bild2" field.
func Bild2GTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGTE(FieldBild2, v))
}

// Bild2LT applies the LT predicate on the "Bild2" field.
func Bild2LT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLT(FieldBild2, v))
}

// Bild2LTE applies the LTE predicate on the "Bild2" field.
func Bild2LTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLTE(FieldBild2, v))
}

// Bild2Contains applies the Contains predicate on the "Bild2" field.
func Bild2Contains(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContains(FieldBild2, v))
}

// Bild2HasPrefix applies the HasPrefix predicate on the "Bild2" field.
func Bild2HasPrefix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasPrefix(FieldBild2, v))
}

// Bild2HasSuffix applies the HasSuffix predicate on the "Bild2" field.
func Bild2HasSuffix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasSuffix(FieldBild2, v))
}

// Bild2EqualFold applies the EqualFold predicate on the "Bild2" field.
func Bild2EqualFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEqualFold(FieldBild2, v))
}

// Bild2ContainsFold applies the ContainsFold predicate on the "Bild2" field.
func Bild2ContainsFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContainsFold(FieldBild2, v))
}

// Bild3EQ applies the EQ predicate on the "Bild3" field.
func Bild3EQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldBild3, v))
}

// Bild3NEQ applies the NEQ predicate on the "Bild3" field.
func Bild3NEQ(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldBild3, v))
}

// Bild3In applies the In predicate on the "Bild3" field.
func Bild3In(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIn(FieldBild3, vs...))
}

// Bild3NotIn applies the NotIn predicate on the "Bild3" field.
func Bild3NotIn(vs ...string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotIn(FieldBild3, vs...))
}

// Bild3GT applies the GT predicate on the "Bild3" field.
func Bild3GT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGT(FieldBild3, v))
}

// Bild3GTE applies the GTE predicate on the "Bild3" field.
func Bild3GTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGTE(FieldBild3, v))
}

// Bild3LT applies the LT predicate on the "Bild3" field.
func Bild3LT(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLT(FieldBild3, v))
}

// Bild3LTE applies the LTE predicate on the "Bild3" field.
func Bild3LTE(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLTE(FieldBild3, v))
}

// Bild3Contains applies the Contains predicate on the "Bild3" field.
func Bild3Contains(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContains(FieldBild3, v))
}

// Bild3HasPrefix applies the HasPrefix predicate on the "Bild3" field.
func Bild3HasPrefix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasPrefix(FieldBild3, v))
}

// Bild3HasSuffix applies the HasSuffix predicate on the "Bild3" field.
func Bild3HasSuffix(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldHasSuffix(FieldBild3, v))
}

// Bild3EqualFold applies the EqualFold predicate on the "Bild3" field.
func Bild3EqualFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEqualFold(FieldBild3, v))
}

// Bild3ContainsFold applies the ContainsFold predicate on the "Bild3" field.
func Bild3ContainsFold(v string) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldContainsFold(FieldBild3, v))
}

// Bild1DateEQ applies the EQ predicate on the "Bild1Date" field.
func Bild1DateEQ(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldBild1Date, v))
}

// Bild1DateNEQ applies the NEQ predicate on the "Bild1Date" field.
func Bild1DateNEQ(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldBild1Date, v))
}

// Bild1DateIn applies the In predicate on the "Bild1Date" field.
func Bild1DateIn(vs ...time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIn(FieldBild1Date, vs...))
}

// Bild1DateNotIn applies the NotIn predicate on the "Bild1Date" field.
func Bild1DateNotIn(vs ...time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotIn(FieldBild1Date, vs...))
}

// Bild1DateGT applies the GT predicate on the "Bild1Date" field.
func Bild1DateGT(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGT(FieldBild1Date, v))
}

// Bild1DateGTE applies the GTE predicate on the "Bild1Date" field.
func Bild1DateGTE(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGTE(FieldBild1Date, v))
}

// Bild1DateLT applies the LT predicate on the "Bild1Date" field.
func Bild1DateLT(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLT(FieldBild1Date, v))
}

// Bild1DateLTE applies the LTE predicate on the "Bild1Date" field.
func Bild1DateLTE(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLTE(FieldBild1Date, v))
}

// Bild2DateEQ applies the EQ predicate on the "Bild2Date" field.
func Bild2DateEQ(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldBild2Date, v))
}

// Bild2DateNEQ applies the NEQ predicate on the "Bild2Date" field.
func Bild2DateNEQ(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldBild2Date, v))
}

// Bild2DateIn applies the In predicate on the "Bild2Date" field.
func Bild2DateIn(vs ...time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIn(FieldBild2Date, vs...))
}

// Bild2DateNotIn applies the NotIn predicate on the "Bild2Date" field.
func Bild2DateNotIn(vs ...time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotIn(FieldBild2Date, vs...))
}

// Bild2DateGT applies the GT predicate on the "Bild2Date" field.
func Bild2DateGT(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGT(FieldBild2Date, v))
}

// Bild2DateGTE applies the GTE predicate on the "Bild2Date" field.
func Bild2DateGTE(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGTE(FieldBild2Date, v))
}

// Bild2DateLT applies the LT predicate on the "Bild2Date" field.
func Bild2DateLT(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLT(FieldBild2Date, v))
}

// Bild2DateLTE applies the LTE predicate on the "Bild2Date" field.
func Bild2DateLTE(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLTE(FieldBild2Date, v))
}

// Bild3DateEQ applies the EQ predicate on the "Bild3Date" field.
func Bild3DateEQ(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldBild3Date, v))
}

// Bild3DateNEQ applies the NEQ predicate on the "Bild3Date" field.
func Bild3DateNEQ(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldBild3Date, v))
}

// Bild3DateIn applies the In predicate on the "Bild3Date" field.
func Bild3DateIn(vs ...time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIn(FieldBild3Date, vs...))
}

// Bild3DateNotIn applies the NotIn predicate on the "Bild3Date" field.
func Bild3DateNotIn(vs ...time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotIn(FieldBild3Date, vs...))
}

// Bild3DateGT applies the GT predicate on the "Bild3Date" field.
func Bild3DateGT(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGT(FieldBild3Date, v))
}

// Bild3DateGTE applies the GTE predicate on the "Bild3Date" field.
func Bild3DateGTE(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGTE(FieldBild3Date, v))
}

// Bild3DateLT applies the LT predicate on the "Bild3Date" field.
func Bild3DateLT(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLT(FieldBild3Date, v))
}

// Bild3DateLTE applies the LTE predicate on the "Bild3Date" field.
func Bild3DateLTE(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLTE(FieldBild3Date, v))
}

// AbgescBild3DatehicktEQ applies the EQ predicate on the "AbgescBild3Datehickt" field.
func AbgescBild3DatehicktEQ(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldEQ(FieldAbgescBild3Datehickt, v))
}

// AbgescBild3DatehicktNEQ applies the NEQ predicate on the "AbgescBild3Datehickt" field.
func AbgescBild3DatehicktNEQ(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNEQ(FieldAbgescBild3Datehickt, v))
}

// AbgescBild3DatehicktIn applies the In predicate on the "AbgescBild3Datehickt" field.
func AbgescBild3DatehicktIn(vs ...time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldIn(FieldAbgescBild3Datehickt, vs...))
}

// AbgescBild3DatehicktNotIn applies the NotIn predicate on the "AbgescBild3Datehickt" field.
func AbgescBild3DatehicktNotIn(vs ...time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldNotIn(FieldAbgescBild3Datehickt, vs...))
}

// AbgescBild3DatehicktGT applies the GT predicate on the "AbgescBild3Datehickt" field.
func AbgescBild3DatehicktGT(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGT(FieldAbgescBild3Datehickt, v))
}

// AbgescBild3DatehicktGTE applies the GTE predicate on the "AbgescBild3Datehickt" field.
func AbgescBild3DatehicktGTE(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldGTE(FieldAbgescBild3Datehickt, v))
}

// AbgescBild3DatehicktLT applies the LT predicate on the "AbgescBild3Datehickt" field.
func AbgescBild3DatehicktLT(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLT(FieldAbgescBild3Datehickt, v))
}

// AbgescBild3DatehicktLTE applies the LTE predicate on the "AbgescBild3Datehickt" field.
func AbgescBild3DatehicktLTE(v time.Time) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.FieldLTE(FieldAbgescBild3Datehickt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Mitarbeiter) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Mitarbeiter) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Mitarbeiter) predicate.Mitarbeiter {
	return predicate.Mitarbeiter(sql.NotPredicates(p))
}
