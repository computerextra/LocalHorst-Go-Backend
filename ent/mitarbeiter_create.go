// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"golang-backend/ent/mitarbeiter"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MitarbeiterCreate is the builder for creating a Mitarbeiter entity.
type MitarbeiterCreate struct {
	config
	mutation *MitarbeiterMutation
	hooks    []Hook
}

// SetName sets the "Name" field.
func (mc *MitarbeiterCreate) SetName(s string) *MitarbeiterCreate {
	mc.mutation.SetName(s)
	return mc
}

// SetShort sets the "Short" field.
func (mc *MitarbeiterCreate) SetShort(s string) *MitarbeiterCreate {
	mc.mutation.SetShort(s)
	return mc
}

// SetGruppenwahl sets the "Gruppenwahl" field.
func (mc *MitarbeiterCreate) SetGruppenwahl(s string) *MitarbeiterCreate {
	mc.mutation.SetGruppenwahl(s)
	return mc
}

// SetInternTelefon1 sets the "InternTelefon1" field.
func (mc *MitarbeiterCreate) SetInternTelefon1(s string) *MitarbeiterCreate {
	mc.mutation.SetInternTelefon1(s)
	return mc
}

// SetInternTelefon2 sets the "InternTelefon2" field.
func (mc *MitarbeiterCreate) SetInternTelefon2(s string) *MitarbeiterCreate {
	mc.mutation.SetInternTelefon2(s)
	return mc
}

// SetFestnetzPrivat sets the "FestnetzPrivat" field.
func (mc *MitarbeiterCreate) SetFestnetzPrivat(s string) *MitarbeiterCreate {
	mc.mutation.SetFestnetzPrivat(s)
	return mc
}

// SetFestnetzAlternativ sets the "FestnetzAlternativ" field.
func (mc *MitarbeiterCreate) SetFestnetzAlternativ(s string) *MitarbeiterCreate {
	mc.mutation.SetFestnetzAlternativ(s)
	return mc
}

// SetHomeOffice sets the "HomeOffice" field.
func (mc *MitarbeiterCreate) SetHomeOffice(s string) *MitarbeiterCreate {
	mc.mutation.SetHomeOffice(s)
	return mc
}

// SetMobilBusiness sets the "MobilBusiness" field.
func (mc *MitarbeiterCreate) SetMobilBusiness(s string) *MitarbeiterCreate {
	mc.mutation.SetMobilBusiness(s)
	return mc
}

// SetMobilPrivat sets the "MobilPrivat" field.
func (mc *MitarbeiterCreate) SetMobilPrivat(s string) *MitarbeiterCreate {
	mc.mutation.SetMobilPrivat(s)
	return mc
}

// SetEmail sets the "Email" field.
func (mc *MitarbeiterCreate) SetEmail(s string) *MitarbeiterCreate {
	mc.mutation.SetEmail(s)
	return mc
}

// SetAzubi sets the "Azubi" field.
func (mc *MitarbeiterCreate) SetAzubi(b bool) *MitarbeiterCreate {
	mc.mutation.SetAzubi(b)
	return mc
}

// SetNillableAzubi sets the "Azubi" field if the given value is not nil.
func (mc *MitarbeiterCreate) SetNillableAzubi(b *bool) *MitarbeiterCreate {
	if b != nil {
		mc.SetAzubi(*b)
	}
	return mc
}

// SetGeburtstag sets the "Geburtstag" field.
func (mc *MitarbeiterCreate) SetGeburtstag(t time.Time) *MitarbeiterCreate {
	mc.mutation.SetGeburtstag(t)
	return mc
}

// SetPaypal sets the "Paypal" field.
func (mc *MitarbeiterCreate) SetPaypal(b bool) *MitarbeiterCreate {
	mc.mutation.SetPaypal(b)
	return mc
}

// SetNillablePaypal sets the "Paypal" field if the given value is not nil.
func (mc *MitarbeiterCreate) SetNillablePaypal(b *bool) *MitarbeiterCreate {
	if b != nil {
		mc.SetPaypal(*b)
	}
	return mc
}

// SetAbonniert sets the "Abonniert" field.
func (mc *MitarbeiterCreate) SetAbonniert(b bool) *MitarbeiterCreate {
	mc.mutation.SetAbonniert(b)
	return mc
}

// SetNillableAbonniert sets the "Abonniert" field if the given value is not nil.
func (mc *MitarbeiterCreate) SetNillableAbonniert(b *bool) *MitarbeiterCreate {
	if b != nil {
		mc.SetAbonniert(*b)
	}
	return mc
}

// SetGeld sets the "Geld" field.
func (mc *MitarbeiterCreate) SetGeld(s string) *MitarbeiterCreate {
	mc.mutation.SetGeld(s)
	return mc
}

// SetPfand sets the "Pfand" field.
func (mc *MitarbeiterCreate) SetPfand(s string) *MitarbeiterCreate {
	mc.mutation.SetPfand(s)
	return mc
}

// SetDinge sets the "Dinge" field.
func (mc *MitarbeiterCreate) SetDinge(s string) *MitarbeiterCreate {
	mc.mutation.SetDinge(s)
	return mc
}

// SetAbgeschickt sets the "Abgeschickt" field.
func (mc *MitarbeiterCreate) SetAbgeschickt(t time.Time) *MitarbeiterCreate {
	mc.mutation.SetAbgeschickt(t)
	return mc
}

// SetBild1 sets the "Bild1" field.
func (mc *MitarbeiterCreate) SetBild1(s string) *MitarbeiterCreate {
	mc.mutation.SetBild1(s)
	return mc
}

// SetBild2 sets the "Bild2" field.
func (mc *MitarbeiterCreate) SetBild2(s string) *MitarbeiterCreate {
	mc.mutation.SetBild2(s)
	return mc
}

// SetBild3 sets the "Bild3" field.
func (mc *MitarbeiterCreate) SetBild3(s string) *MitarbeiterCreate {
	mc.mutation.SetBild3(s)
	return mc
}

// SetBild1Date sets the "Bild1Date" field.
func (mc *MitarbeiterCreate) SetBild1Date(t time.Time) *MitarbeiterCreate {
	mc.mutation.SetBild1Date(t)
	return mc
}

// SetBild2Date sets the "Bild2Date" field.
func (mc *MitarbeiterCreate) SetBild2Date(t time.Time) *MitarbeiterCreate {
	mc.mutation.SetBild2Date(t)
	return mc
}

// SetBild3Date sets the "Bild3Date" field.
func (mc *MitarbeiterCreate) SetBild3Date(t time.Time) *MitarbeiterCreate {
	mc.mutation.SetBild3Date(t)
	return mc
}

// SetAbgescBild3Datehickt sets the "AbgescBild3Datehickt" field.
func (mc *MitarbeiterCreate) SetAbgescBild3Datehickt(t time.Time) *MitarbeiterCreate {
	mc.mutation.SetAbgescBild3Datehickt(t)
	return mc
}

// Mutation returns the MitarbeiterMutation object of the builder.
func (mc *MitarbeiterCreate) Mutation() *MitarbeiterMutation {
	return mc.mutation
}

// Save creates the Mitarbeiter in the database.
func (mc *MitarbeiterCreate) Save(ctx context.Context) (*Mitarbeiter, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MitarbeiterCreate) SaveX(ctx context.Context) *Mitarbeiter {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MitarbeiterCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MitarbeiterCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MitarbeiterCreate) defaults() {
	if _, ok := mc.mutation.Azubi(); !ok {
		v := mitarbeiter.DefaultAzubi
		mc.mutation.SetAzubi(v)
	}
	if _, ok := mc.mutation.Paypal(); !ok {
		v := mitarbeiter.DefaultPaypal
		mc.mutation.SetPaypal(v)
	}
	if _, ok := mc.mutation.Abonniert(); !ok {
		v := mitarbeiter.DefaultAbonniert
		mc.mutation.SetAbonniert(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MitarbeiterCreate) check() error {
	if _, ok := mc.mutation.Name(); !ok {
		return &ValidationError{Name: "Name", err: errors.New(`ent: missing required field "Mitarbeiter.Name"`)}
	}
	if v, ok := mc.mutation.Name(); ok {
		if err := mitarbeiter.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`ent: validator failed for field "Mitarbeiter.Name": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Short(); !ok {
		return &ValidationError{Name: "Short", err: errors.New(`ent: missing required field "Mitarbeiter.Short"`)}
	}
	if _, ok := mc.mutation.Gruppenwahl(); !ok {
		return &ValidationError{Name: "Gruppenwahl", err: errors.New(`ent: missing required field "Mitarbeiter.Gruppenwahl"`)}
	}
	if _, ok := mc.mutation.InternTelefon1(); !ok {
		return &ValidationError{Name: "InternTelefon1", err: errors.New(`ent: missing required field "Mitarbeiter.InternTelefon1"`)}
	}
	if _, ok := mc.mutation.InternTelefon2(); !ok {
		return &ValidationError{Name: "InternTelefon2", err: errors.New(`ent: missing required field "Mitarbeiter.InternTelefon2"`)}
	}
	if _, ok := mc.mutation.FestnetzPrivat(); !ok {
		return &ValidationError{Name: "FestnetzPrivat", err: errors.New(`ent: missing required field "Mitarbeiter.FestnetzPrivat"`)}
	}
	if _, ok := mc.mutation.FestnetzAlternativ(); !ok {
		return &ValidationError{Name: "FestnetzAlternativ", err: errors.New(`ent: missing required field "Mitarbeiter.FestnetzAlternativ"`)}
	}
	if _, ok := mc.mutation.HomeOffice(); !ok {
		return &ValidationError{Name: "HomeOffice", err: errors.New(`ent: missing required field "Mitarbeiter.HomeOffice"`)}
	}
	if _, ok := mc.mutation.MobilBusiness(); !ok {
		return &ValidationError{Name: "MobilBusiness", err: errors.New(`ent: missing required field "Mitarbeiter.MobilBusiness"`)}
	}
	if _, ok := mc.mutation.MobilPrivat(); !ok {
		return &ValidationError{Name: "MobilPrivat", err: errors.New(`ent: missing required field "Mitarbeiter.MobilPrivat"`)}
	}
	if _, ok := mc.mutation.Email(); !ok {
		return &ValidationError{Name: "Email", err: errors.New(`ent: missing required field "Mitarbeiter.Email"`)}
	}
	if _, ok := mc.mutation.Azubi(); !ok {
		return &ValidationError{Name: "Azubi", err: errors.New(`ent: missing required field "Mitarbeiter.Azubi"`)}
	}
	if _, ok := mc.mutation.Geburtstag(); !ok {
		return &ValidationError{Name: "Geburtstag", err: errors.New(`ent: missing required field "Mitarbeiter.Geburtstag"`)}
	}
	if _, ok := mc.mutation.Paypal(); !ok {
		return &ValidationError{Name: "Paypal", err: errors.New(`ent: missing required field "Mitarbeiter.Paypal"`)}
	}
	if _, ok := mc.mutation.Abonniert(); !ok {
		return &ValidationError{Name: "Abonniert", err: errors.New(`ent: missing required field "Mitarbeiter.Abonniert"`)}
	}
	if _, ok := mc.mutation.Geld(); !ok {
		return &ValidationError{Name: "Geld", err: errors.New(`ent: missing required field "Mitarbeiter.Geld"`)}
	}
	if _, ok := mc.mutation.Pfand(); !ok {
		return &ValidationError{Name: "Pfand", err: errors.New(`ent: missing required field "Mitarbeiter.Pfand"`)}
	}
	if _, ok := mc.mutation.Dinge(); !ok {
		return &ValidationError{Name: "Dinge", err: errors.New(`ent: missing required field "Mitarbeiter.Dinge"`)}
	}
	if _, ok := mc.mutation.Abgeschickt(); !ok {
		return &ValidationError{Name: "Abgeschickt", err: errors.New(`ent: missing required field "Mitarbeiter.Abgeschickt"`)}
	}
	if _, ok := mc.mutation.Bild1(); !ok {
		return &ValidationError{Name: "Bild1", err: errors.New(`ent: missing required field "Mitarbeiter.Bild1"`)}
	}
	if _, ok := mc.mutation.Bild2(); !ok {
		return &ValidationError{Name: "Bild2", err: errors.New(`ent: missing required field "Mitarbeiter.Bild2"`)}
	}
	if _, ok := mc.mutation.Bild3(); !ok {
		return &ValidationError{Name: "Bild3", err: errors.New(`ent: missing required field "Mitarbeiter.Bild3"`)}
	}
	if _, ok := mc.mutation.Bild1Date(); !ok {
		return &ValidationError{Name: "Bild1Date", err: errors.New(`ent: missing required field "Mitarbeiter.Bild1Date"`)}
	}
	if _, ok := mc.mutation.Bild2Date(); !ok {
		return &ValidationError{Name: "Bild2Date", err: errors.New(`ent: missing required field "Mitarbeiter.Bild2Date"`)}
	}
	if _, ok := mc.mutation.Bild3Date(); !ok {
		return &ValidationError{Name: "Bild3Date", err: errors.New(`ent: missing required field "Mitarbeiter.Bild3Date"`)}
	}
	if _, ok := mc.mutation.AbgescBild3Datehickt(); !ok {
		return &ValidationError{Name: "AbgescBild3Datehickt", err: errors.New(`ent: missing required field "Mitarbeiter.AbgescBild3Datehickt"`)}
	}
	return nil
}

func (mc *MitarbeiterCreate) sqlSave(ctx context.Context) (*Mitarbeiter, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MitarbeiterCreate) createSpec() (*Mitarbeiter, *sqlgraph.CreateSpec) {
	var (
		_node = &Mitarbeiter{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(mitarbeiter.Table, sqlgraph.NewFieldSpec(mitarbeiter.FieldID, field.TypeInt))
	)
	if value, ok := mc.mutation.Name(); ok {
		_spec.SetField(mitarbeiter.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := mc.mutation.Short(); ok {
		_spec.SetField(mitarbeiter.FieldShort, field.TypeString, value)
		_node.Short = &value
	}
	if value, ok := mc.mutation.Gruppenwahl(); ok {
		_spec.SetField(mitarbeiter.FieldGruppenwahl, field.TypeString, value)
		_node.Gruppenwahl = &value
	}
	if value, ok := mc.mutation.InternTelefon1(); ok {
		_spec.SetField(mitarbeiter.FieldInternTelefon1, field.TypeString, value)
		_node.InternTelefon1 = &value
	}
	if value, ok := mc.mutation.InternTelefon2(); ok {
		_spec.SetField(mitarbeiter.FieldInternTelefon2, field.TypeString, value)
		_node.InternTelefon2 = &value
	}
	if value, ok := mc.mutation.FestnetzPrivat(); ok {
		_spec.SetField(mitarbeiter.FieldFestnetzPrivat, field.TypeString, value)
		_node.FestnetzPrivat = &value
	}
	if value, ok := mc.mutation.FestnetzAlternativ(); ok {
		_spec.SetField(mitarbeiter.FieldFestnetzAlternativ, field.TypeString, value)
		_node.FestnetzAlternativ = &value
	}
	if value, ok := mc.mutation.HomeOffice(); ok {
		_spec.SetField(mitarbeiter.FieldHomeOffice, field.TypeString, value)
		_node.HomeOffice = &value
	}
	if value, ok := mc.mutation.MobilBusiness(); ok {
		_spec.SetField(mitarbeiter.FieldMobilBusiness, field.TypeString, value)
		_node.MobilBusiness = &value
	}
	if value, ok := mc.mutation.MobilPrivat(); ok {
		_spec.SetField(mitarbeiter.FieldMobilPrivat, field.TypeString, value)
		_node.MobilPrivat = &value
	}
	if value, ok := mc.mutation.Email(); ok {
		_spec.SetField(mitarbeiter.FieldEmail, field.TypeString, value)
		_node.Email = &value
	}
	if value, ok := mc.mutation.Azubi(); ok {
		_spec.SetField(mitarbeiter.FieldAzubi, field.TypeBool, value)
		_node.Azubi = value
	}
	if value, ok := mc.mutation.Geburtstag(); ok {
		_spec.SetField(mitarbeiter.FieldGeburtstag, field.TypeTime, value)
		_node.Geburtstag = &value
	}
	if value, ok := mc.mutation.Paypal(); ok {
		_spec.SetField(mitarbeiter.FieldPaypal, field.TypeBool, value)
		_node.Paypal = value
	}
	if value, ok := mc.mutation.Abonniert(); ok {
		_spec.SetField(mitarbeiter.FieldAbonniert, field.TypeBool, value)
		_node.Abonniert = value
	}
	if value, ok := mc.mutation.Geld(); ok {
		_spec.SetField(mitarbeiter.FieldGeld, field.TypeString, value)
		_node.Geld = &value
	}
	if value, ok := mc.mutation.Pfand(); ok {
		_spec.SetField(mitarbeiter.FieldPfand, field.TypeString, value)
		_node.Pfand = &value
	}
	if value, ok := mc.mutation.Dinge(); ok {
		_spec.SetField(mitarbeiter.FieldDinge, field.TypeString, value)
		_node.Dinge = &value
	}
	if value, ok := mc.mutation.Abgeschickt(); ok {
		_spec.SetField(mitarbeiter.FieldAbgeschickt, field.TypeTime, value)
		_node.Abgeschickt = &value
	}
	if value, ok := mc.mutation.Bild1(); ok {
		_spec.SetField(mitarbeiter.FieldBild1, field.TypeString, value)
		_node.Bild1 = &value
	}
	if value, ok := mc.mutation.Bild2(); ok {
		_spec.SetField(mitarbeiter.FieldBild2, field.TypeString, value)
		_node.Bild2 = &value
	}
	if value, ok := mc.mutation.Bild3(); ok {
		_spec.SetField(mitarbeiter.FieldBild3, field.TypeString, value)
		_node.Bild3 = &value
	}
	if value, ok := mc.mutation.Bild1Date(); ok {
		_spec.SetField(mitarbeiter.FieldBild1Date, field.TypeTime, value)
		_node.Bild1Date = &value
	}
	if value, ok := mc.mutation.Bild2Date(); ok {
		_spec.SetField(mitarbeiter.FieldBild2Date, field.TypeTime, value)
		_node.Bild2Date = &value
	}
	if value, ok := mc.mutation.Bild3Date(); ok {
		_spec.SetField(mitarbeiter.FieldBild3Date, field.TypeTime, value)
		_node.Bild3Date = &value
	}
	if value, ok := mc.mutation.AbgescBild3Datehickt(); ok {
		_spec.SetField(mitarbeiter.FieldAbgescBild3Datehickt, field.TypeTime, value)
		_node.AbgescBild3Datehickt = &value
	}
	return _node, _spec
}

// MitarbeiterCreateBulk is the builder for creating many Mitarbeiter entities in bulk.
type MitarbeiterCreateBulk struct {
	config
	err      error
	builders []*MitarbeiterCreate
}

// Save creates the Mitarbeiter entities in the database.
func (mcb *MitarbeiterCreateBulk) Save(ctx context.Context) ([]*Mitarbeiter, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Mitarbeiter, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MitarbeiterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MitarbeiterCreateBulk) SaveX(ctx context.Context) []*Mitarbeiter {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MitarbeiterCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MitarbeiterCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
