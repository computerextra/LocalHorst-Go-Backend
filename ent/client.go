// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"golang-backend/ent/migrate"

	"golang-backend/ent/ansprechpartner"
	"golang-backend/ent/artikel"
	"golang-backend/ent/inventur"
	"golang-backend/ent/lieferant"
	"golang-backend/ent/mitarbeiter"
	"golang-backend/ent/team"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Ansprechpartner is the client for interacting with the Ansprechpartner builders.
	Ansprechpartner *AnsprechpartnerClient
	// Artikel is the client for interacting with the Artikel builders.
	Artikel *ArtikelClient
	// Inventur is the client for interacting with the Inventur builders.
	Inventur *InventurClient
	// Lieferant is the client for interacting with the Lieferant builders.
	Lieferant *LieferantClient
	// Mitarbeiter is the client for interacting with the Mitarbeiter builders.
	Mitarbeiter *MitarbeiterClient
	// Team is the client for interacting with the Team builders.
	Team *TeamClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Ansprechpartner = NewAnsprechpartnerClient(c.config)
	c.Artikel = NewArtikelClient(c.config)
	c.Inventur = NewInventurClient(c.config)
	c.Lieferant = NewLieferantClient(c.config)
	c.Mitarbeiter = NewMitarbeiterClient(c.config)
	c.Team = NewTeamClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		Ansprechpartner: NewAnsprechpartnerClient(cfg),
		Artikel:         NewArtikelClient(cfg),
		Inventur:        NewInventurClient(cfg),
		Lieferant:       NewLieferantClient(cfg),
		Mitarbeiter:     NewMitarbeiterClient(cfg),
		Team:            NewTeamClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		Ansprechpartner: NewAnsprechpartnerClient(cfg),
		Artikel:         NewArtikelClient(cfg),
		Inventur:        NewInventurClient(cfg),
		Lieferant:       NewLieferantClient(cfg),
		Mitarbeiter:     NewMitarbeiterClient(cfg),
		Team:            NewTeamClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Ansprechpartner.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Ansprechpartner, c.Artikel, c.Inventur, c.Lieferant, c.Mitarbeiter, c.Team,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Ansprechpartner, c.Artikel, c.Inventur, c.Lieferant, c.Mitarbeiter, c.Team,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AnsprechpartnerMutation:
		return c.Ansprechpartner.mutate(ctx, m)
	case *ArtikelMutation:
		return c.Artikel.mutate(ctx, m)
	case *InventurMutation:
		return c.Inventur.mutate(ctx, m)
	case *LieferantMutation:
		return c.Lieferant.mutate(ctx, m)
	case *MitarbeiterMutation:
		return c.Mitarbeiter.mutate(ctx, m)
	case *TeamMutation:
		return c.Team.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AnsprechpartnerClient is a client for the Ansprechpartner schema.
type AnsprechpartnerClient struct {
	config
}

// NewAnsprechpartnerClient returns a client for the Ansprechpartner from the given config.
func NewAnsprechpartnerClient(c config) *AnsprechpartnerClient {
	return &AnsprechpartnerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ansprechpartner.Hooks(f(g(h())))`.
func (c *AnsprechpartnerClient) Use(hooks ...Hook) {
	c.hooks.Ansprechpartner = append(c.hooks.Ansprechpartner, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ansprechpartner.Intercept(f(g(h())))`.
func (c *AnsprechpartnerClient) Intercept(interceptors ...Interceptor) {
	c.inters.Ansprechpartner = append(c.inters.Ansprechpartner, interceptors...)
}

// Create returns a builder for creating a Ansprechpartner entity.
func (c *AnsprechpartnerClient) Create() *AnsprechpartnerCreate {
	mutation := newAnsprechpartnerMutation(c.config, OpCreate)
	return &AnsprechpartnerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Ansprechpartner entities.
func (c *AnsprechpartnerClient) CreateBulk(builders ...*AnsprechpartnerCreate) *AnsprechpartnerCreateBulk {
	return &AnsprechpartnerCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AnsprechpartnerClient) MapCreateBulk(slice any, setFunc func(*AnsprechpartnerCreate, int)) *AnsprechpartnerCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AnsprechpartnerCreateBulk{err: fmt.Errorf("calling to AnsprechpartnerClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AnsprechpartnerCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AnsprechpartnerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Ansprechpartner.
func (c *AnsprechpartnerClient) Update() *AnsprechpartnerUpdate {
	mutation := newAnsprechpartnerMutation(c.config, OpUpdate)
	return &AnsprechpartnerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AnsprechpartnerClient) UpdateOne(a *Ansprechpartner) *AnsprechpartnerUpdateOne {
	mutation := newAnsprechpartnerMutation(c.config, OpUpdateOne, withAnsprechpartner(a))
	return &AnsprechpartnerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AnsprechpartnerClient) UpdateOneID(id int) *AnsprechpartnerUpdateOne {
	mutation := newAnsprechpartnerMutation(c.config, OpUpdateOne, withAnsprechpartnerID(id))
	return &AnsprechpartnerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Ansprechpartner.
func (c *AnsprechpartnerClient) Delete() *AnsprechpartnerDelete {
	mutation := newAnsprechpartnerMutation(c.config, OpDelete)
	return &AnsprechpartnerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AnsprechpartnerClient) DeleteOne(a *Ansprechpartner) *AnsprechpartnerDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AnsprechpartnerClient) DeleteOneID(id int) *AnsprechpartnerDeleteOne {
	builder := c.Delete().Where(ansprechpartner.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AnsprechpartnerDeleteOne{builder}
}

// Query returns a query builder for Ansprechpartner.
func (c *AnsprechpartnerClient) Query() *AnsprechpartnerQuery {
	return &AnsprechpartnerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAnsprechpartner},
		inters: c.Interceptors(),
	}
}

// Get returns a Ansprechpartner entity by its id.
func (c *AnsprechpartnerClient) Get(ctx context.Context, id int) (*Ansprechpartner, error) {
	return c.Query().Where(ansprechpartner.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AnsprechpartnerClient) GetX(ctx context.Context, id int) *Ansprechpartner {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryLieferant queries the Lieferant edge of a Ansprechpartner.
func (c *AnsprechpartnerClient) QueryLieferant(a *Ansprechpartner) *LieferantQuery {
	query := (&LieferantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ansprechpartner.Table, ansprechpartner.FieldID, id),
			sqlgraph.To(lieferant.Table, lieferant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ansprechpartner.LieferantTable, ansprechpartner.LieferantColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AnsprechpartnerClient) Hooks() []Hook {
	return c.hooks.Ansprechpartner
}

// Interceptors returns the client interceptors.
func (c *AnsprechpartnerClient) Interceptors() []Interceptor {
	return c.inters.Ansprechpartner
}

func (c *AnsprechpartnerClient) mutate(ctx context.Context, m *AnsprechpartnerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AnsprechpartnerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AnsprechpartnerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AnsprechpartnerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AnsprechpartnerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Ansprechpartner mutation op: %q", m.Op())
	}
}

// ArtikelClient is a client for the Artikel schema.
type ArtikelClient struct {
	config
}

// NewArtikelClient returns a client for the Artikel from the given config.
func NewArtikelClient(c config) *ArtikelClient {
	return &ArtikelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `artikel.Hooks(f(g(h())))`.
func (c *ArtikelClient) Use(hooks ...Hook) {
	c.hooks.Artikel = append(c.hooks.Artikel, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `artikel.Intercept(f(g(h())))`.
func (c *ArtikelClient) Intercept(interceptors ...Interceptor) {
	c.inters.Artikel = append(c.inters.Artikel, interceptors...)
}

// Create returns a builder for creating a Artikel entity.
func (c *ArtikelClient) Create() *ArtikelCreate {
	mutation := newArtikelMutation(c.config, OpCreate)
	return &ArtikelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Artikel entities.
func (c *ArtikelClient) CreateBulk(builders ...*ArtikelCreate) *ArtikelCreateBulk {
	return &ArtikelCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ArtikelClient) MapCreateBulk(slice any, setFunc func(*ArtikelCreate, int)) *ArtikelCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ArtikelCreateBulk{err: fmt.Errorf("calling to ArtikelClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ArtikelCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ArtikelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Artikel.
func (c *ArtikelClient) Update() *ArtikelUpdate {
	mutation := newArtikelMutation(c.config, OpUpdate)
	return &ArtikelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ArtikelClient) UpdateOne(a *Artikel) *ArtikelUpdateOne {
	mutation := newArtikelMutation(c.config, OpUpdateOne, withArtikel(a))
	return &ArtikelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ArtikelClient) UpdateOneID(id int) *ArtikelUpdateOne {
	mutation := newArtikelMutation(c.config, OpUpdateOne, withArtikelID(id))
	return &ArtikelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Artikel.
func (c *ArtikelClient) Delete() *ArtikelDelete {
	mutation := newArtikelMutation(c.config, OpDelete)
	return &ArtikelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ArtikelClient) DeleteOne(a *Artikel) *ArtikelDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ArtikelClient) DeleteOneID(id int) *ArtikelDeleteOne {
	builder := c.Delete().Where(artikel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ArtikelDeleteOne{builder}
}

// Query returns a query builder for Artikel.
func (c *ArtikelClient) Query() *ArtikelQuery {
	return &ArtikelQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeArtikel},
		inters: c.Interceptors(),
	}
}

// Get returns a Artikel entity by its id.
func (c *ArtikelClient) Get(ctx context.Context, id int) (*Artikel, error) {
	return c.Query().Where(artikel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ArtikelClient) GetX(ctx context.Context, id int) *Artikel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTeam queries the team edge of a Artikel.
func (c *ArtikelClient) QueryTeam(a *Artikel) *TeamQuery {
	query := (&TeamClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(artikel.Table, artikel.FieldID, id),
			sqlgraph.To(team.Table, team.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, artikel.TeamTable, artikel.TeamColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ArtikelClient) Hooks() []Hook {
	return c.hooks.Artikel
}

// Interceptors returns the client interceptors.
func (c *ArtikelClient) Interceptors() []Interceptor {
	return c.inters.Artikel
}

func (c *ArtikelClient) mutate(ctx context.Context, m *ArtikelMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ArtikelCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ArtikelUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ArtikelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ArtikelDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Artikel mutation op: %q", m.Op())
	}
}

// InventurClient is a client for the Inventur schema.
type InventurClient struct {
	config
}

// NewInventurClient returns a client for the Inventur from the given config.
func NewInventurClient(c config) *InventurClient {
	return &InventurClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `inventur.Hooks(f(g(h())))`.
func (c *InventurClient) Use(hooks ...Hook) {
	c.hooks.Inventur = append(c.hooks.Inventur, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `inventur.Intercept(f(g(h())))`.
func (c *InventurClient) Intercept(interceptors ...Interceptor) {
	c.inters.Inventur = append(c.inters.Inventur, interceptors...)
}

// Create returns a builder for creating a Inventur entity.
func (c *InventurClient) Create() *InventurCreate {
	mutation := newInventurMutation(c.config, OpCreate)
	return &InventurCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Inventur entities.
func (c *InventurClient) CreateBulk(builders ...*InventurCreate) *InventurCreateBulk {
	return &InventurCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *InventurClient) MapCreateBulk(slice any, setFunc func(*InventurCreate, int)) *InventurCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &InventurCreateBulk{err: fmt.Errorf("calling to InventurClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*InventurCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &InventurCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Inventur.
func (c *InventurClient) Update() *InventurUpdate {
	mutation := newInventurMutation(c.config, OpUpdate)
	return &InventurUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InventurClient) UpdateOne(i *Inventur) *InventurUpdateOne {
	mutation := newInventurMutation(c.config, OpUpdateOne, withInventur(i))
	return &InventurUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InventurClient) UpdateOneID(id int) *InventurUpdateOne {
	mutation := newInventurMutation(c.config, OpUpdateOne, withInventurID(id))
	return &InventurUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Inventur.
func (c *InventurClient) Delete() *InventurDelete {
	mutation := newInventurMutation(c.config, OpDelete)
	return &InventurDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InventurClient) DeleteOne(i *Inventur) *InventurDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InventurClient) DeleteOneID(id int) *InventurDeleteOne {
	builder := c.Delete().Where(inventur.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InventurDeleteOne{builder}
}

// Query returns a query builder for Inventur.
func (c *InventurClient) Query() *InventurQuery {
	return &InventurQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeInventur},
		inters: c.Interceptors(),
	}
}

// Get returns a Inventur entity by its id.
func (c *InventurClient) Get(ctx context.Context, id int) (*Inventur, error) {
	return c.Query().Where(inventur.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InventurClient) GetX(ctx context.Context, id int) *Inventur {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTeams queries the Teams edge of a Inventur.
func (c *InventurClient) QueryTeams(i *Inventur) *TeamQuery {
	query := (&TeamClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(inventur.Table, inventur.FieldID, id),
			sqlgraph.To(team.Table, team.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, inventur.TeamsTable, inventur.TeamsColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InventurClient) Hooks() []Hook {
	return c.hooks.Inventur
}

// Interceptors returns the client interceptors.
func (c *InventurClient) Interceptors() []Interceptor {
	return c.inters.Inventur
}

func (c *InventurClient) mutate(ctx context.Context, m *InventurMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&InventurCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&InventurUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&InventurUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&InventurDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Inventur mutation op: %q", m.Op())
	}
}

// LieferantClient is a client for the Lieferant schema.
type LieferantClient struct {
	config
}

// NewLieferantClient returns a client for the Lieferant from the given config.
func NewLieferantClient(c config) *LieferantClient {
	return &LieferantClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `lieferant.Hooks(f(g(h())))`.
func (c *LieferantClient) Use(hooks ...Hook) {
	c.hooks.Lieferant = append(c.hooks.Lieferant, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `lieferant.Intercept(f(g(h())))`.
func (c *LieferantClient) Intercept(interceptors ...Interceptor) {
	c.inters.Lieferant = append(c.inters.Lieferant, interceptors...)
}

// Create returns a builder for creating a Lieferant entity.
func (c *LieferantClient) Create() *LieferantCreate {
	mutation := newLieferantMutation(c.config, OpCreate)
	return &LieferantCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Lieferant entities.
func (c *LieferantClient) CreateBulk(builders ...*LieferantCreate) *LieferantCreateBulk {
	return &LieferantCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *LieferantClient) MapCreateBulk(slice any, setFunc func(*LieferantCreate, int)) *LieferantCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &LieferantCreateBulk{err: fmt.Errorf("calling to LieferantClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*LieferantCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &LieferantCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Lieferant.
func (c *LieferantClient) Update() *LieferantUpdate {
	mutation := newLieferantMutation(c.config, OpUpdate)
	return &LieferantUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LieferantClient) UpdateOne(l *Lieferant) *LieferantUpdateOne {
	mutation := newLieferantMutation(c.config, OpUpdateOne, withLieferant(l))
	return &LieferantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LieferantClient) UpdateOneID(id int) *LieferantUpdateOne {
	mutation := newLieferantMutation(c.config, OpUpdateOne, withLieferantID(id))
	return &LieferantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Lieferant.
func (c *LieferantClient) Delete() *LieferantDelete {
	mutation := newLieferantMutation(c.config, OpDelete)
	return &LieferantDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LieferantClient) DeleteOne(l *Lieferant) *LieferantDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LieferantClient) DeleteOneID(id int) *LieferantDeleteOne {
	builder := c.Delete().Where(lieferant.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LieferantDeleteOne{builder}
}

// Query returns a query builder for Lieferant.
func (c *LieferantClient) Query() *LieferantQuery {
	return &LieferantQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLieferant},
		inters: c.Interceptors(),
	}
}

// Get returns a Lieferant entity by its id.
func (c *LieferantClient) Get(ctx context.Context, id int) (*Lieferant, error) {
	return c.Query().Where(lieferant.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LieferantClient) GetX(ctx context.Context, id int) *Lieferant {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAnsprechpartner queries the Ansprechpartner edge of a Lieferant.
func (c *LieferantClient) QueryAnsprechpartner(l *Lieferant) *AnsprechpartnerQuery {
	query := (&AnsprechpartnerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(lieferant.Table, lieferant.FieldID, id),
			sqlgraph.To(ansprechpartner.Table, ansprechpartner.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, lieferant.AnsprechpartnerTable, lieferant.AnsprechpartnerColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LieferantClient) Hooks() []Hook {
	return c.hooks.Lieferant
}

// Interceptors returns the client interceptors.
func (c *LieferantClient) Interceptors() []Interceptor {
	return c.inters.Lieferant
}

func (c *LieferantClient) mutate(ctx context.Context, m *LieferantMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LieferantCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LieferantUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LieferantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LieferantDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Lieferant mutation op: %q", m.Op())
	}
}

// MitarbeiterClient is a client for the Mitarbeiter schema.
type MitarbeiterClient struct {
	config
}

// NewMitarbeiterClient returns a client for the Mitarbeiter from the given config.
func NewMitarbeiterClient(c config) *MitarbeiterClient {
	return &MitarbeiterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `mitarbeiter.Hooks(f(g(h())))`.
func (c *MitarbeiterClient) Use(hooks ...Hook) {
	c.hooks.Mitarbeiter = append(c.hooks.Mitarbeiter, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `mitarbeiter.Intercept(f(g(h())))`.
func (c *MitarbeiterClient) Intercept(interceptors ...Interceptor) {
	c.inters.Mitarbeiter = append(c.inters.Mitarbeiter, interceptors...)
}

// Create returns a builder for creating a Mitarbeiter entity.
func (c *MitarbeiterClient) Create() *MitarbeiterCreate {
	mutation := newMitarbeiterMutation(c.config, OpCreate)
	return &MitarbeiterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Mitarbeiter entities.
func (c *MitarbeiterClient) CreateBulk(builders ...*MitarbeiterCreate) *MitarbeiterCreateBulk {
	return &MitarbeiterCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MitarbeiterClient) MapCreateBulk(slice any, setFunc func(*MitarbeiterCreate, int)) *MitarbeiterCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MitarbeiterCreateBulk{err: fmt.Errorf("calling to MitarbeiterClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MitarbeiterCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MitarbeiterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Mitarbeiter.
func (c *MitarbeiterClient) Update() *MitarbeiterUpdate {
	mutation := newMitarbeiterMutation(c.config, OpUpdate)
	return &MitarbeiterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MitarbeiterClient) UpdateOne(m *Mitarbeiter) *MitarbeiterUpdateOne {
	mutation := newMitarbeiterMutation(c.config, OpUpdateOne, withMitarbeiter(m))
	return &MitarbeiterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MitarbeiterClient) UpdateOneID(id int) *MitarbeiterUpdateOne {
	mutation := newMitarbeiterMutation(c.config, OpUpdateOne, withMitarbeiterID(id))
	return &MitarbeiterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Mitarbeiter.
func (c *MitarbeiterClient) Delete() *MitarbeiterDelete {
	mutation := newMitarbeiterMutation(c.config, OpDelete)
	return &MitarbeiterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MitarbeiterClient) DeleteOne(m *Mitarbeiter) *MitarbeiterDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MitarbeiterClient) DeleteOneID(id int) *MitarbeiterDeleteOne {
	builder := c.Delete().Where(mitarbeiter.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MitarbeiterDeleteOne{builder}
}

// Query returns a query builder for Mitarbeiter.
func (c *MitarbeiterClient) Query() *MitarbeiterQuery {
	return &MitarbeiterQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMitarbeiter},
		inters: c.Interceptors(),
	}
}

// Get returns a Mitarbeiter entity by its id.
func (c *MitarbeiterClient) Get(ctx context.Context, id int) (*Mitarbeiter, error) {
	return c.Query().Where(mitarbeiter.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MitarbeiterClient) GetX(ctx context.Context, id int) *Mitarbeiter {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MitarbeiterClient) Hooks() []Hook {
	return c.hooks.Mitarbeiter
}

// Interceptors returns the client interceptors.
func (c *MitarbeiterClient) Interceptors() []Interceptor {
	return c.inters.Mitarbeiter
}

func (c *MitarbeiterClient) mutate(ctx context.Context, m *MitarbeiterMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MitarbeiterCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MitarbeiterUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MitarbeiterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MitarbeiterDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Mitarbeiter mutation op: %q", m.Op())
	}
}

// TeamClient is a client for the Team schema.
type TeamClient struct {
	config
}

// NewTeamClient returns a client for the Team from the given config.
func NewTeamClient(c config) *TeamClient {
	return &TeamClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `team.Hooks(f(g(h())))`.
func (c *TeamClient) Use(hooks ...Hook) {
	c.hooks.Team = append(c.hooks.Team, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `team.Intercept(f(g(h())))`.
func (c *TeamClient) Intercept(interceptors ...Interceptor) {
	c.inters.Team = append(c.inters.Team, interceptors...)
}

// Create returns a builder for creating a Team entity.
func (c *TeamClient) Create() *TeamCreate {
	mutation := newTeamMutation(c.config, OpCreate)
	return &TeamCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Team entities.
func (c *TeamClient) CreateBulk(builders ...*TeamCreate) *TeamCreateBulk {
	return &TeamCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TeamClient) MapCreateBulk(slice any, setFunc func(*TeamCreate, int)) *TeamCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TeamCreateBulk{err: fmt.Errorf("calling to TeamClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TeamCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TeamCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Team.
func (c *TeamClient) Update() *TeamUpdate {
	mutation := newTeamMutation(c.config, OpUpdate)
	return &TeamUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TeamClient) UpdateOne(t *Team) *TeamUpdateOne {
	mutation := newTeamMutation(c.config, OpUpdateOne, withTeam(t))
	return &TeamUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TeamClient) UpdateOneID(id int) *TeamUpdateOne {
	mutation := newTeamMutation(c.config, OpUpdateOne, withTeamID(id))
	return &TeamUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Team.
func (c *TeamClient) Delete() *TeamDelete {
	mutation := newTeamMutation(c.config, OpDelete)
	return &TeamDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TeamClient) DeleteOne(t *Team) *TeamDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TeamClient) DeleteOneID(id int) *TeamDeleteOne {
	builder := c.Delete().Where(team.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TeamDeleteOne{builder}
}

// Query returns a query builder for Team.
func (c *TeamClient) Query() *TeamQuery {
	return &TeamQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTeam},
		inters: c.Interceptors(),
	}
}

// Get returns a Team entity by its id.
func (c *TeamClient) Get(ctx context.Context, id int) (*Team, error) {
	return c.Query().Where(team.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TeamClient) GetX(ctx context.Context, id int) *Team {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryArtikel queries the artikel edge of a Team.
func (c *TeamClient) QueryArtikel(t *Team) *ArtikelQuery {
	query := (&ArtikelClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(team.Table, team.FieldID, id),
			sqlgraph.To(artikel.Table, artikel.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, team.ArtikelTable, team.ArtikelColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryJahr queries the Jahr edge of a Team.
func (c *TeamClient) QueryJahr(t *Team) *InventurQuery {
	query := (&InventurClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(team.Table, team.FieldID, id),
			sqlgraph.To(inventur.Table, inventur.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, team.JahrTable, team.JahrColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TeamClient) Hooks() []Hook {
	return c.hooks.Team
}

// Interceptors returns the client interceptors.
func (c *TeamClient) Interceptors() []Interceptor {
	return c.inters.Team
}

func (c *TeamClient) mutate(ctx context.Context, m *TeamMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TeamCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TeamUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TeamUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TeamDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Team mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Ansprechpartner, Artikel, Inventur, Lieferant, Mitarbeiter, Team []ent.Hook
	}
	inters struct {
		Ansprechpartner, Artikel, Inventur, Lieferant, Mitarbeiter,
		Team []ent.Interceptor
	}
)
