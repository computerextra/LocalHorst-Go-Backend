// Code generated by ent, DO NOT EDIT.

package lieferant

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the lieferant type in the database.
	Label = "lieferant"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFirma holds the string denoting the firma field in the database.
	FieldFirma = "firma"
	// FieldKundennummer holds the string denoting the kundennummer field in the database.
	FieldKundennummer = "kundennummer"
	// FieldWebseite holds the string denoting the webseite field in the database.
	FieldWebseite = "webseite"
	// EdgeAnsprechpartner holds the string denoting the ansprechpartner edge name in mutations.
	EdgeAnsprechpartner = "Ansprechpartner"
	// Table holds the table name of the lieferant in the database.
	Table = "lieferants"
	// AnsprechpartnerTable is the table that holds the Ansprechpartner relation/edge.
	AnsprechpartnerTable = "ansprechpartners"
	// AnsprechpartnerInverseTable is the table name for the Ansprechpartner entity.
	// It exists in this package in order to avoid circular dependency with the "ansprechpartner" package.
	AnsprechpartnerInverseTable = "ansprechpartners"
	// AnsprechpartnerColumn is the table column denoting the Ansprechpartner relation/edge.
	AnsprechpartnerColumn = "lieferant_ansprechpartner"
)

// Columns holds all SQL columns for lieferant fields.
var Columns = []string{
	FieldID,
	FieldFirma,
	FieldKundennummer,
	FieldWebseite,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// FirmaValidator is a validator for the "Firma" field. It is called by the builders before save.
	FirmaValidator func(string) error
)

// OrderOption defines the ordering options for the Lieferant queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFirma orders the results by the Firma field.
func ByFirma(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirma, opts...).ToFunc()
}

// ByKundennummer orders the results by the Kundennummer field.
func ByKundennummer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKundennummer, opts...).ToFunc()
}

// ByWebseite orders the results by the Webseite field.
func ByWebseite(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWebseite, opts...).ToFunc()
}

// ByAnsprechpartnerCount orders the results by Ansprechpartner count.
func ByAnsprechpartnerCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAnsprechpartnerStep(), opts...)
	}
}

// ByAnsprechpartner orders the results by Ansprechpartner terms.
func ByAnsprechpartner(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAnsprechpartnerStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAnsprechpartnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AnsprechpartnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AnsprechpartnerTable, AnsprechpartnerColumn),
	)
}
