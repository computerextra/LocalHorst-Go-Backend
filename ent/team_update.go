// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"golang-backend/ent/artikel"
	"golang-backend/ent/inventur"
	"golang-backend/ent/predicate"
	"golang-backend/ent/team"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TeamUpdate is the builder for updating Team entities.
type TeamUpdate struct {
	config
	hooks    []Hook
	mutation *TeamMutation
}

// Where appends a list predicates to the TeamUpdate builder.
func (tu *TeamUpdate) Where(ps ...predicate.Team) *TeamUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetTeam sets the "Team" field.
func (tu *TeamUpdate) SetTeam(i int) *TeamUpdate {
	tu.mutation.ResetTeam()
	tu.mutation.SetTeam(i)
	return tu
}

// SetNillableTeam sets the "Team" field if the given value is not nil.
func (tu *TeamUpdate) SetNillableTeam(i *int) *TeamUpdate {
	if i != nil {
		tu.SetTeam(*i)
	}
	return tu
}

// AddTeam adds i to the "Team" field.
func (tu *TeamUpdate) AddTeam(i int) *TeamUpdate {
	tu.mutation.AddTeam(i)
	return tu
}

// SetMitarbeiter sets the "Mitarbeiter" field.
func (tu *TeamUpdate) SetMitarbeiter(s string) *TeamUpdate {
	tu.mutation.SetMitarbeiter(s)
	return tu
}

// SetNillableMitarbeiter sets the "Mitarbeiter" field if the given value is not nil.
func (tu *TeamUpdate) SetNillableMitarbeiter(s *string) *TeamUpdate {
	if s != nil {
		tu.SetMitarbeiter(*s)
	}
	return tu
}

// SetFarbe sets the "Farbe" field.
func (tu *TeamUpdate) SetFarbe(s string) *TeamUpdate {
	tu.mutation.SetFarbe(s)
	return tu
}

// SetNillableFarbe sets the "Farbe" field if the given value is not nil.
func (tu *TeamUpdate) SetNillableFarbe(s *string) *TeamUpdate {
	if s != nil {
		tu.SetFarbe(*s)
	}
	return tu
}

// SetOrt sets the "Ort" field.
func (tu *TeamUpdate) SetOrt(s string) *TeamUpdate {
	tu.mutation.SetOrt(s)
	return tu
}

// SetNillableOrt sets the "Ort" field if the given value is not nil.
func (tu *TeamUpdate) SetNillableOrt(s *string) *TeamUpdate {
	if s != nil {
		tu.SetOrt(*s)
	}
	return tu
}

// AddArtikelIDs adds the "artikel" edge to the Artikel entity by IDs.
func (tu *TeamUpdate) AddArtikelIDs(ids ...int) *TeamUpdate {
	tu.mutation.AddArtikelIDs(ids...)
	return tu
}

// AddArtikel adds the "artikel" edges to the Artikel entity.
func (tu *TeamUpdate) AddArtikel(a ...*Artikel) *TeamUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tu.AddArtikelIDs(ids...)
}

// SetJahrID sets the "Jahr" edge to the Inventur entity by ID.
func (tu *TeamUpdate) SetJahrID(id int) *TeamUpdate {
	tu.mutation.SetJahrID(id)
	return tu
}

// SetNillableJahrID sets the "Jahr" edge to the Inventur entity by ID if the given value is not nil.
func (tu *TeamUpdate) SetNillableJahrID(id *int) *TeamUpdate {
	if id != nil {
		tu = tu.SetJahrID(*id)
	}
	return tu
}

// SetJahr sets the "Jahr" edge to the Inventur entity.
func (tu *TeamUpdate) SetJahr(i *Inventur) *TeamUpdate {
	return tu.SetJahrID(i.ID)
}

// Mutation returns the TeamMutation object of the builder.
func (tu *TeamUpdate) Mutation() *TeamMutation {
	return tu.mutation
}

// ClearArtikel clears all "artikel" edges to the Artikel entity.
func (tu *TeamUpdate) ClearArtikel() *TeamUpdate {
	tu.mutation.ClearArtikel()
	return tu
}

// RemoveArtikelIDs removes the "artikel" edge to Artikel entities by IDs.
func (tu *TeamUpdate) RemoveArtikelIDs(ids ...int) *TeamUpdate {
	tu.mutation.RemoveArtikelIDs(ids...)
	return tu
}

// RemoveArtikel removes "artikel" edges to Artikel entities.
func (tu *TeamUpdate) RemoveArtikel(a ...*Artikel) *TeamUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tu.RemoveArtikelIDs(ids...)
}

// ClearJahr clears the "Jahr" edge to the Inventur entity.
func (tu *TeamUpdate) ClearJahr() *TeamUpdate {
	tu.mutation.ClearJahr()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TeamUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TeamUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TeamUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TeamUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TeamUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(team.Table, team.Columns, sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Team(); ok {
		_spec.SetField(team.FieldTeam, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedTeam(); ok {
		_spec.AddField(team.FieldTeam, field.TypeInt, value)
	}
	if value, ok := tu.mutation.Mitarbeiter(); ok {
		_spec.SetField(team.FieldMitarbeiter, field.TypeString, value)
	}
	if value, ok := tu.mutation.Farbe(); ok {
		_spec.SetField(team.FieldFarbe, field.TypeString, value)
	}
	if value, ok := tu.mutation.Ort(); ok {
		_spec.SetField(team.FieldOrt, field.TypeString, value)
	}
	if tu.mutation.ArtikelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.ArtikelTable,
			Columns: []string{team.ArtikelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artikel.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedArtikelIDs(); len(nodes) > 0 && !tu.mutation.ArtikelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.ArtikelTable,
			Columns: []string{team.ArtikelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artikel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ArtikelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.ArtikelTable,
			Columns: []string{team.ArtikelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artikel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.JahrCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   team.JahrTable,
			Columns: []string{team.JahrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventur.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.JahrIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   team.JahrTable,
			Columns: []string{team.JahrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventur.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{team.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TeamUpdateOne is the builder for updating a single Team entity.
type TeamUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TeamMutation
}

// SetTeam sets the "Team" field.
func (tuo *TeamUpdateOne) SetTeam(i int) *TeamUpdateOne {
	tuo.mutation.ResetTeam()
	tuo.mutation.SetTeam(i)
	return tuo
}

// SetNillableTeam sets the "Team" field if the given value is not nil.
func (tuo *TeamUpdateOne) SetNillableTeam(i *int) *TeamUpdateOne {
	if i != nil {
		tuo.SetTeam(*i)
	}
	return tuo
}

// AddTeam adds i to the "Team" field.
func (tuo *TeamUpdateOne) AddTeam(i int) *TeamUpdateOne {
	tuo.mutation.AddTeam(i)
	return tuo
}

// SetMitarbeiter sets the "Mitarbeiter" field.
func (tuo *TeamUpdateOne) SetMitarbeiter(s string) *TeamUpdateOne {
	tuo.mutation.SetMitarbeiter(s)
	return tuo
}

// SetNillableMitarbeiter sets the "Mitarbeiter" field if the given value is not nil.
func (tuo *TeamUpdateOne) SetNillableMitarbeiter(s *string) *TeamUpdateOne {
	if s != nil {
		tuo.SetMitarbeiter(*s)
	}
	return tuo
}

// SetFarbe sets the "Farbe" field.
func (tuo *TeamUpdateOne) SetFarbe(s string) *TeamUpdateOne {
	tuo.mutation.SetFarbe(s)
	return tuo
}

// SetNillableFarbe sets the "Farbe" field if the given value is not nil.
func (tuo *TeamUpdateOne) SetNillableFarbe(s *string) *TeamUpdateOne {
	if s != nil {
		tuo.SetFarbe(*s)
	}
	return tuo
}

// SetOrt sets the "Ort" field.
func (tuo *TeamUpdateOne) SetOrt(s string) *TeamUpdateOne {
	tuo.mutation.SetOrt(s)
	return tuo
}

// SetNillableOrt sets the "Ort" field if the given value is not nil.
func (tuo *TeamUpdateOne) SetNillableOrt(s *string) *TeamUpdateOne {
	if s != nil {
		tuo.SetOrt(*s)
	}
	return tuo
}

// AddArtikelIDs adds the "artikel" edge to the Artikel entity by IDs.
func (tuo *TeamUpdateOne) AddArtikelIDs(ids ...int) *TeamUpdateOne {
	tuo.mutation.AddArtikelIDs(ids...)
	return tuo
}

// AddArtikel adds the "artikel" edges to the Artikel entity.
func (tuo *TeamUpdateOne) AddArtikel(a ...*Artikel) *TeamUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tuo.AddArtikelIDs(ids...)
}

// SetJahrID sets the "Jahr" edge to the Inventur entity by ID.
func (tuo *TeamUpdateOne) SetJahrID(id int) *TeamUpdateOne {
	tuo.mutation.SetJahrID(id)
	return tuo
}

// SetNillableJahrID sets the "Jahr" edge to the Inventur entity by ID if the given value is not nil.
func (tuo *TeamUpdateOne) SetNillableJahrID(id *int) *TeamUpdateOne {
	if id != nil {
		tuo = tuo.SetJahrID(*id)
	}
	return tuo
}

// SetJahr sets the "Jahr" edge to the Inventur entity.
func (tuo *TeamUpdateOne) SetJahr(i *Inventur) *TeamUpdateOne {
	return tuo.SetJahrID(i.ID)
}

// Mutation returns the TeamMutation object of the builder.
func (tuo *TeamUpdateOne) Mutation() *TeamMutation {
	return tuo.mutation
}

// ClearArtikel clears all "artikel" edges to the Artikel entity.
func (tuo *TeamUpdateOne) ClearArtikel() *TeamUpdateOne {
	tuo.mutation.ClearArtikel()
	return tuo
}

// RemoveArtikelIDs removes the "artikel" edge to Artikel entities by IDs.
func (tuo *TeamUpdateOne) RemoveArtikelIDs(ids ...int) *TeamUpdateOne {
	tuo.mutation.RemoveArtikelIDs(ids...)
	return tuo
}

// RemoveArtikel removes "artikel" edges to Artikel entities.
func (tuo *TeamUpdateOne) RemoveArtikel(a ...*Artikel) *TeamUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tuo.RemoveArtikelIDs(ids...)
}

// ClearJahr clears the "Jahr" edge to the Inventur entity.
func (tuo *TeamUpdateOne) ClearJahr() *TeamUpdateOne {
	tuo.mutation.ClearJahr()
	return tuo
}

// Where appends a list predicates to the TeamUpdate builder.
func (tuo *TeamUpdateOne) Where(ps ...predicate.Team) *TeamUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TeamUpdateOne) Select(field string, fields ...string) *TeamUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Team entity.
func (tuo *TeamUpdateOne) Save(ctx context.Context) (*Team, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TeamUpdateOne) SaveX(ctx context.Context) *Team {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TeamUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TeamUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TeamUpdateOne) sqlSave(ctx context.Context) (_node *Team, err error) {
	_spec := sqlgraph.NewUpdateSpec(team.Table, team.Columns, sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Team.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, team.FieldID)
		for _, f := range fields {
			if !team.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != team.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Team(); ok {
		_spec.SetField(team.FieldTeam, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedTeam(); ok {
		_spec.AddField(team.FieldTeam, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.Mitarbeiter(); ok {
		_spec.SetField(team.FieldMitarbeiter, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Farbe(); ok {
		_spec.SetField(team.FieldFarbe, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Ort(); ok {
		_spec.SetField(team.FieldOrt, field.TypeString, value)
	}
	if tuo.mutation.ArtikelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.ArtikelTable,
			Columns: []string{team.ArtikelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artikel.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedArtikelIDs(); len(nodes) > 0 && !tuo.mutation.ArtikelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.ArtikelTable,
			Columns: []string{team.ArtikelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artikel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ArtikelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.ArtikelTable,
			Columns: []string{team.ArtikelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(artikel.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.JahrCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   team.JahrTable,
			Columns: []string{team.JahrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventur.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.JahrIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   team.JahrTable,
			Columns: []string{team.JahrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(inventur.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Team{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{team.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
