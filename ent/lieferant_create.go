// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"golang-backend/ent/ansprechpartner"
	"golang-backend/ent/lieferant"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LieferantCreate is the builder for creating a Lieferant entity.
type LieferantCreate struct {
	config
	mutation *LieferantMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetFirma sets the "Firma" field.
func (lc *LieferantCreate) SetFirma(s string) *LieferantCreate {
	lc.mutation.SetFirma(s)
	return lc
}

// SetKundennummer sets the "Kundennummer" field.
func (lc *LieferantCreate) SetKundennummer(s string) *LieferantCreate {
	lc.mutation.SetKundennummer(s)
	return lc
}

// SetWebseite sets the "Webseite" field.
func (lc *LieferantCreate) SetWebseite(s string) *LieferantCreate {
	lc.mutation.SetWebseite(s)
	return lc
}

// AddAnsprechpartnerIDs adds the "Ansprechpartner" edge to the Ansprechpartner entity by IDs.
func (lc *LieferantCreate) AddAnsprechpartnerIDs(ids ...int) *LieferantCreate {
	lc.mutation.AddAnsprechpartnerIDs(ids...)
	return lc
}

// AddAnsprechpartner adds the "Ansprechpartner" edges to the Ansprechpartner entity.
func (lc *LieferantCreate) AddAnsprechpartner(a ...*Ansprechpartner) *LieferantCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return lc.AddAnsprechpartnerIDs(ids...)
}

// Mutation returns the LieferantMutation object of the builder.
func (lc *LieferantCreate) Mutation() *LieferantMutation {
	return lc.mutation
}

// Save creates the Lieferant in the database.
func (lc *LieferantCreate) Save(ctx context.Context) (*Lieferant, error) {
	return withHooks(ctx, lc.sqlSave, lc.mutation, lc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LieferantCreate) SaveX(ctx context.Context) *Lieferant {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *LieferantCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *LieferantCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *LieferantCreate) check() error {
	if _, ok := lc.mutation.Firma(); !ok {
		return &ValidationError{Name: "Firma", err: errors.New(`ent: missing required field "Lieferant.Firma"`)}
	}
	if v, ok := lc.mutation.Firma(); ok {
		if err := lieferant.FirmaValidator(v); err != nil {
			return &ValidationError{Name: "Firma", err: fmt.Errorf(`ent: validator failed for field "Lieferant.Firma": %w`, err)}
		}
	}
	if _, ok := lc.mutation.Kundennummer(); !ok {
		return &ValidationError{Name: "Kundennummer", err: errors.New(`ent: missing required field "Lieferant.Kundennummer"`)}
	}
	if _, ok := lc.mutation.Webseite(); !ok {
		return &ValidationError{Name: "Webseite", err: errors.New(`ent: missing required field "Lieferant.Webseite"`)}
	}
	return nil
}

func (lc *LieferantCreate) sqlSave(ctx context.Context) (*Lieferant, error) {
	if err := lc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	lc.mutation.id = &_node.ID
	lc.mutation.done = true
	return _node, nil
}

func (lc *LieferantCreate) createSpec() (*Lieferant, *sqlgraph.CreateSpec) {
	var (
		_node = &Lieferant{config: lc.config}
		_spec = sqlgraph.NewCreateSpec(lieferant.Table, sqlgraph.NewFieldSpec(lieferant.FieldID, field.TypeInt))
	)
	_spec.OnConflict = lc.conflict
	if value, ok := lc.mutation.Firma(); ok {
		_spec.SetField(lieferant.FieldFirma, field.TypeString, value)
		_node.Firma = value
	}
	if value, ok := lc.mutation.Kundennummer(); ok {
		_spec.SetField(lieferant.FieldKundennummer, field.TypeString, value)
		_node.Kundennummer = &value
	}
	if value, ok := lc.mutation.Webseite(); ok {
		_spec.SetField(lieferant.FieldWebseite, field.TypeString, value)
		_node.Webseite = &value
	}
	if nodes := lc.mutation.AnsprechpartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lieferant.AnsprechpartnerTable,
			Columns: []string{lieferant.AnsprechpartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ansprechpartner.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Lieferant.Create().
//		SetFirma(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LieferantUpsert) {
//			SetFirma(v+v).
//		}).
//		Exec(ctx)
func (lc *LieferantCreate) OnConflict(opts ...sql.ConflictOption) *LieferantUpsertOne {
	lc.conflict = opts
	return &LieferantUpsertOne{
		create: lc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Lieferant.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lc *LieferantCreate) OnConflictColumns(columns ...string) *LieferantUpsertOne {
	lc.conflict = append(lc.conflict, sql.ConflictColumns(columns...))
	return &LieferantUpsertOne{
		create: lc,
	}
}

type (
	// LieferantUpsertOne is the builder for "upsert"-ing
	//  one Lieferant node.
	LieferantUpsertOne struct {
		create *LieferantCreate
	}

	// LieferantUpsert is the "OnConflict" setter.
	LieferantUpsert struct {
		*sql.UpdateSet
	}
)

// SetFirma sets the "Firma" field.
func (u *LieferantUpsert) SetFirma(v string) *LieferantUpsert {
	u.Set(lieferant.FieldFirma, v)
	return u
}

// UpdateFirma sets the "Firma" field to the value that was provided on create.
func (u *LieferantUpsert) UpdateFirma() *LieferantUpsert {
	u.SetExcluded(lieferant.FieldFirma)
	return u
}

// SetKundennummer sets the "Kundennummer" field.
func (u *LieferantUpsert) SetKundennummer(v string) *LieferantUpsert {
	u.Set(lieferant.FieldKundennummer, v)
	return u
}

// UpdateKundennummer sets the "Kundennummer" field to the value that was provided on create.
func (u *LieferantUpsert) UpdateKundennummer() *LieferantUpsert {
	u.SetExcluded(lieferant.FieldKundennummer)
	return u
}

// SetWebseite sets the "Webseite" field.
func (u *LieferantUpsert) SetWebseite(v string) *LieferantUpsert {
	u.Set(lieferant.FieldWebseite, v)
	return u
}

// UpdateWebseite sets the "Webseite" field to the value that was provided on create.
func (u *LieferantUpsert) UpdateWebseite() *LieferantUpsert {
	u.SetExcluded(lieferant.FieldWebseite)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Lieferant.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *LieferantUpsertOne) UpdateNewValues() *LieferantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Lieferant.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *LieferantUpsertOne) Ignore() *LieferantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LieferantUpsertOne) DoNothing() *LieferantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LieferantCreate.OnConflict
// documentation for more info.
func (u *LieferantUpsertOne) Update(set func(*LieferantUpsert)) *LieferantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LieferantUpsert{UpdateSet: update})
	}))
	return u
}

// SetFirma sets the "Firma" field.
func (u *LieferantUpsertOne) SetFirma(v string) *LieferantUpsertOne {
	return u.Update(func(s *LieferantUpsert) {
		s.SetFirma(v)
	})
}

// UpdateFirma sets the "Firma" field to the value that was provided on create.
func (u *LieferantUpsertOne) UpdateFirma() *LieferantUpsertOne {
	return u.Update(func(s *LieferantUpsert) {
		s.UpdateFirma()
	})
}

// SetKundennummer sets the "Kundennummer" field.
func (u *LieferantUpsertOne) SetKundennummer(v string) *LieferantUpsertOne {
	return u.Update(func(s *LieferantUpsert) {
		s.SetKundennummer(v)
	})
}

// UpdateKundennummer sets the "Kundennummer" field to the value that was provided on create.
func (u *LieferantUpsertOne) UpdateKundennummer() *LieferantUpsertOne {
	return u.Update(func(s *LieferantUpsert) {
		s.UpdateKundennummer()
	})
}

// SetWebseite sets the "Webseite" field.
func (u *LieferantUpsertOne) SetWebseite(v string) *LieferantUpsertOne {
	return u.Update(func(s *LieferantUpsert) {
		s.SetWebseite(v)
	})
}

// UpdateWebseite sets the "Webseite" field to the value that was provided on create.
func (u *LieferantUpsertOne) UpdateWebseite() *LieferantUpsertOne {
	return u.Update(func(s *LieferantUpsert) {
		s.UpdateWebseite()
	})
}

// Exec executes the query.
func (u *LieferantUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LieferantCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LieferantUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LieferantUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LieferantUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LieferantCreateBulk is the builder for creating many Lieferant entities in bulk.
type LieferantCreateBulk struct {
	config
	err      error
	builders []*LieferantCreate
	conflict []sql.ConflictOption
}

// Save creates the Lieferant entities in the database.
func (lcb *LieferantCreateBulk) Save(ctx context.Context) ([]*Lieferant, error) {
	if lcb.err != nil {
		return nil, lcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Lieferant, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LieferantMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = lcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LieferantCreateBulk) SaveX(ctx context.Context) []*Lieferant {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *LieferantCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *LieferantCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Lieferant.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LieferantUpsert) {
//			SetFirma(v+v).
//		}).
//		Exec(ctx)
func (lcb *LieferantCreateBulk) OnConflict(opts ...sql.ConflictOption) *LieferantUpsertBulk {
	lcb.conflict = opts
	return &LieferantUpsertBulk{
		create: lcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Lieferant.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lcb *LieferantCreateBulk) OnConflictColumns(columns ...string) *LieferantUpsertBulk {
	lcb.conflict = append(lcb.conflict, sql.ConflictColumns(columns...))
	return &LieferantUpsertBulk{
		create: lcb,
	}
}

// LieferantUpsertBulk is the builder for "upsert"-ing
// a bulk of Lieferant nodes.
type LieferantUpsertBulk struct {
	create *LieferantCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Lieferant.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *LieferantUpsertBulk) UpdateNewValues() *LieferantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Lieferant.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *LieferantUpsertBulk) Ignore() *LieferantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LieferantUpsertBulk) DoNothing() *LieferantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LieferantCreateBulk.OnConflict
// documentation for more info.
func (u *LieferantUpsertBulk) Update(set func(*LieferantUpsert)) *LieferantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LieferantUpsert{UpdateSet: update})
	}))
	return u
}

// SetFirma sets the "Firma" field.
func (u *LieferantUpsertBulk) SetFirma(v string) *LieferantUpsertBulk {
	return u.Update(func(s *LieferantUpsert) {
		s.SetFirma(v)
	})
}

// UpdateFirma sets the "Firma" field to the value that was provided on create.
func (u *LieferantUpsertBulk) UpdateFirma() *LieferantUpsertBulk {
	return u.Update(func(s *LieferantUpsert) {
		s.UpdateFirma()
	})
}

// SetKundennummer sets the "Kundennummer" field.
func (u *LieferantUpsertBulk) SetKundennummer(v string) *LieferantUpsertBulk {
	return u.Update(func(s *LieferantUpsert) {
		s.SetKundennummer(v)
	})
}

// UpdateKundennummer sets the "Kundennummer" field to the value that was provided on create.
func (u *LieferantUpsertBulk) UpdateKundennummer() *LieferantUpsertBulk {
	return u.Update(func(s *LieferantUpsert) {
		s.UpdateKundennummer()
	})
}

// SetWebseite sets the "Webseite" field.
func (u *LieferantUpsertBulk) SetWebseite(v string) *LieferantUpsertBulk {
	return u.Update(func(s *LieferantUpsert) {
		s.SetWebseite(v)
	})
}

// UpdateWebseite sets the "Webseite" field to the value that was provided on create.
func (u *LieferantUpsertBulk) UpdateWebseite() *LieferantUpsertBulk {
	return u.Update(func(s *LieferantUpsert) {
		s.UpdateWebseite()
	})
}

// Exec executes the query.
func (u *LieferantUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the LieferantCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LieferantCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LieferantUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
