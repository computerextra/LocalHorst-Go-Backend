// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"golang-backend/ent/ansprechpartner"
	"golang-backend/ent/lieferant"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LieferantCreate is the builder for creating a Lieferant entity.
type LieferantCreate struct {
	config
	mutation *LieferantMutation
	hooks    []Hook
}

// SetFirma sets the "Firma" field.
func (lc *LieferantCreate) SetFirma(s string) *LieferantCreate {
	lc.mutation.SetFirma(s)
	return lc
}

// SetKundennummer sets the "Kundennummer" field.
func (lc *LieferantCreate) SetKundennummer(s string) *LieferantCreate {
	lc.mutation.SetKundennummer(s)
	return lc
}

// SetWebseite sets the "Webseite" field.
func (lc *LieferantCreate) SetWebseite(s string) *LieferantCreate {
	lc.mutation.SetWebseite(s)
	return lc
}

// AddAnsprechpartnerIDs adds the "Ansprechpartner" edge to the Ansprechpartner entity by IDs.
func (lc *LieferantCreate) AddAnsprechpartnerIDs(ids ...int) *LieferantCreate {
	lc.mutation.AddAnsprechpartnerIDs(ids...)
	return lc
}

// AddAnsprechpartner adds the "Ansprechpartner" edges to the Ansprechpartner entity.
func (lc *LieferantCreate) AddAnsprechpartner(a ...*Ansprechpartner) *LieferantCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return lc.AddAnsprechpartnerIDs(ids...)
}

// Mutation returns the LieferantMutation object of the builder.
func (lc *LieferantCreate) Mutation() *LieferantMutation {
	return lc.mutation
}

// Save creates the Lieferant in the database.
func (lc *LieferantCreate) Save(ctx context.Context) (*Lieferant, error) {
	return withHooks(ctx, lc.sqlSave, lc.mutation, lc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LieferantCreate) SaveX(ctx context.Context) *Lieferant {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *LieferantCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *LieferantCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *LieferantCreate) check() error {
	if _, ok := lc.mutation.Firma(); !ok {
		return &ValidationError{Name: "Firma", err: errors.New(`ent: missing required field "Lieferant.Firma"`)}
	}
	if v, ok := lc.mutation.Firma(); ok {
		if err := lieferant.FirmaValidator(v); err != nil {
			return &ValidationError{Name: "Firma", err: fmt.Errorf(`ent: validator failed for field "Lieferant.Firma": %w`, err)}
		}
	}
	if _, ok := lc.mutation.Kundennummer(); !ok {
		return &ValidationError{Name: "Kundennummer", err: errors.New(`ent: missing required field "Lieferant.Kundennummer"`)}
	}
	if _, ok := lc.mutation.Webseite(); !ok {
		return &ValidationError{Name: "Webseite", err: errors.New(`ent: missing required field "Lieferant.Webseite"`)}
	}
	return nil
}

func (lc *LieferantCreate) sqlSave(ctx context.Context) (*Lieferant, error) {
	if err := lc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	lc.mutation.id = &_node.ID
	lc.mutation.done = true
	return _node, nil
}

func (lc *LieferantCreate) createSpec() (*Lieferant, *sqlgraph.CreateSpec) {
	var (
		_node = &Lieferant{config: lc.config}
		_spec = sqlgraph.NewCreateSpec(lieferant.Table, sqlgraph.NewFieldSpec(lieferant.FieldID, field.TypeInt))
	)
	if value, ok := lc.mutation.Firma(); ok {
		_spec.SetField(lieferant.FieldFirma, field.TypeString, value)
		_node.Firma = value
	}
	if value, ok := lc.mutation.Kundennummer(); ok {
		_spec.SetField(lieferant.FieldKundennummer, field.TypeString, value)
		_node.Kundennummer = &value
	}
	if value, ok := lc.mutation.Webseite(); ok {
		_spec.SetField(lieferant.FieldWebseite, field.TypeString, value)
		_node.Webseite = &value
	}
	if nodes := lc.mutation.AnsprechpartnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lieferant.AnsprechpartnerTable,
			Columns: []string{lieferant.AnsprechpartnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ansprechpartner.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LieferantCreateBulk is the builder for creating many Lieferant entities in bulk.
type LieferantCreateBulk struct {
	config
	err      error
	builders []*LieferantCreate
}

// Save creates the Lieferant entities in the database.
func (lcb *LieferantCreateBulk) Save(ctx context.Context) ([]*Lieferant, error) {
	if lcb.err != nil {
		return nil, lcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Lieferant, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LieferantMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LieferantCreateBulk) SaveX(ctx context.Context) []*Lieferant {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *LieferantCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *LieferantCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}
