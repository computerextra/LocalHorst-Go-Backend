// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"golang-backend/ent/artikel"
	"golang-backend/ent/predicate"
	"golang-backend/ent/team"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ArtikelUpdate is the builder for updating Artikel entities.
type ArtikelUpdate struct {
	config
	hooks    []Hook
	mutation *ArtikelMutation
}

// Where appends a list predicates to the ArtikelUpdate builder.
func (au *ArtikelUpdate) Where(ps ...predicate.Artikel) *ArtikelUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetArtikelnummer sets the "Artikelnummer" field.
func (au *ArtikelUpdate) SetArtikelnummer(s string) *ArtikelUpdate {
	au.mutation.SetArtikelnummer(s)
	return au
}

// SetNillableArtikelnummer sets the "Artikelnummer" field if the given value is not nil.
func (au *ArtikelUpdate) SetNillableArtikelnummer(s *string) *ArtikelUpdate {
	if s != nil {
		au.SetArtikelnummer(*s)
	}
	return au
}

// SetSuchbegriff sets the "Suchbegriff" field.
func (au *ArtikelUpdate) SetSuchbegriff(s string) *ArtikelUpdate {
	au.mutation.SetSuchbegriff(s)
	return au
}

// SetNillableSuchbegriff sets the "Suchbegriff" field if the given value is not nil.
func (au *ArtikelUpdate) SetNillableSuchbegriff(s *string) *ArtikelUpdate {
	if s != nil {
		au.SetSuchbegriff(*s)
	}
	return au
}

// SetAnzahl sets the "Anzahl" field.
func (au *ArtikelUpdate) SetAnzahl(i int) *ArtikelUpdate {
	au.mutation.ResetAnzahl()
	au.mutation.SetAnzahl(i)
	return au
}

// SetNillableAnzahl sets the "Anzahl" field if the given value is not nil.
func (au *ArtikelUpdate) SetNillableAnzahl(i *int) *ArtikelUpdate {
	if i != nil {
		au.SetAnzahl(*i)
	}
	return au
}

// AddAnzahl adds i to the "Anzahl" field.
func (au *ArtikelUpdate) AddAnzahl(i int) *ArtikelUpdate {
	au.mutation.AddAnzahl(i)
	return au
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (au *ArtikelUpdate) SetTeamID(id int) *ArtikelUpdate {
	au.mutation.SetTeamID(id)
	return au
}

// SetNillableTeamID sets the "team" edge to the Team entity by ID if the given value is not nil.
func (au *ArtikelUpdate) SetNillableTeamID(id *int) *ArtikelUpdate {
	if id != nil {
		au = au.SetTeamID(*id)
	}
	return au
}

// SetTeam sets the "team" edge to the Team entity.
func (au *ArtikelUpdate) SetTeam(t *Team) *ArtikelUpdate {
	return au.SetTeamID(t.ID)
}

// Mutation returns the ArtikelMutation object of the builder.
func (au *ArtikelUpdate) Mutation() *ArtikelMutation {
	return au.mutation
}

// ClearTeam clears the "team" edge to the Team entity.
func (au *ArtikelUpdate) ClearTeam() *ArtikelUpdate {
	au.mutation.ClearTeam()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ArtikelUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *ArtikelUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ArtikelUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ArtikelUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *ArtikelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(artikel.Table, artikel.Columns, sqlgraph.NewFieldSpec(artikel.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Artikelnummer(); ok {
		_spec.SetField(artikel.FieldArtikelnummer, field.TypeString, value)
	}
	if value, ok := au.mutation.Suchbegriff(); ok {
		_spec.SetField(artikel.FieldSuchbegriff, field.TypeString, value)
	}
	if value, ok := au.mutation.Anzahl(); ok {
		_spec.SetField(artikel.FieldAnzahl, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedAnzahl(); ok {
		_spec.AddField(artikel.FieldAnzahl, field.TypeInt, value)
	}
	if au.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artikel.TeamTable,
			Columns: []string{artikel.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artikel.TeamTable,
			Columns: []string{artikel.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{artikel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// ArtikelUpdateOne is the builder for updating a single Artikel entity.
type ArtikelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ArtikelMutation
}

// SetArtikelnummer sets the "Artikelnummer" field.
func (auo *ArtikelUpdateOne) SetArtikelnummer(s string) *ArtikelUpdateOne {
	auo.mutation.SetArtikelnummer(s)
	return auo
}

// SetNillableArtikelnummer sets the "Artikelnummer" field if the given value is not nil.
func (auo *ArtikelUpdateOne) SetNillableArtikelnummer(s *string) *ArtikelUpdateOne {
	if s != nil {
		auo.SetArtikelnummer(*s)
	}
	return auo
}

// SetSuchbegriff sets the "Suchbegriff" field.
func (auo *ArtikelUpdateOne) SetSuchbegriff(s string) *ArtikelUpdateOne {
	auo.mutation.SetSuchbegriff(s)
	return auo
}

// SetNillableSuchbegriff sets the "Suchbegriff" field if the given value is not nil.
func (auo *ArtikelUpdateOne) SetNillableSuchbegriff(s *string) *ArtikelUpdateOne {
	if s != nil {
		auo.SetSuchbegriff(*s)
	}
	return auo
}

// SetAnzahl sets the "Anzahl" field.
func (auo *ArtikelUpdateOne) SetAnzahl(i int) *ArtikelUpdateOne {
	auo.mutation.ResetAnzahl()
	auo.mutation.SetAnzahl(i)
	return auo
}

// SetNillableAnzahl sets the "Anzahl" field if the given value is not nil.
func (auo *ArtikelUpdateOne) SetNillableAnzahl(i *int) *ArtikelUpdateOne {
	if i != nil {
		auo.SetAnzahl(*i)
	}
	return auo
}

// AddAnzahl adds i to the "Anzahl" field.
func (auo *ArtikelUpdateOne) AddAnzahl(i int) *ArtikelUpdateOne {
	auo.mutation.AddAnzahl(i)
	return auo
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (auo *ArtikelUpdateOne) SetTeamID(id int) *ArtikelUpdateOne {
	auo.mutation.SetTeamID(id)
	return auo
}

// SetNillableTeamID sets the "team" edge to the Team entity by ID if the given value is not nil.
func (auo *ArtikelUpdateOne) SetNillableTeamID(id *int) *ArtikelUpdateOne {
	if id != nil {
		auo = auo.SetTeamID(*id)
	}
	return auo
}

// SetTeam sets the "team" edge to the Team entity.
func (auo *ArtikelUpdateOne) SetTeam(t *Team) *ArtikelUpdateOne {
	return auo.SetTeamID(t.ID)
}

// Mutation returns the ArtikelMutation object of the builder.
func (auo *ArtikelUpdateOne) Mutation() *ArtikelMutation {
	return auo.mutation
}

// ClearTeam clears the "team" edge to the Team entity.
func (auo *ArtikelUpdateOne) ClearTeam() *ArtikelUpdateOne {
	auo.mutation.ClearTeam()
	return auo
}

// Where appends a list predicates to the ArtikelUpdate builder.
func (auo *ArtikelUpdateOne) Where(ps ...predicate.Artikel) *ArtikelUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *ArtikelUpdateOne) Select(field string, fields ...string) *ArtikelUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Artikel entity.
func (auo *ArtikelUpdateOne) Save(ctx context.Context) (*Artikel, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ArtikelUpdateOne) SaveX(ctx context.Context) *Artikel {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ArtikelUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ArtikelUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *ArtikelUpdateOne) sqlSave(ctx context.Context) (_node *Artikel, err error) {
	_spec := sqlgraph.NewUpdateSpec(artikel.Table, artikel.Columns, sqlgraph.NewFieldSpec(artikel.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Artikel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, artikel.FieldID)
		for _, f := range fields {
			if !artikel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != artikel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Artikelnummer(); ok {
		_spec.SetField(artikel.FieldArtikelnummer, field.TypeString, value)
	}
	if value, ok := auo.mutation.Suchbegriff(); ok {
		_spec.SetField(artikel.FieldSuchbegriff, field.TypeString, value)
	}
	if value, ok := auo.mutation.Anzahl(); ok {
		_spec.SetField(artikel.FieldAnzahl, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedAnzahl(); ok {
		_spec.AddField(artikel.FieldAnzahl, field.TypeInt, value)
	}
	if auo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artikel.TeamTable,
			Columns: []string{artikel.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   artikel.TeamTable,
			Columns: []string{artikel.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Artikel{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{artikel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
