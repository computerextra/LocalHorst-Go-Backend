// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"golang-backend/ent/inventur"
	"golang-backend/ent/team"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Team is the model entity for the Team schema.
type Team struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Team holds the value of the "Team" field.
	Team int `json:"Team,omitempty"`
	// Mitarbeiter holds the value of the "Mitarbeiter" field.
	Mitarbeiter string `json:"Mitarbeiter,omitempty"`
	// Farbe holds the value of the "Farbe" field.
	Farbe string `json:"Farbe,omitempty"`
	// Ort holds the value of the "Ort" field.
	Ort string `json:"Ort,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TeamQuery when eager-loading is set.
	Edges          TeamEdges `json:"edges"`
	inventur_teams *int
	selectValues   sql.SelectValues
}

// TeamEdges holds the relations/edges for other nodes in the graph.
type TeamEdges struct {
	// Artikel holds the value of the artikel edge.
	Artikel []*Artikel `json:"artikel,omitempty"`
	// Jahr holds the value of the Jahr edge.
	Jahr *Inventur `json:"Jahr,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ArtikelOrErr returns the Artikel value or an error if the edge
// was not loaded in eager-loading.
func (e TeamEdges) ArtikelOrErr() ([]*Artikel, error) {
	if e.loadedTypes[0] {
		return e.Artikel, nil
	}
	return nil, &NotLoadedError{edge: "artikel"}
}

// JahrOrErr returns the Jahr value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TeamEdges) JahrOrErr() (*Inventur, error) {
	if e.Jahr != nil {
		return e.Jahr, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: inventur.Label}
	}
	return nil, &NotLoadedError{edge: "Jahr"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Team) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case team.FieldID, team.FieldTeam:
			values[i] = new(sql.NullInt64)
		case team.FieldMitarbeiter, team.FieldFarbe, team.FieldOrt:
			values[i] = new(sql.NullString)
		case team.ForeignKeys[0]: // inventur_teams
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Team fields.
func (t *Team) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case team.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case team.FieldTeam:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Team", values[i])
			} else if value.Valid {
				t.Team = int(value.Int64)
			}
		case team.FieldMitarbeiter:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Mitarbeiter", values[i])
			} else if value.Valid {
				t.Mitarbeiter = value.String
			}
		case team.FieldFarbe:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Farbe", values[i])
			} else if value.Valid {
				t.Farbe = value.String
			}
		case team.FieldOrt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Ort", values[i])
			} else if value.Valid {
				t.Ort = value.String
			}
		case team.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field inventur_teams", value)
			} else if value.Valid {
				t.inventur_teams = new(int)
				*t.inventur_teams = int(value.Int64)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Team.
// This includes values selected through modifiers, order, etc.
func (t *Team) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryArtikel queries the "artikel" edge of the Team entity.
func (t *Team) QueryArtikel() *ArtikelQuery {
	return NewTeamClient(t.config).QueryArtikel(t)
}

// QueryJahr queries the "Jahr" edge of the Team entity.
func (t *Team) QueryJahr() *InventurQuery {
	return NewTeamClient(t.config).QueryJahr(t)
}

// Update returns a builder for updating this Team.
// Note that you need to call Team.Unwrap() before calling this method if this Team
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Team) Update() *TeamUpdateOne {
	return NewTeamClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Team entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Team) Unwrap() *Team {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Team is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Team) String() string {
	var builder strings.Builder
	builder.WriteString("Team(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("Team=")
	builder.WriteString(fmt.Sprintf("%v", t.Team))
	builder.WriteString(", ")
	builder.WriteString("Mitarbeiter=")
	builder.WriteString(t.Mitarbeiter)
	builder.WriteString(", ")
	builder.WriteString("Farbe=")
	builder.WriteString(t.Farbe)
	builder.WriteString(", ")
	builder.WriteString("Ort=")
	builder.WriteString(t.Ort)
	builder.WriteByte(')')
	return builder.String()
}

// Teams is a parsable slice of Team.
type Teams []*Team
