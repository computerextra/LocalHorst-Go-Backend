// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"golang-backend/ent/version"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Version is the model entity for the Version schema.
type Version struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CurrentVersion holds the value of the "CurrentVersion" field.
	CurrentVersion float64 `json:"CurrentVersion,omitempty"`
	selectValues   sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Version) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case version.FieldCurrentVersion:
			values[i] = new(sql.NullFloat64)
		case version.FieldID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Version fields.
func (v *Version) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case version.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			v.ID = int(value.Int64)
		case version.FieldCurrentVersion:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field CurrentVersion", values[i])
			} else if value.Valid {
				v.CurrentVersion = value.Float64
			}
		default:
			v.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Version.
// This includes values selected through modifiers, order, etc.
func (v *Version) Value(name string) (ent.Value, error) {
	return v.selectValues.Get(name)
}

// Update returns a builder for updating this Version.
// Note that you need to call Version.Unwrap() before calling this method if this Version
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Version) Update() *VersionUpdateOne {
	return NewVersionClient(v.config).UpdateOne(v)
}

// Unwrap unwraps the Version entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Version) Unwrap() *Version {
	_tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Version is not a transactional entity")
	}
	v.config.driver = _tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Version) String() string {
	var builder strings.Builder
	builder.WriteString("Version(")
	builder.WriteString(fmt.Sprintf("id=%v, ", v.ID))
	builder.WriteString("CurrentVersion=")
	builder.WriteString(fmt.Sprintf("%v", v.CurrentVersion))
	builder.WriteByte(')')
	return builder.String()
}

// Versions is a parsable slice of Version.
type Versions []*Version
